<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1141.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="19405"><g><title>libsystem_kernel.dylib`__psynch_cvwait (35 samples, 0.18%)</title><rect x="0.0155%" y="885" width="0.1804%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="35"/><text x="0.2655%" y="895.50"></text></g><g><title>generate-forecast`&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (43 samples, 0.22%)</title><rect x="0.0052%" y="917" width="0.2216%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="43"/><text x="0.2552%" y="927.50"></text></g><g><title>generate-forecast`tokio::park::thread::Inner::park (43 samples, 0.22%)</title><rect x="0.0052%" y="901" width="0.2216%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="43"/><text x="0.2552%" y="911.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (6 samples, 0.03%)</title><rect x="0.1958%" y="885" width="0.0309%" height="15" fill="rgb(248,212,6)" fg:x="38" fg:w="6"/><text x="0.4458%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (3 samples, 0.02%)</title><rect x="0.2113%" y="869" width="0.0155%" height="15" fill="rgb(208,68,35)" fg:x="41" fg:w="3"/><text x="0.4613%" y="879.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (7 samples, 0.04%)</title><rect x="1.0873%" y="805" width="0.0361%" height="15" fill="rgb(232,128,0)" fg:x="211" fg:w="7"/><text x="1.3373%" y="815.50"></text></g><g><title>generate-forecast`__rdl_realloc (27 samples, 0.14%)</title><rect x="5.6120%" y="773" width="0.1391%" height="15" fill="rgb(207,160,47)" fg:x="1089" fg:w="27"/><text x="5.8620%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (958 samples, 4.94%)</title><rect x="6.0551%" y="757" width="4.9369%" height="15" fill="rgb(228,23,34)" fg:x="1175" fg:w="958"/><text x="6.3051%" y="767.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (910 samples, 4.69%)</title><rect x="6.3025%" y="741" width="4.6895%" height="15" fill="rgb(218,30,26)" fg:x="1223" fg:w="910"/><text x="6.5525%" y="751.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (320 samples, 1.65%)</title><rect x="9.3430%" y="725" width="1.6491%" height="15" fill="rgb(220,122,19)" fg:x="1813" fg:w="320"/><text x="9.5930%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (82 samples, 0.42%)</title><rect x="10.5694%" y="709" width="0.4226%" height="15" fill="rgb(250,228,42)" fg:x="2051" fg:w="82"/><text x="10.8194%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,021 samples, 5.26%)</title><rect x="5.7511%" y="773" width="5.2615%" height="15" fill="rgb(240,193,28)" fg:x="1116" fg:w="1021"/><text x="6.0011%" y="783.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="10.9920%" y="757" width="0.0206%" height="15" fill="rgb(216,20,37)" fg:x="2133" fg:w="4"/><text x="11.2420%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (16 samples, 0.08%)</title><rect x="11.0126%" y="773" width="0.0825%" height="15" fill="rgb(206,188,39)" fg:x="2137" fg:w="16"/><text x="11.2626%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.03%)</title><rect x="11.0951%" y="773" width="0.0258%" height="15" fill="rgb(217,207,13)" fg:x="2153" fg:w="5"/><text x="11.3451%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (13 samples, 0.07%)</title><rect x="11.5486%" y="757" width="0.0670%" height="15" fill="rgb(231,73,38)" fg:x="2241" fg:w="13"/><text x="11.7986%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (14 samples, 0.07%)</title><rect x="12.0794%" y="741" width="0.0721%" height="15" fill="rgb(225,20,46)" fg:x="2344" fg:w="14"/><text x="12.3294%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (188 samples, 0.97%)</title><rect x="12.4040%" y="725" width="0.9688%" height="15" fill="rgb(210,31,41)" fg:x="2407" fg:w="188"/><text x="12.6540%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (170 samples, 0.88%)</title><rect x="12.4968%" y="709" width="0.8761%" height="15" fill="rgb(221,200,47)" fg:x="2425" fg:w="170"/><text x="12.7468%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (245 samples, 1.26%)</title><rect x="12.1515%" y="741" width="1.2626%" height="15" fill="rgb(226,26,5)" fg:x="2358" fg:w="245"/><text x="12.4015%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.04%)</title><rect x="13.3728%" y="725" width="0.0412%" height="15" fill="rgb(249,33,26)" fg:x="2595" fg:w="8"/><text x="13.6228%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (354 samples, 1.82%)</title><rect x="11.6156%" y="757" width="1.8243%" height="15" fill="rgb(235,183,28)" fg:x="2254" fg:w="354"/><text x="11.8656%" y="767.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.03%)</title><rect x="13.4141%" y="741" width="0.0258%" height="15" fill="rgb(221,5,38)" fg:x="2603" fg:w="5"/><text x="13.6641%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.03%)</title><rect x="13.4398%" y="757" width="0.0258%" height="15" fill="rgb(247,18,42)" fg:x="2608" fg:w="5"/><text x="13.6898%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (172 samples, 0.89%)</title><rect x="13.4656%" y="757" width="0.8864%" height="15" fill="rgb(241,131,45)" fg:x="2613" fg:w="172"/><text x="13.7156%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (152 samples, 0.78%)</title><rect x="13.5687%" y="741" width="0.7833%" height="15" fill="rgb(249,31,29)" fg:x="2633" fg:w="152"/><text x="13.8187%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`realloc (643 samples, 3.31%)</title><rect x="11.1208%" y="773" width="3.3136%" height="15" fill="rgb(225,111,53)" fg:x="2158" fg:w="643"/><text x="11.3708%" y="783.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.08%)</title><rect x="14.3520%" y="757" width="0.0825%" height="15" fill="rgb(238,160,17)" fg:x="2785" fg:w="16"/><text x="14.6020%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.06%)</title><rect x="14.4344%" y="773" width="0.0567%" height="15" fill="rgb(214,148,48)" fg:x="2801" fg:w="11"/><text x="14.6844%" y="783.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2,103 samples, 10.84%)</title><rect x="3.6846%" y="789" width="10.8374%" height="15" fill="rgb(232,36,49)" fg:x="715" fg:w="2103"/><text x="3.9346%" y="799.50">generate-forecas..</text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.03%)</title><rect x="14.4911%" y="773" width="0.0309%" height="15" fill="rgb(209,103,24)" fg:x="2812" fg:w="6"/><text x="14.7411%" y="783.50"></text></g><g><title>generate-forecast`__rdl_alloc (12 samples, 0.06%)</title><rect x="14.5220%" y="789" width="0.0618%" height="15" fill="rgb(229,88,8)" fg:x="2818" fg:w="12"/><text x="14.7720%" y="799.50"></text></g><g><title>generate-forecast`__rdl_realloc (4 samples, 0.02%)</title><rect x="14.5839%" y="789" width="0.0206%" height="15" fill="rgb(213,181,19)" fg:x="2830" fg:w="4"/><text x="14.8339%" y="799.50"></text></g><g><title>generate-forecast`&lt;&amp;T as core::fmt::Binary&gt;::fmt (4 samples, 0.02%)</title><rect x="15.1301%" y="773" width="0.0206%" height="15" fill="rgb(254,191,54)" fg:x="2936" fg:w="4"/><text x="15.3801%" y="783.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.06%)</title><rect x="15.1507%" y="773" width="0.0618%" height="15" fill="rgb(241,83,37)" fg:x="2940" fg:w="12"/><text x="15.4007%" y="783.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (9 samples, 0.05%)</title><rect x="15.2126%" y="773" width="0.0464%" height="15" fill="rgb(233,36,39)" fg:x="2952" fg:w="9"/><text x="15.4626%" y="783.50"></text></g><g><title>generate-forecast`&lt;&amp;T as core::fmt::Binary&gt;::fmt (6 samples, 0.03%)</title><rect x="16.0113%" y="757" width="0.0309%" height="15" fill="rgb(226,3,54)" fg:x="3107" fg:w="6"/><text x="16.2613%" y="767.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (108 samples, 0.56%)</title><rect x="16.0423%" y="757" width="0.5566%" height="15" fill="rgb(245,192,40)" fg:x="3113" fg:w="108"/><text x="16.2923%" y="767.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (39 samples, 0.20%)</title><rect x="16.3978%" y="741" width="0.2010%" height="15" fill="rgb(238,167,29)" fg:x="3182" fg:w="39"/><text x="16.6478%" y="751.50"></text></g><g><title>generate-forecast`DYLD-STUB$$memcpy (9 samples, 0.05%)</title><rect x="16.5988%" y="757" width="0.0464%" height="15" fill="rgb(232,182,51)" fg:x="3221" fg:w="9"/><text x="16.8488%" y="767.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (18 samples, 0.09%)</title><rect x="16.6452%" y="757" width="0.0928%" height="15" fill="rgb(231,60,39)" fg:x="3230" fg:w="18"/><text x="16.8952%" y="767.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (10 samples, 0.05%)</title><rect x="17.7480%" y="741" width="0.0515%" height="15" fill="rgb(208,69,12)" fg:x="3444" fg:w="10"/><text x="17.9980%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (381 samples, 1.96%)</title><rect x="18.0933%" y="725" width="1.9634%" height="15" fill="rgb(235,93,37)" fg:x="3511" fg:w="381"/><text x="18.3433%" y="735.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (333 samples, 1.72%)</title><rect x="18.3406%" y="709" width="1.7161%" height="15" fill="rgb(213,116,39)" fg:x="3559" fg:w="333"/><text x="18.5906%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (315 samples, 1.62%)</title><rect x="18.4334%" y="693" width="1.6233%" height="15" fill="rgb(222,207,29)" fg:x="3577" fg:w="315"/><text x="18.6834%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.03%)</title><rect x="20.0567%" y="725" width="0.0309%" height="15" fill="rgb(206,96,30)" fg:x="3892" fg:w="6"/><text x="20.3067%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.03%)</title><rect x="20.0876%" y="725" width="0.0258%" height="15" fill="rgb(218,138,4)" fg:x="3898" fg:w="5"/><text x="20.3376%" y="735.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (461 samples, 2.38%)</title><rect x="17.7995%" y="741" width="2.3757%" height="15" fill="rgb(250,191,14)" fg:x="3454" fg:w="461"/><text x="18.0495%" y="751.50">ge..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.06%)</title><rect x="20.1134%" y="725" width="0.0618%" height="15" fill="rgb(239,60,40)" fg:x="3903" fg:w="12"/><text x="20.3634%" y="735.50"></text></g><g><title>generate-forecast`__rdl_alloc (9 samples, 0.05%)</title><rect x="20.1752%" y="741" width="0.0464%" height="15" fill="rgb(206,27,48)" fg:x="3915" fg:w="9"/><text x="20.4252%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (192 samples, 0.99%)</title><rect x="20.2267%" y="741" width="0.9894%" height="15" fill="rgb(225,35,8)" fg:x="3925" fg:w="192"/><text x="20.4767%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral::write_prefix (10 samples, 0.05%)</title><rect x="21.2162%" y="741" width="0.0515%" height="15" fill="rgb(250,213,24)" fg:x="4117" fg:w="10"/><text x="21.4662%" y="751.50"></text></g><g><title>generate-forecast`__rdl_alloc (3 samples, 0.02%)</title><rect x="21.2780%" y="709" width="0.0155%" height="15" fill="rgb(247,123,22)" fg:x="4129" fg:w="3"/><text x="21.5280%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (344 samples, 1.77%)</title><rect x="21.7212%" y="677" width="1.7727%" height="15" fill="rgb(231,138,38)" fg:x="4215" fg:w="344"/><text x="21.9712%" y="687.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (314 samples, 1.62%)</title><rect x="21.8758%" y="661" width="1.6181%" height="15" fill="rgb(231,145,46)" fg:x="4245" fg:w="314"/><text x="22.1258%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (382 samples, 1.97%)</title><rect x="21.5357%" y="693" width="1.9686%" height="15" fill="rgb(251,118,11)" fg:x="4179" fg:w="382"/><text x="21.7857%" y="703.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="23.4939%" y="677" width="0.0103%" height="15" fill="rgb(217,147,25)" fg:x="4559" fg:w="2"/><text x="23.7439%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.03%)</title><rect x="23.5043%" y="693" width="0.0309%" height="15" fill="rgb(247,81,37)" fg:x="4561" fg:w="6"/><text x="23.7543%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (2 samples, 0.01%)</title><rect x="23.5352%" y="693" width="0.0103%" height="15" fill="rgb(209,12,38)" fg:x="4567" fg:w="2"/><text x="23.7852%" y="703.50"></text></g><g><title>generate-forecast`alloc::string::String::push (439 samples, 2.26%)</title><rect x="21.2935%" y="709" width="2.2623%" height="15" fill="rgb(227,1,9)" fg:x="4132" fg:w="439"/><text x="21.5435%" y="719.50">g..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="23.5455%" y="693" width="0.0103%" height="15" fill="rgb(248,47,43)" fg:x="4569" fg:w="2"/><text x="23.7955%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.05%)</title><rect x="23.5558%" y="709" width="0.0464%" height="15" fill="rgb(221,10,30)" fg:x="4571" fg:w="9"/><text x="23.8058%" y="719.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (458 samples, 2.36%)</title><rect x="21.2677%" y="725" width="2.3602%" height="15" fill="rgb(210,229,1)" fg:x="4127" fg:w="458"/><text x="21.5177%" y="735.50">ge..</text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.03%)</title><rect x="23.6022%" y="709" width="0.0258%" height="15" fill="rgb(222,148,37)" fg:x="4580" fg:w="5"/><text x="23.8522%" y="719.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (52 samples, 0.27%)</title><rect x="23.6279%" y="725" width="0.2680%" height="15" fill="rgb(234,67,33)" fg:x="4585" fg:w="52"/><text x="23.8779%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (28 samples, 0.14%)</title><rect x="23.7516%" y="709" width="0.1443%" height="15" fill="rgb(247,98,35)" fg:x="4609" fg:w="28"/><text x="24.0016%" y="719.50"></text></g><g><title>generate-forecast`alloc::string::String::push (10 samples, 0.05%)</title><rect x="23.9011%" y="725" width="0.0515%" height="15" fill="rgb(247,138,52)" fg:x="4638" fg:w="10"/><text x="24.1511%" y="735.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral::write_prefix (46 samples, 0.24%)</title><rect x="23.9526%" y="725" width="0.2371%" height="15" fill="rgb(213,79,30)" fg:x="4648" fg:w="46"/><text x="24.2026%" y="735.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (569 samples, 2.93%)</title><rect x="21.2677%" y="741" width="2.9322%" height="15" fill="rgb(246,177,23)" fg:x="4127" fg:w="569"/><text x="21.5177%" y="751.50">ge..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="24.1896%" y="725" width="0.0103%" height="15" fill="rgb(230,62,27)" fg:x="4694" fg:w="2"/><text x="24.4396%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="24.1999%" y="741" width="0.0103%" height="15" fill="rgb(216,154,8)" fg:x="4696" fg:w="2"/><text x="24.4499%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (1,456 samples, 7.50%)</title><rect x="16.7380%" y="757" width="7.5032%" height="15" fill="rgb(244,35,45)" fg:x="3248" fg:w="1456"/><text x="16.9880%" y="767.50">generate-f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="24.2154%" y="741" width="0.0258%" height="15" fill="rgb(251,115,12)" fg:x="4699" fg:w="5"/><text x="24.4654%" y="751.50"></text></g><g><title>generate-forecast`alloc::fmt::format (1,886 samples, 9.72%)</title><rect x="14.6045%" y="789" width="9.7191%" height="15" fill="rgb(240,54,50)" fg:x="2834" fg:w="1886"/><text x="14.8545%" y="799.50">generate-forec..</text></g><g><title>generate-forecast`core::fmt::write (1,759 samples, 9.06%)</title><rect x="15.2590%" y="773" width="9.0647%" height="15" fill="rgb(233,84,52)" fg:x="2961" fg:w="1759"/><text x="15.5090%" y="783.50">generate-fore..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (16 samples, 0.08%)</title><rect x="24.2412%" y="757" width="0.0825%" height="15" fill="rgb(207,117,47)" fg:x="4704" fg:w="16"/><text x="24.4912%" y="767.50"></text></g><g><title>generate-forecast`core::fmt::write (5 samples, 0.03%)</title><rect x="24.3236%" y="789" width="0.0258%" height="15" fill="rgb(249,43,39)" fg:x="4720" fg:w="5"/><text x="24.5736%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.05%)</title><rect x="24.3494%" y="789" width="0.0464%" height="15" fill="rgb(209,38,44)" fg:x="4725" fg:w="9"/><text x="24.5994%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (427 samples, 2.20%)</title><rect x="25.3388%" y="773" width="2.2005%" height="15" fill="rgb(236,212,23)" fg:x="4917" fg:w="427"/><text x="25.5888%" y="783.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (396 samples, 2.04%)</title><rect x="25.4986%" y="757" width="2.0407%" height="15" fill="rgb(242,79,21)" fg:x="4948" fg:w="396"/><text x="25.7486%" y="767.50">l..</text></g><g><title>libsystem_malloc.dylib`free (626 samples, 3.23%)</title><rect x="24.3958%" y="789" width="3.2260%" height="15" fill="rgb(211,96,35)" fg:x="4734" fg:w="626"/><text x="24.6458%" y="799.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.08%)</title><rect x="27.5393%" y="773" width="0.0825%" height="15" fill="rgb(253,215,40)" fg:x="5344" fg:w="16"/><text x="27.7893%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.06%)</title><rect x="31.3373%" y="773" width="0.0567%" height="15" fill="rgb(211,81,21)" fg:x="6081" fg:w="11"/><text x="31.5873%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="31.3940%" y="773" width="0.0103%" height="15" fill="rgb(208,190,38)" fg:x="6092" fg:w="2"/><text x="31.6440%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (229 samples, 1.18%)</title><rect x="33.7439%" y="757" width="1.1801%" height="15" fill="rgb(235,213,38)" fg:x="6548" fg:w="229"/><text x="33.9939%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,498 samples, 7.72%)</title><rect x="27.6217%" y="789" width="7.7197%" height="15" fill="rgb(237,122,38)" fg:x="5360" fg:w="1498"/><text x="27.8717%" y="799.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (764 samples, 3.94%)</title><rect x="31.4043%" y="773" width="3.9371%" height="15" fill="rgb(244,218,35)" fg:x="6094" fg:w="764"/><text x="31.6543%" y="783.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (81 samples, 0.42%)</title><rect x="34.9240%" y="757" width="0.4174%" height="15" fill="rgb(240,68,47)" fg:x="6777" fg:w="81"/><text x="35.1740%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.03%)</title><rect x="35.3414%" y="789" width="0.0309%" height="15" fill="rgb(210,16,53)" fg:x="6858" fg:w="6"/><text x="35.5914%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.07%)</title><rect x="35.3723%" y="789" width="0.0670%" height="15" fill="rgb(235,124,12)" fg:x="6864" fg:w="13"/><text x="35.6223%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.14%)</title><rect x="35.4393%" y="789" width="0.1391%" height="15" fill="rgb(224,169,11)" fg:x="6877" fg:w="27"/><text x="35.6893%" y="799.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,692 samples, 34.49%)</title><rect x="1.1234%" y="805" width="34.4860%" height="15" fill="rgb(250,166,2)" fg:x="218" fg:w="6692"/><text x="1.3734%" y="815.50">generate-forecast`&lt;core::iter::adapters::flatten::FlatMa..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.03%)</title><rect x="35.5785%" y="789" width="0.0309%" height="15" fill="rgb(242,216,29)" fg:x="6904" fg:w="6"/><text x="35.8285%" y="799.50"></text></g><g><title>generate-forecast`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="35.6094%" y="805" width="0.0103%" height="15" fill="rgb(230,116,27)" fg:x="6910" fg:w="2"/><text x="35.8594%" y="815.50"></text></g><g><title>generate-forecast`__rdl_dealloc (24 samples, 0.12%)</title><rect x="35.6197%" y="805" width="0.1237%" height="15" fill="rgb(228,99,48)" fg:x="6912" fg:w="24"/><text x="35.8697%" y="815.50"></text></g><g><title>generate-forecast`__rust_dealloc (8 samples, 0.04%)</title><rect x="35.7434%" y="805" width="0.0412%" height="15" fill="rgb(253,11,6)" fg:x="6936" fg:w="8"/><text x="35.9934%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (32 samples, 0.16%)</title><rect x="35.7897%" y="805" width="0.1649%" height="15" fill="rgb(247,143,39)" fg:x="6945" fg:w="32"/><text x="36.0397%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.08%)</title><rect x="35.9547%" y="805" width="0.0825%" height="15" fill="rgb(236,97,10)" fg:x="6977" fg:w="16"/><text x="36.2047%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.05%)</title><rect x="36.0371%" y="805" width="0.0515%" height="15" fill="rgb(233,208,19)" fg:x="6993" fg:w="10"/><text x="36.2871%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.05%)</title><rect x="36.0886%" y="805" width="0.0515%" height="15" fill="rgb(216,164,2)" fg:x="7003" fg:w="10"/><text x="36.3386%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.05%)</title><rect x="36.0886%" y="789" width="0.0515%" height="15" fill="rgb(220,129,5)" fg:x="7003" fg:w="10"/><text x="36.3386%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.05%)</title><rect x="36.0886%" y="773" width="0.0515%" height="15" fill="rgb(242,17,10)" fg:x="7003" fg:w="10"/><text x="36.3386%" y="783.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="36.1196%" y="757" width="0.0206%" height="15" fill="rgb(242,107,0)" fg:x="7009" fg:w="4"/><text x="36.3696%" y="767.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (7,021 samples, 36.18%)</title><rect x="0.2525%" y="821" width="36.1814%" height="15" fill="rgb(251,28,31)" fg:x="49" fg:w="7021"/><text x="0.5025%" y="831.50">generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecEx..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (57 samples, 0.29%)</title><rect x="36.1402%" y="805" width="0.2937%" height="15" fill="rgb(233,223,10)" fg:x="7013" fg:w="57"/><text x="36.3902%" y="815.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.28%)</title><rect x="36.4339%" y="821" width="0.2834%" height="15" fill="rgb(215,21,27)" fg:x="7070" fg:w="55"/><text x="36.6839%" y="831.50"></text></g><g><title>generate-forecast`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.07%)</title><rect x="36.9338%" y="789" width="0.0670%" height="15" fill="rgb(232,23,21)" fg:x="7167" fg:w="13"/><text x="37.1838%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.06%)</title><rect x="36.9389%" y="773" width="0.0618%" height="15" fill="rgb(244,5,23)" fg:x="7168" fg:w="12"/><text x="37.1889%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.06%)</title><rect x="36.9389%" y="757" width="0.0618%" height="15" fill="rgb(226,81,46)" fg:x="7168" fg:w="12"/><text x="37.1889%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.06%)</title><rect x="36.9441%" y="741" width="0.0567%" height="15" fill="rgb(247,70,30)" fg:x="7169" fg:w="11"/><text x="37.1941%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.04%)</title><rect x="36.9647%" y="725" width="0.0361%" height="15" fill="rgb(212,68,19)" fg:x="7173" fg:w="7"/><text x="37.2147%" y="735.50"></text></g><g><title>generate-forecast`opj_j2k_create_decompress (2 samples, 0.01%)</title><rect x="37.0008%" y="773" width="0.0103%" height="15" fill="rgb(240,187,13)" fg:x="7180" fg:w="2"/><text x="37.2508%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.01%)</title><rect x="37.0008%" y="757" width="0.0103%" height="15" fill="rgb(223,113,26)" fg:x="7180" fg:w="2"/><text x="37.2508%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="37.0008%" y="741" width="0.0103%" height="15" fill="rgb(206,192,2)" fg:x="7180" fg:w="2"/><text x="37.2508%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.01%)</title><rect x="37.0008%" y="725" width="0.0103%" height="15" fill="rgb(241,108,4)" fg:x="7180" fg:w="2"/><text x="37.2508%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.01%)</title><rect x="37.0008%" y="709" width="0.0103%" height="15" fill="rgb(247,173,49)" fg:x="7180" fg:w="2"/><text x="37.2508%" y="719.50"></text></g><g><title>generate-forecast`opj_create_decompress (3 samples, 0.02%)</title><rect x="37.0008%" y="789" width="0.0155%" height="15" fill="rgb(224,114,35)" fg:x="7180" fg:w="3"/><text x="37.2508%" y="799.50"></text></g><g><title>generate-forecast`opj_j2k_tcp_destroy (2 samples, 0.01%)</title><rect x="37.0162%" y="757" width="0.0103%" height="15" fill="rgb(245,159,27)" fg:x="7183" fg:w="2"/><text x="37.2662%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.05%)</title><rect x="37.0317%" y="725" width="0.0464%" height="15" fill="rgb(245,172,44)" fg:x="7186" fg:w="9"/><text x="37.2817%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.04%)</title><rect x="37.0420%" y="709" width="0.0361%" height="15" fill="rgb(236,23,11)" fg:x="7188" fg:w="7"/><text x="37.2920%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.03%)</title><rect x="37.0472%" y="693" width="0.0309%" height="15" fill="rgb(205,117,38)" fg:x="7189" fg:w="6"/><text x="37.2972%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.01%)</title><rect x="37.0781%" y="725" width="0.0103%" height="15" fill="rgb(237,72,25)" fg:x="7195" fg:w="2"/><text x="37.3281%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="37.2069%" y="693" width="0.0206%" height="15" fill="rgb(244,70,9)" fg:x="7220" fg:w="4"/><text x="37.4569%" y="703.50"></text></g><g><title>generate-forecast`opj_tcd_code_block_dec_deallocate (43 samples, 0.22%)</title><rect x="37.0317%" y="741" width="0.2216%" height="15" fill="rgb(217,125,39)" fg:x="7186" fg:w="43"/><text x="37.2817%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (32 samples, 0.16%)</title><rect x="37.0884%" y="725" width="0.1649%" height="15" fill="rgb(235,36,10)" fg:x="7197" fg:w="32"/><text x="37.3384%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.09%)</title><rect x="37.1605%" y="709" width="0.0928%" height="15" fill="rgb(251,123,47)" fg:x="7211" fg:w="18"/><text x="37.4105%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.03%)</title><rect x="37.2275%" y="693" width="0.0258%" height="15" fill="rgb(221,13,13)" fg:x="7224" fg:w="5"/><text x="37.4775%" y="703.50"></text></g><g><title>generate-forecast`opj_tcd_destroy (49 samples, 0.25%)</title><rect x="37.0265%" y="757" width="0.2525%" height="15" fill="rgb(238,131,9)" fg:x="7185" fg:w="49"/><text x="37.2765%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="37.2584%" y="741" width="0.0206%" height="15" fill="rgb(211,50,8)" fg:x="7230" fg:w="4"/><text x="37.5084%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="37.2636%" y="725" width="0.0155%" height="15" fill="rgb(245,182,24)" fg:x="7231" fg:w="3"/><text x="37.5136%" y="735.50"></text></g><g><title>generate-forecast`opj_destroy_codec (54 samples, 0.28%)</title><rect x="37.0162%" y="789" width="0.2783%" height="15" fill="rgb(242,14,37)" fg:x="7183" fg:w="54"/><text x="37.2662%" y="799.50"></text></g><g><title>generate-forecast`opj_j2k_destroy (54 samples, 0.28%)</title><rect x="37.0162%" y="773" width="0.2783%" height="15" fill="rgb(246,228,12)" fg:x="7183" fg:w="54"/><text x="37.2662%" y="783.50"></text></g><g><title>generate-forecast`opj_idwt53_h (14 samples, 0.07%)</title><rect x="37.3357%" y="693" width="0.0721%" height="15" fill="rgb(213,55,15)" fg:x="7245" fg:w="14"/><text x="37.5857%" y="703.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="37.3924%" y="677" width="0.0155%" height="15" fill="rgb(209,9,3)" fg:x="7256" fg:w="3"/><text x="37.6424%" y="687.50"></text></g><g><title>generate-forecast`opj_idwt53_v (14 samples, 0.07%)</title><rect x="37.4079%" y="693" width="0.0721%" height="15" fill="rgb(230,59,30)" fg:x="7259" fg:w="14"/><text x="37.6579%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="37.4800%" y="693" width="0.0103%" height="15" fill="rgb(209,121,21)" fg:x="7273" fg:w="2"/><text x="37.7300%" y="703.50"></text></g><g><title>generate-forecast`opj_dwt_decode (33 samples, 0.17%)</title><rect x="37.3254%" y="709" width="0.1701%" height="15" fill="rgb(220,109,13)" fg:x="7243" fg:w="33"/><text x="37.5754%" y="719.50"></text></g><g><title>generate-forecast`opj_tcd_is_subband_area_of_interest (19 samples, 0.10%)</title><rect x="37.5213%" y="693" width="0.0979%" height="15" fill="rgb(232,18,1)" fg:x="7281" fg:w="19"/><text x="37.7713%" y="703.50"></text></g><g><title>generate-forecast`opj_mqc_setstate (2 samples, 0.01%)</title><rect x="46.7766%" y="661" width="0.0103%" height="15" fill="rgb(215,41,42)" fg:x="9077" fg:w="2"/><text x="47.0266%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="46.8539%" y="645" width="0.0206%" height="15" fill="rgb(224,123,36)" fg:x="9092" fg:w="4"/><text x="47.1039%" y="655.50"></text></g><g><title>generate-forecast`opj_t1_allocate_buffers (20 samples, 0.10%)</title><rect x="46.7869%" y="661" width="0.1031%" height="15" fill="rgb(240,125,3)" fg:x="9079" fg:w="20"/><text x="47.0369%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="46.8745%" y="645" width="0.0155%" height="15" fill="rgb(205,98,50)" fg:x="9096" fg:w="3"/><text x="47.1245%" y="655.50"></text></g><g><title>generate-forecast`opj_t1_dec_clnpass (1,739 samples, 8.96%)</title><rect x="46.8900%" y="661" width="8.9616%" height="15" fill="rgb(205,185,37)" fg:x="9099" fg:w="1739"/><text x="47.1400%" y="671.50">generate-fore..</text></g><g><title>generate-forecast`opj_t1_dec_clnpass_step (1,114 samples, 5.74%)</title><rect x="50.1108%" y="645" width="5.7408%" height="15" fill="rgb(238,207,15)" fg:x="9724" fg:w="1114"/><text x="50.3608%" y="655.50">generat..</text></g><g><title>generate-forecast`opj_t1_dec_clnpass_step (67 samples, 0.35%)</title><rect x="55.8516%" y="661" width="0.3453%" height="15" fill="rgb(213,199,42)" fg:x="10838" fg:w="67"/><text x="56.1016%" y="671.50"></text></g><g><title>generate-forecast`opj_t1_dec_sigpass_mqc (1,801 samples, 9.28%)</title><rect x="56.1969%" y="661" width="9.2811%" height="15" fill="rgb(235,201,11)" fg:x="10905" fg:w="1801"/><text x="56.4469%" y="671.50">generate-fore..</text></g><g><title>generate-forecast`opj_t1_dec_sigpass_step_mqc (1,178 samples, 6.07%)</title><rect x="59.4074%" y="645" width="6.0706%" height="15" fill="rgb(207,46,11)" fg:x="11528" fg:w="1178"/><text x="59.6574%" y="655.50">generate..</text></g><g><title>generate-forecast`opj_t1_dec_sigpass_step_mqc (25 samples, 0.13%)</title><rect x="65.4780%" y="661" width="0.1288%" height="15" fill="rgb(241,35,35)" fg:x="12706" fg:w="25"/><text x="65.7280%" y="671.50"></text></g><g><title>generate-forecast`opq_mqc_finish_dec (2 samples, 0.01%)</title><rect x="65.6068%" y="661" width="0.0103%" height="15" fill="rgb(243,32,47)" fg:x="12731" fg:w="2"/><text x="65.8568%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="65.6171%" y="661" width="0.0258%" height="15" fill="rgb(247,202,23)" fg:x="12733" fg:w="5"/><text x="65.8671%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.02%)</title><rect x="65.6274%" y="645" width="0.0155%" height="15" fill="rgb(219,102,11)" fg:x="12735" fg:w="3"/><text x="65.8774%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.02%)</title><rect x="65.6274%" y="629" width="0.0155%" height="15" fill="rgb(243,110,44)" fg:x="12735" fg:w="3"/><text x="65.8774%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.03%)</title><rect x="65.6429%" y="661" width="0.0309%" height="15" fill="rgb(222,74,54)" fg:x="12738" fg:w="6"/><text x="65.8929%" y="671.50"></text></g><g><title>generate-forecast`opj_t1_clbl_decode_processor (5,444 samples, 28.05%)</title><rect x="37.6243%" y="677" width="28.0546%" height="15" fill="rgb(216,99,12)" fg:x="7301" fg:w="5444"/><text x="37.8743%" y="687.50">generate-forecast`opj_t1_clbl_decode_processor</text></g><g><title>generate-forecast`opj_thread_pool_submit_job (5,449 samples, 28.08%)</title><rect x="37.6192%" y="693" width="28.0804%" height="15" fill="rgb(226,22,26)" fg:x="7300" fg:w="5449"/><text x="37.8692%" y="703.50">generate-forecast`opj_thread_pool_submit_job</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (28 samples, 0.14%)</title><rect x="65.6996%" y="693" width="0.1443%" height="15" fill="rgb(217,163,10)" fg:x="12749" fg:w="28"/><text x="65.9496%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.14%)</title><rect x="65.7047%" y="677" width="0.1391%" height="15" fill="rgb(213,25,53)" fg:x="12750" fg:w="27"/><text x="65.9547%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.12%)</title><rect x="65.7202%" y="661" width="0.1237%" height="15" fill="rgb(252,105,26)" fg:x="12753" fg:w="24"/><text x="65.9702%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.05%)</title><rect x="65.7923%" y="645" width="0.0515%" height="15" fill="rgb(220,39,43)" fg:x="12767" fg:w="10"/><text x="66.0423%" y="655.50"></text></g><g><title>generate-forecast`opj_t1_decode_cblks (5,501 samples, 28.35%)</title><rect x="37.5058%" y="709" width="28.3484%" height="15" fill="rgb(229,68,48)" fg:x="7278" fg:w="5501"/><text x="37.7558%" y="719.50">generate-forecast`opj_t1_decode_cblks</text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (2 samples, 0.01%)</title><rect x="65.8439%" y="693" width="0.0103%" height="15" fill="rgb(252,8,32)" fg:x="12777" fg:w="2"/><text x="66.0939%" y="703.50"></text></g><g><title>generate-forecast`opj_pi_create_decode (2 samples, 0.01%)</title><rect x="65.8696%" y="693" width="0.0103%" height="15" fill="rgb(223,20,43)" fg:x="12782" fg:w="2"/><text x="66.1196%" y="703.50"></text></g><g><title>generate-forecast`opj_bio_read (12 samples, 0.06%)</title><rect x="65.9212%" y="677" width="0.0618%" height="15" fill="rgb(229,81,49)" fg:x="12792" fg:w="12"/><text x="66.1712%" y="687.50"></text></g><g><title>generate-forecast`opj_tgt_decode (88 samples, 0.45%)</title><rect x="65.9830%" y="677" width="0.4535%" height="15" fill="rgb(236,28,36)" fg:x="12804" fg:w="88"/><text x="66.2330%" y="687.50"></text></g><g><title>generate-forecast`opj_bio_read (7 samples, 0.04%)</title><rect x="66.4004%" y="661" width="0.0361%" height="15" fill="rgb(249,185,26)" fg:x="12885" fg:w="7"/><text x="66.6504%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="66.4416%" y="677" width="0.0103%" height="15" fill="rgb(249,174,33)" fg:x="12893" fg:w="2"/><text x="66.6916%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="66.4416%" y="661" width="0.0103%" height="15" fill="rgb(233,201,37)" fg:x="12893" fg:w="2"/><text x="66.6916%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="66.4416%" y="645" width="0.0103%" height="15" fill="rgb(221,78,26)" fg:x="12893" fg:w="2"/><text x="66.6916%" y="655.50"></text></g><g><title>generate-forecast`opj_t2_read_packet_header (112 samples, 0.58%)</title><rect x="65.8799%" y="693" width="0.5772%" height="15" fill="rgb(250,127,30)" fg:x="12784" fg:w="112"/><text x="66.1299%" y="703.50"></text></g><g><title>generate-forecast`opj_tgt_decode (2 samples, 0.01%)</title><rect x="66.4571%" y="693" width="0.0103%" height="15" fill="rgb(230,49,44)" fg:x="12896" fg:w="2"/><text x="66.7071%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.07%)</title><rect x="66.4674%" y="677" width="0.0670%" height="15" fill="rgb(229,67,23)" fg:x="12898" fg:w="13"/><text x="66.7174%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.06%)</title><rect x="66.4726%" y="661" width="0.0618%" height="15" fill="rgb(249,83,47)" fg:x="12899" fg:w="12"/><text x="66.7226%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.06%)</title><rect x="66.4726%" y="645" width="0.0618%" height="15" fill="rgb(215,43,3)" fg:x="12899" fg:w="12"/><text x="66.7226%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.02%)</title><rect x="66.5138%" y="629" width="0.0206%" height="15" fill="rgb(238,154,13)" fg:x="12907" fg:w="4"/><text x="66.7638%" y="639.50"></text></g><g><title>generate-forecast`opj_t2_decode_packets (133 samples, 0.69%)</title><rect x="65.8542%" y="709" width="0.6854%" height="15" fill="rgb(219,56,2)" fg:x="12779" fg:w="133"/><text x="66.1042%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`realloc (14 samples, 0.07%)</title><rect x="66.4674%" y="693" width="0.0721%" height="15" fill="rgb(233,0,4)" fg:x="12898" fg:w="14"/><text x="66.7174%" y="703.50"></text></g><g><title>generate-forecast`opj_j2k_decode_tile (5,676 samples, 29.25%)</title><rect x="37.2997%" y="741" width="29.2502%" height="15" fill="rgb(235,30,7)" fg:x="7238" fg:w="5676"/><text x="37.5497%" y="751.50">generate-forecast`opj_j2k_decode_tile</text></g><g><title>generate-forecast`opj_tcd_decode_tile (5,674 samples, 29.24%)</title><rect x="37.3100%" y="725" width="29.2399%" height="15" fill="rgb(250,79,13)" fg:x="7240" fg:w="5674"/><text x="37.5600%" y="735.50">generate-forecast`opj_tcd_decode_tile</text></g><g><title>generate-forecast`opj_event_msg (2 samples, 0.01%)</title><rect x="66.5499%" y="725" width="0.0103%" height="15" fill="rgb(211,146,34)" fg:x="12914" fg:w="2"/><text x="66.7999%" y="735.50"></text></g><g><title>libsystem_c.dylib`vsnprintf (2 samples, 0.01%)</title><rect x="66.5499%" y="709" width="0.0103%" height="15" fill="rgb(228,22,38)" fg:x="12914" fg:w="2"/><text x="66.7999%" y="719.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (2 samples, 0.01%)</title><rect x="66.5499%" y="693" width="0.0103%" height="15" fill="rgb(235,168,5)" fg:x="12914" fg:w="2"/><text x="66.7999%" y="703.50"></text></g><g><title>libsystem_c.dylib`__v2printf (2 samples, 0.01%)</title><rect x="66.5499%" y="677" width="0.0103%" height="15" fill="rgb(221,155,16)" fg:x="12914" fg:w="2"/><text x="66.7999%" y="687.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (2 samples, 0.01%)</title><rect x="66.5499%" y="661" width="0.0103%" height="15" fill="rgb(215,215,53)" fg:x="12914" fg:w="2"/><text x="66.7999%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.01%)</title><rect x="66.6169%" y="645" width="0.0103%" height="15" fill="rgb(223,4,10)" fg:x="12927" fg:w="2"/><text x="66.8669%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.03%)</title><rect x="66.6117%" y="677" width="0.0258%" height="15" fill="rgb(234,103,6)" fg:x="12926" fg:w="5"/><text x="66.8617%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="66.6169%" y="661" width="0.0206%" height="15" fill="rgb(227,97,0)" fg:x="12927" fg:w="4"/><text x="66.8669%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="66.6272%" y="645" width="0.0103%" height="15" fill="rgb(234,150,53)" fg:x="12929" fg:w="2"/><text x="66.8772%" y="655.50"></text></g><g><title>generate-forecast`opj_tgt_create (10 samples, 0.05%)</title><rect x="66.5911%" y="693" width="0.0515%" height="15" fill="rgb(228,201,54)" fg:x="12922" fg:w="10"/><text x="66.8411%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.02%)</title><rect x="66.6890%" y="645" width="0.0155%" height="15" fill="rgb(222,22,37)" fg:x="12941" fg:w="3"/><text x="66.9390%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.05%)</title><rect x="66.7045%" y="645" width="0.0515%" height="15" fill="rgb(237,53,32)" fg:x="12944" fg:w="10"/><text x="66.9545%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.10%)</title><rect x="66.6581%" y="661" width="0.1031%" height="15" fill="rgb(233,25,53)" fg:x="12935" fg:w="20"/><text x="66.9081%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (24 samples, 0.12%)</title><rect x="66.6426%" y="693" width="0.1237%" height="15" fill="rgb(210,40,34)" fg:x="12932" fg:w="24"/><text x="66.8926%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.11%)</title><rect x="66.6529%" y="677" width="0.1134%" height="15" fill="rgb(241,220,44)" fg:x="12934" fg:w="22"/><text x="66.9029%" y="687.50"></text></g><g><title>generate-forecast`opj_tcd_init_tile (41 samples, 0.21%)</title><rect x="66.5602%" y="709" width="0.2113%" height="15" fill="rgb(235,28,35)" fg:x="12916" fg:w="41"/><text x="66.8102%" y="719.50"></text></g><g><title>generate-forecast`opj_j2k_decode (5,720 samples, 29.48%)</title><rect x="37.2997%" y="789" width="29.4769%" height="15" fill="rgb(210,56,17)" fg:x="7238" fg:w="5720"/><text x="37.5497%" y="799.50">generate-forecast`opj_j2k_decode</text></g><g><title>generate-forecast`opj_j2k_exec (5,720 samples, 29.48%)</title><rect x="37.2997%" y="773" width="29.4769%" height="15" fill="rgb(224,130,29)" fg:x="7238" fg:w="5720"/><text x="37.5497%" y="783.50">generate-forecast`opj_j2k_exec</text></g><g><title>generate-forecast`opj_j2k_decode_tiles (5,720 samples, 29.48%)</title><rect x="37.2997%" y="757" width="29.4769%" height="15" fill="rgb(235,212,8)" fg:x="7238" fg:w="5720"/><text x="37.5497%" y="767.50">generate-forecast`opj_j2k_decode_tiles</text></g><g><title>generate-forecast`opj_j2k_read_tile_header (44 samples, 0.23%)</title><rect x="66.5499%" y="741" width="0.2267%" height="15" fill="rgb(223,33,50)" fg:x="12914" fg:w="44"/><text x="66.7999%" y="751.50"></text></g><g><title>generate-forecast`opj_tcd_init_decode_tile (42 samples, 0.22%)</title><rect x="66.5602%" y="725" width="0.2164%" height="15" fill="rgb(219,149,13)" fg:x="12916" fg:w="42"/><text x="66.8102%" y="735.50"></text></g><g><title>generate-forecast`opj_j2k_copy_default_tcp_and_create_tcd (2 samples, 0.01%)</title><rect x="66.7766%" y="773" width="0.0103%" height="15" fill="rgb(250,156,29)" fg:x="12958" fg:w="2"/><text x="67.0266%" y="783.50"></text></g><g><title>generate-forecast`opj_j2k_read_siz (3 samples, 0.02%)</title><rect x="66.7869%" y="757" width="0.0155%" height="15" fill="rgb(216,193,19)" fg:x="12960" fg:w="3"/><text x="67.0369%" y="767.50"></text></g><g><title>generate-forecast`opj_j2k_read_header_procedure (16 samples, 0.08%)</title><rect x="66.7869%" y="773" width="0.0825%" height="15" fill="rgb(216,135,14)" fg:x="12960" fg:w="16"/><text x="67.0369%" y="783.50"></text></g><g><title>generate-forecast`opj_stream_read_data (12 samples, 0.06%)</title><rect x="66.8075%" y="757" width="0.0618%" height="15" fill="rgb(241,47,5)" fg:x="12964" fg:w="12"/><text x="67.0575%" y="767.50"></text></g><g><title>generate-forecast`grib::utils::jpeg::jpeg_opj_stream_read_fn (12 samples, 0.06%)</title><rect x="66.8075%" y="741" width="0.0618%" height="15" fill="rgb(233,42,35)" fg:x="12964" fg:w="12"/><text x="67.0575%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.06%)</title><rect x="66.8075%" y="725" width="0.0618%" height="15" fill="rgb(231,13,6)" fg:x="12964" fg:w="12"/><text x="67.0575%" y="735.50"></text></g><g><title>generate-forecast`opj_j2k_read_header (19 samples, 0.10%)</title><rect x="66.7766%" y="789" width="0.0979%" height="15" fill="rgb(207,181,40)" fg:x="12958" fg:w="19"/><text x="67.0266%" y="799.50"></text></g><g><title>generate-forecast`opj_stream_default_create (6 samples, 0.03%)</title><rect x="66.8797%" y="789" width="0.0309%" height="15" fill="rgb(254,173,49)" fg:x="12978" fg:w="6"/><text x="67.1297%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.03%)</title><rect x="66.8797%" y="773" width="0.0309%" height="15" fill="rgb(221,1,38)" fg:x="12978" fg:w="6"/><text x="67.1297%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.03%)</title><rect x="66.8797%" y="757" width="0.0309%" height="15" fill="rgb(206,124,46)" fg:x="12978" fg:w="6"/><text x="67.1297%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (6 samples, 0.03%)</title><rect x="66.8797%" y="741" width="0.0309%" height="15" fill="rgb(249,21,11)" fg:x="12978" fg:w="6"/><text x="67.1297%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (6 samples, 0.03%)</title><rect x="66.8797%" y="725" width="0.0309%" height="15" fill="rgb(222,201,40)" fg:x="12978" fg:w="6"/><text x="67.1297%" y="735.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (5 samples, 0.03%)</title><rect x="66.8848%" y="709" width="0.0258%" height="15" fill="rgb(235,61,29)" fg:x="12979" fg:w="5"/><text x="67.1348%" y="719.50"></text></g><g><title>generate-forecast`grib::utils::jpeg::extract_jpeg_data (5,860 samples, 30.20%)</title><rect x="36.7173%" y="805" width="30.1984%" height="15" fill="rgb(219,207,3)" fg:x="7125" fg:w="5860"/><text x="36.9673%" y="815.50">generate-forecast`grib::utils::jpeg::extract_jpeg..</text></g><g><title>generate-forecast`grib::utils::utils::bits_to_bytes (85 samples, 0.44%)</title><rect x="66.9157%" y="805" width="0.4380%" height="15" fill="rgb(222,56,46)" fg:x="12985" fg:w="85"/><text x="67.1657%" y="815.50"></text></g><g><title>generate-forecast`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="67.3383%" y="789" width="0.0155%" height="15" fill="rgb(239,76,54)" fg:x="13067" fg:w="3"/><text x="67.5883%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.02%)</title><rect x="67.3383%" y="773" width="0.0155%" height="15" fill="rgb(231,124,27)" fg:x="13067" fg:w="3"/><text x="67.5883%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.02%)</title><rect x="67.3383%" y="757" width="0.0155%" height="15" fill="rgb(249,195,6)" fg:x="13067" fg:w="3"/><text x="67.5883%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.02%)</title><rect x="67.3383%" y="741" width="0.0155%" height="15" fill="rgb(237,174,47)" fg:x="13067" fg:w="3"/><text x="67.5883%" y="751.50"></text></g><g><title>generate-forecast`&lt;grib::templates::data_representation::jpeg_template::JPEGDataRepresentationTemplate as grib::templates::data_representation::data_representation_template::DataRepresentationTemplate&lt;f64&gt;&gt;::unpack_range (5,946 samples, 30.64%)</title><rect x="36.7173%" y="821" width="30.6416%" height="15" fill="rgb(206,201,31)" fg:x="7125" fg:w="5946"/><text x="36.9673%" y="831.50">generate-forecast`&lt;grib::templates::data_represen..</text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="67.3692%" y="757" width="0.0103%" height="15" fill="rgb(231,57,52)" fg:x="13073" fg:w="2"/><text x="67.6192%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="67.3692%" y="741" width="0.0103%" height="15" fill="rgb(248,177,22)" fg:x="13073" fg:w="2"/><text x="67.6192%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="67.3692%" y="725" width="0.0103%" height="15" fill="rgb(215,211,37)" fg:x="13073" fg:w="2"/><text x="67.6192%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="67.3692%" y="709" width="0.0103%" height="15" fill="rgb(241,128,51)" fg:x="13073" fg:w="2"/><text x="67.6192%" y="719.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (3 samples, 0.02%)</title><rect x="67.3795%" y="693" width="0.0155%" height="15" fill="rgb(227,165,31)" fg:x="13075" fg:w="3"/><text x="67.6295%" y="703.50"></text></g><g><title>generate-forecast`alloc::string::String::push (3 samples, 0.02%)</title><rect x="67.3795%" y="677" width="0.0155%" height="15" fill="rgb(228,167,24)" fg:x="13075" fg:w="3"/><text x="67.6295%" y="687.50"></text></g><g><title>generate-forecast`alloc::fmt::format (4 samples, 0.02%)</title><rect x="67.3795%" y="757" width="0.0206%" height="15" fill="rgb(228,143,12)" fg:x="13075" fg:w="4"/><text x="67.6295%" y="767.50"></text></g><g><title>generate-forecast`core::fmt::write (4 samples, 0.02%)</title><rect x="67.3795%" y="741" width="0.0206%" height="15" fill="rgb(249,149,8)" fg:x="13075" fg:w="4"/><text x="67.6295%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (4 samples, 0.02%)</title><rect x="67.3795%" y="725" width="0.0206%" height="15" fill="rgb(243,35,44)" fg:x="13075" fg:w="4"/><text x="67.6295%" y="735.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (4 samples, 0.02%)</title><rect x="67.3795%" y="709" width="0.0206%" height="15" fill="rgb(246,89,9)" fg:x="13075" fg:w="4"/><text x="67.6295%" y="719.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.05%)</title><rect x="67.3589%" y="773" width="0.0515%" height="15" fill="rgb(233,213,13)" fg:x="13071" fg:w="10"/><text x="67.6089%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="67.4002%" y="757" width="0.0103%" height="15" fill="rgb(233,141,41)" fg:x="13079" fg:w="2"/><text x="67.6502%" y="767.50"></text></g><g><title>generate-forecast`&lt;grib::templates::grid::LatitudeLongitudeGridTemplate as grib::templates::grid::GridDefinitionTemplate&gt;::index_for_location (12 samples, 0.06%)</title><rect x="67.3589%" y="821" width="0.0618%" height="15" fill="rgb(239,167,4)" fg:x="13071" fg:w="12"/><text x="67.6089%" y="831.50"></text></g><g><title>generate-forecast`grib::utils::utils::read_signed_from_bytes (12 samples, 0.06%)</title><rect x="67.3589%" y="805" width="0.0618%" height="15" fill="rgb(209,217,16)" fg:x="13071" fg:w="12"/><text x="67.6089%" y="815.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (12 samples, 0.06%)</title><rect x="67.3589%" y="789" width="0.0618%" height="15" fill="rgb(219,88,35)" fg:x="13071" fg:w="12"/><text x="67.6089%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.01%)</title><rect x="67.4105%" y="773" width="0.0103%" height="15" fill="rgb(220,193,23)" fg:x="13081" fg:w="2"/><text x="67.6605%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.01%)</title><rect x="67.4105%" y="757" width="0.0103%" height="15" fill="rgb(230,90,52)" fg:x="13081" fg:w="2"/><text x="67.6605%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.01%)</title><rect x="67.4105%" y="741" width="0.0103%" height="15" fill="rgb(252,106,19)" fg:x="13081" fg:w="2"/><text x="67.6605%" y="751.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (10 samples, 0.05%)</title><rect x="67.9361%" y="789" width="0.0515%" height="15" fill="rgb(206,74,20)" fg:x="13183" fg:w="10"/><text x="68.1861%" y="799.50"></text></g><g><title>generate-forecast`__rdl_realloc (20 samples, 0.10%)</title><rect x="71.1157%" y="757" width="0.1031%" height="15" fill="rgb(230,138,44)" fg:x="13800" fg:w="20"/><text x="71.3657%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (668 samples, 3.44%)</title><rect x="71.4816%" y="741" width="3.4424%" height="15" fill="rgb(235,182,43)" fg:x="13871" fg:w="668"/><text x="71.7316%" y="751.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (637 samples, 3.28%)</title><rect x="71.6413%" y="725" width="3.2827%" height="15" fill="rgb(242,16,51)" fg:x="13902" fg:w="637"/><text x="71.8913%" y="735.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (221 samples, 1.14%)</title><rect x="73.7851%" y="709" width="1.1389%" height="15" fill="rgb(248,9,4)" fg:x="14318" fg:w="221"/><text x="74.0351%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (49 samples, 0.25%)</title><rect x="74.6715%" y="693" width="0.2525%" height="15" fill="rgb(210,31,22)" fg:x="14490" fg:w="49"/><text x="74.9215%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (723 samples, 3.73%)</title><rect x="71.2188%" y="757" width="3.7258%" height="15" fill="rgb(239,54,39)" fg:x="13820" fg:w="723"/><text x="71.4688%" y="767.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="74.9240%" y="741" width="0.0206%" height="15" fill="rgb(230,99,41)" fg:x="14539" fg:w="4"/><text x="75.1740%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.04%)</title><rect x="74.9446%" y="757" width="0.0361%" height="15" fill="rgb(253,106,12)" fg:x="14543" fg:w="7"/><text x="75.1946%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.01%)</title><rect x="74.9807%" y="757" width="0.0103%" height="15" fill="rgb(213,46,41)" fg:x="14550" fg:w="2"/><text x="75.2307%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.02%)</title><rect x="75.2590%" y="741" width="0.0155%" height="15" fill="rgb(215,133,35)" fg:x="14604" fg:w="3"/><text x="75.5090%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (8 samples, 0.04%)</title><rect x="75.5578%" y="725" width="0.0412%" height="15" fill="rgb(213,28,5)" fg:x="14662" fg:w="8"/><text x="75.8078%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (135 samples, 0.70%)</title><rect x="75.7743%" y="709" width="0.6957%" height="15" fill="rgb(215,77,49)" fg:x="14704" fg:w="135"/><text x="76.0243%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (120 samples, 0.62%)</title><rect x="75.8516%" y="693" width="0.6184%" height="15" fill="rgb(248,100,22)" fg:x="14719" fg:w="120"/><text x="76.1016%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (175 samples, 0.90%)</title><rect x="75.5991%" y="725" width="0.9018%" height="15" fill="rgb(208,67,9)" fg:x="14670" fg:w="175"/><text x="75.8491%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.03%)</title><rect x="76.4700%" y="709" width="0.0309%" height="15" fill="rgb(219,133,21)" fg:x="14839" fg:w="6"/><text x="76.7200%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (239 samples, 1.23%)</title><rect x="75.2744%" y="741" width="1.2316%" height="15" fill="rgb(246,46,29)" fg:x="14607" fg:w="239"/><text x="75.5244%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.02%)</title><rect x="76.5061%" y="741" width="0.0155%" height="15" fill="rgb(246,185,52)" fg:x="14846" fg:w="3"/><text x="76.7561%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (100 samples, 0.52%)</title><rect x="76.5215%" y="741" width="0.5153%" height="15" fill="rgb(252,136,11)" fg:x="14849" fg:w="100"/><text x="76.7715%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (88 samples, 0.45%)</title><rect x="76.5834%" y="725" width="0.4535%" height="15" fill="rgb(219,138,53)" fg:x="14861" fg:w="88"/><text x="76.8334%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`realloc (402 samples, 2.07%)</title><rect x="74.9910%" y="757" width="2.0716%" height="15" fill="rgb(211,51,23)" fg:x="14552" fg:w="402"/><text x="75.2410%" y="767.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.03%)</title><rect x="77.0368%" y="741" width="0.0258%" height="15" fill="rgb(247,221,28)" fg:x="14949" fg:w="5"/><text x="77.2868%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="77.0626%" y="757" width="0.0206%" height="15" fill="rgb(251,222,45)" fg:x="14954" fg:w="4"/><text x="77.3126%" y="767.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1,388 samples, 7.15%)</title><rect x="69.9665%" y="773" width="7.1528%" height="15" fill="rgb(217,162,53)" fg:x="13577" fg:w="1388"/><text x="70.2165%" y="783.50">generate-f..</text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.04%)</title><rect x="77.0832%" y="757" width="0.0361%" height="15" fill="rgb(229,93,14)" fg:x="14958" fg:w="7"/><text x="77.3332%" y="767.50"></text></g><g><title>generate-forecast`__rdl_alloc (9 samples, 0.05%)</title><rect x="77.1193%" y="773" width="0.0464%" height="15" fill="rgb(209,67,49)" fg:x="14965" fg:w="9"/><text x="77.3693%" y="783.50"></text></g><g><title>generate-forecast`__rdl_realloc (5 samples, 0.03%)</title><rect x="77.1657%" y="773" width="0.0258%" height="15" fill="rgb(213,87,29)" fg:x="14974" fg:w="5"/><text x="77.4157%" y="783.50"></text></g><g><title>generate-forecast`__rust_alloc (3 samples, 0.02%)</title><rect x="77.1914%" y="773" width="0.0155%" height="15" fill="rgb(205,151,52)" fg:x="14979" fg:w="3"/><text x="77.4414%" y="783.50"></text></g><g><title>generate-forecast`&lt;&amp;T as core::fmt::Binary&gt;::fmt (7 samples, 0.04%)</title><rect x="77.5779%" y="757" width="0.0361%" height="15" fill="rgb(253,215,39)" fg:x="15054" fg:w="7"/><text x="77.8279%" y="767.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.03%)</title><rect x="77.6140%" y="757" width="0.0309%" height="15" fill="rgb(221,220,41)" fg:x="15061" fg:w="6"/><text x="77.8640%" y="767.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (3 samples, 0.02%)</title><rect x="77.6449%" y="757" width="0.0155%" height="15" fill="rgb(218,133,21)" fg:x="15067" fg:w="3"/><text x="77.8949%" y="767.50"></text></g><g><title>generate-forecast`&lt;&amp;T as core::fmt::Binary&gt;::fmt (5 samples, 0.03%)</title><rect x="78.0366%" y="741" width="0.0258%" height="15" fill="rgb(221,193,43)" fg:x="15143" fg:w="5"/><text x="78.2866%" y="751.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (58 samples, 0.30%)</title><rect x="78.0624%" y="741" width="0.2989%" height="15" fill="rgb(240,128,52)" fg:x="15148" fg:w="58"/><text x="78.3124%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (19 samples, 0.10%)</title><rect x="78.2633%" y="725" width="0.0979%" height="15" fill="rgb(253,114,12)" fg:x="15187" fg:w="19"/><text x="78.5133%" y="735.50"></text></g><g><title>generate-forecast`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="78.3612%" y="741" width="0.0103%" height="15" fill="rgb(215,223,47)" fg:x="15206" fg:w="2"/><text x="78.6112%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (10 samples, 0.05%)</title><rect x="78.3716%" y="741" width="0.0515%" height="15" fill="rgb(248,225,23)" fg:x="15208" fg:w="10"/><text x="78.6216%" y="751.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (25 samples, 0.13%)</title><rect x="78.8044%" y="725" width="0.1288%" height="15" fill="rgb(250,108,0)" fg:x="15292" fg:w="25"/><text x="79.0544%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (129 samples, 0.66%)</title><rect x="79.0054%" y="709" width="0.6648%" height="15" fill="rgb(228,208,7)" fg:x="15331" fg:w="129"/><text x="79.2554%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (103 samples, 0.53%)</title><rect x="79.1394%" y="693" width="0.5308%" height="15" fill="rgb(244,45,10)" fg:x="15357" fg:w="103"/><text x="79.3894%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (97 samples, 0.50%)</title><rect x="79.1703%" y="677" width="0.4999%" height="15" fill="rgb(207,125,25)" fg:x="15363" fg:w="97"/><text x="79.4203%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="79.6702%" y="709" width="0.0103%" height="15" fill="rgb(210,195,18)" fg:x="15460" fg:w="2"/><text x="79.9202%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="79.6856%" y="709" width="0.0155%" height="15" fill="rgb(249,80,12)" fg:x="15463" fg:w="3"/><text x="79.9356%" y="719.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (152 samples, 0.78%)</title><rect x="78.9333%" y="725" width="0.7833%" height="15" fill="rgb(221,65,9)" fg:x="15317" fg:w="152"/><text x="79.1833%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="79.7011%" y="709" width="0.0155%" height="15" fill="rgb(235,49,36)" fg:x="15466" fg:w="3"/><text x="79.9511%" y="719.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (208 samples, 1.07%)</title><rect x="79.7166%" y="725" width="1.0719%" height="15" fill="rgb(225,32,20)" fg:x="15469" fg:w="208"/><text x="79.9666%" y="735.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.01%)</title><rect x="80.7885%" y="725" width="0.0103%" height="15" fill="rgb(215,141,46)" fg:x="15677" fg:w="2"/><text x="81.0385%" y="735.50"></text></g><g><title>generate-forecast`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="80.8194%" y="693" width="0.0155%" height="15" fill="rgb(250,160,47)" fg:x="15683" fg:w="3"/><text x="81.0694%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (341 samples, 1.76%)</title><rect x="81.7212%" y="661" width="1.7573%" height="15" fill="rgb(216,222,40)" fg:x="15858" fg:w="341"/><text x="81.9712%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (328 samples, 1.69%)</title><rect x="81.7882%" y="645" width="1.6903%" height="15" fill="rgb(234,217,39)" fg:x="15871" fg:w="328"/><text x="82.0382%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (376 samples, 1.94%)</title><rect x="81.5563%" y="677" width="1.9376%" height="15" fill="rgb(207,178,40)" fg:x="15826" fg:w="376"/><text x="81.8063%" y="687.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.02%)</title><rect x="83.4785%" y="661" width="0.0155%" height="15" fill="rgb(221,136,13)" fg:x="16199" fg:w="3"/><text x="83.7285%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.04%)</title><rect x="83.4939%" y="677" width="0.0361%" height="15" fill="rgb(249,199,10)" fg:x="16202" fg:w="7"/><text x="83.7439%" y="687.50"></text></g><g><title>generate-forecast`alloc::string::String::push (533 samples, 2.75%)</title><rect x="80.8400%" y="693" width="2.7467%" height="15" fill="rgb(249,222,13)" fg:x="15687" fg:w="533"/><text x="81.0900%" y="703.50">ge..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.05%)</title><rect x="83.5352%" y="677" width="0.0515%" height="15" fill="rgb(244,185,38)" fg:x="16210" fg:w="10"/><text x="83.7852%" y="687.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (547 samples, 2.82%)</title><rect x="80.7988%" y="709" width="2.8189%" height="15" fill="rgb(236,202,9)" fg:x="15679" fg:w="547"/><text x="81.0488%" y="719.50">ge..</text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.03%)</title><rect x="83.5919%" y="693" width="0.0258%" height="15" fill="rgb(250,229,37)" fg:x="16221" fg:w="5"/><text x="83.8419%" y="703.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (35 samples, 0.18%)</title><rect x="83.6176%" y="709" width="0.1804%" height="15" fill="rgb(206,174,23)" fg:x="16226" fg:w="35"/><text x="83.8676%" y="719.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 0.09%)</title><rect x="83.7104%" y="693" width="0.0876%" height="15" fill="rgb(211,33,43)" fg:x="16244" fg:w="17"/><text x="83.9604%" y="703.50"></text></g><g><title>generate-forecast`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="83.7980%" y="709" width="0.0155%" height="15" fill="rgb(245,58,50)" fg:x="16261" fg:w="3"/><text x="84.0480%" y="719.50"></text></g><g><title>generate-forecast`alloc::string::String::push (40 samples, 0.21%)</title><rect x="83.8135%" y="709" width="0.2061%" height="15" fill="rgb(244,68,36)" fg:x="16264" fg:w="40"/><text x="84.0635%" y="719.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral::write_prefix (29 samples, 0.15%)</title><rect x="84.0196%" y="709" width="0.1494%" height="15" fill="rgb(232,229,15)" fg:x="16304" fg:w="29"/><text x="84.2696%" y="719.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (657 samples, 3.39%)</title><rect x="80.7988%" y="725" width="3.3857%" height="15" fill="rgb(254,30,23)" fg:x="15679" fg:w="657"/><text x="81.0488%" y="735.50">gen..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="84.1690%" y="709" width="0.0155%" height="15" fill="rgb(235,160,14)" fg:x="16333" fg:w="3"/><text x="84.4190%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="84.1845%" y="725" width="0.0103%" height="15" fill="rgb(212,155,44)" fg:x="16336" fg:w="2"/><text x="84.4345%" y="735.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (1,126 samples, 5.80%)</title><rect x="78.4231%" y="741" width="5.8026%" height="15" fill="rgb(226,2,50)" fg:x="15218" fg:w="1126"/><text x="78.6731%" y="751.50">generat..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="84.1999%" y="725" width="0.0258%" height="15" fill="rgb(234,177,6)" fg:x="16339" fg:w="5"/><text x="84.4499%" y="735.50"></text></g><g><title>generate-forecast`alloc::fmt::format (1,369 samples, 7.05%)</title><rect x="77.2069%" y="773" width="7.0549%" height="15" fill="rgb(217,24,9)" fg:x="14982" fg:w="1369"/><text x="77.4569%" y="783.50">generate-..</text></g><g><title>generate-forecast`core::fmt::write (1,281 samples, 6.60%)</title><rect x="77.6604%" y="757" width="6.6014%" height="15" fill="rgb(220,13,46)" fg:x="15070" fg:w="1281"/><text x="77.9104%" y="767.50">generate-..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.04%)</title><rect x="84.2257%" y="741" width="0.0361%" height="15" fill="rgb(239,221,27)" fg:x="16344" fg:w="7"/><text x="84.4757%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.03%)</title><rect x="84.2669%" y="773" width="0.0309%" height="15" fill="rgb(222,198,25)" fg:x="16352" fg:w="6"/><text x="84.5169%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (245 samples, 1.26%)</title><rect x="84.8235%" y="757" width="1.2626%" height="15" fill="rgb(211,99,13)" fg:x="16460" fg:w="245"/><text x="85.0735%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (227 samples, 1.17%)</title><rect x="84.9163%" y="741" width="1.1698%" height="15" fill="rgb(232,111,31)" fg:x="16478" fg:w="227"/><text x="85.1663%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free (356 samples, 1.83%)</title><rect x="84.2979%" y="773" width="1.8346%" height="15" fill="rgb(245,82,37)" fg:x="16358" fg:w="356"/><text x="84.5479%" y="783.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.05%)</title><rect x="86.0861%" y="757" width="0.0464%" height="15" fill="rgb(227,149,46)" fg:x="16705" fg:w="9"/><text x="86.3361%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="88.6163%" y="757" width="0.0206%" height="15" fill="rgb(218,36,50)" fg:x="17196" fg:w="4"/><text x="88.8663%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="88.6369%" y="757" width="0.0103%" height="15" fill="rgb(226,80,48)" fg:x="17200" fg:w="2"/><text x="88.8869%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (151 samples, 0.78%)</title><rect x="90.0386%" y="741" width="0.7781%" height="15" fill="rgb(238,224,15)" fg:x="17472" fg:w="151"/><text x="90.2886%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (967 samples, 4.98%)</title><rect x="86.1324%" y="773" width="4.9833%" height="15" fill="rgb(241,136,10)" fg:x="16714" fg:w="967"/><text x="86.3824%" y="783.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (479 samples, 2.47%)</title><rect x="88.6473%" y="757" width="2.4684%" height="15" fill="rgb(208,32,45)" fg:x="17202" fg:w="479"/><text x="88.8973%" y="767.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (58 samples, 0.30%)</title><rect x="90.8168%" y="741" width="0.2989%" height="15" fill="rgb(207,135,9)" fg:x="17623" fg:w="58"/><text x="91.0668%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.03%)</title><rect x="91.1157%" y="773" width="0.0258%" height="15" fill="rgb(206,86,44)" fg:x="17681" fg:w="5"/><text x="91.3657%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.03%)</title><rect x="91.1415%" y="773" width="0.0258%" height="15" fill="rgb(245,177,15)" fg:x="17686" fg:w="5"/><text x="91.3915%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.07%)</title><rect x="91.1672%" y="773" width="0.0721%" height="15" fill="rgb(206,64,50)" fg:x="17691" fg:w="14"/><text x="91.4172%" y="783.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,514 samples, 23.26%)</title><rect x="67.9876%" y="789" width="23.2620%" height="15" fill="rgb(234,36,40)" fg:x="13193" fg:w="4514"/><text x="68.2376%" y="799.50">generate-forecast`&lt;core::iter::adapte..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="91.2394%" y="773" width="0.0103%" height="15" fill="rgb(213,64,8)" fg:x="17705" fg:w="2"/><text x="91.4894%" y="783.50"></text></g><g><title>generate-forecast`__rdl_dealloc (17 samples, 0.09%)</title><rect x="91.2497%" y="789" width="0.0876%" height="15" fill="rgb(210,75,36)" fg:x="17707" fg:w="17"/><text x="91.4997%" y="799.50"></text></g><g><title>generate-forecast`__rust_dealloc (6 samples, 0.03%)</title><rect x="91.3373%" y="789" width="0.0309%" height="15" fill="rgb(229,88,21)" fg:x="17724" fg:w="6"/><text x="91.5873%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (21 samples, 0.11%)</title><rect x="91.3682%" y="789" width="0.1082%" height="15" fill="rgb(252,204,47)" fg:x="17730" fg:w="21"/><text x="91.6182%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.04%)</title><rect x="91.4764%" y="789" width="0.0412%" height="15" fill="rgb(208,77,27)" fg:x="17751" fg:w="8"/><text x="91.7264%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.07%)</title><rect x="91.5177%" y="789" width="0.0670%" height="15" fill="rgb(221,76,26)" fg:x="17759" fg:w="13"/><text x="91.7677%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (3 samples, 0.02%)</title><rect x="91.5949%" y="741" width="0.0155%" height="15" fill="rgb(225,139,18)" fg:x="17774" fg:w="3"/><text x="91.8449%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (3 samples, 0.02%)</title><rect x="91.5949%" y="725" width="0.0155%" height="15" fill="rgb(230,137,11)" fg:x="17774" fg:w="3"/><text x="91.8449%" y="735.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (3 samples, 0.02%)</title><rect x="91.5949%" y="709" width="0.0155%" height="15" fill="rgb(212,28,1)" fg:x="17774" fg:w="3"/><text x="91.8449%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.05%)</title><rect x="91.5846%" y="789" width="0.0515%" height="15" fill="rgb(248,164,17)" fg:x="17772" fg:w="10"/><text x="91.8346%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.05%)</title><rect x="91.5846%" y="773" width="0.0515%" height="15" fill="rgb(222,171,42)" fg:x="17772" fg:w="10"/><text x="91.8346%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.05%)</title><rect x="91.5846%" y="757" width="0.0515%" height="15" fill="rgb(243,84,45)" fg:x="17772" fg:w="10"/><text x="91.8346%" y="767.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="91.6104%" y="741" width="0.0258%" height="15" fill="rgb(252,49,23)" fg:x="17777" fg:w="5"/><text x="91.8604%" y="751.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (4,710 samples, 24.27%)</title><rect x="67.5032%" y="805" width="24.2721%" height="15" fill="rgb(215,19,7)" fg:x="13099" fg:w="4710"/><text x="67.7532%" y="815.50">generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; a..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (27 samples, 0.14%)</title><rect x="91.6362%" y="789" width="0.1391%" height="15" fill="rgb(238,81,41)" fg:x="17782" fg:w="27"/><text x="91.8862%" y="799.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.21%)</title><rect x="91.7753%" y="805" width="0.2061%" height="15" fill="rgb(210,199,37)" fg:x="17809" fg:w="40"/><text x="92.0253%" y="815.50"></text></g><g><title>generate-forecast`grib::sections::bitmap::BitmapSection::data_index (4,768 samples, 24.57%)</title><rect x="67.4208%" y="821" width="24.5710%" height="15" fill="rgb(244,192,49)" fg:x="13083" fg:w="4768"/><text x="67.6708%" y="831.50">generate-forecast`grib::sections::bitma..</text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="91.9814%" y="805" width="0.0103%" height="15" fill="rgb(226,211,11)" fg:x="17849" fg:w="2"/><text x="92.2314%" y="815.50"></text></g><g><title>generate-forecast`grib::message::Message::data_at_location (17,804 samples, 91.75%)</title><rect x="0.2474%" y="837" width="91.7495%" height="15" fill="rgb(236,162,54)" fg:x="48" fg:w="17804"/><text x="0.4974%" y="847.50">generate-forecast`grib::message::Message::data_at_location</text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="91.9969%" y="789" width="0.0103%" height="15" fill="rgb(220,229,9)" fg:x="17852" fg:w="2"/><text x="92.2469%" y="799.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="91.9969%" y="773" width="0.0103%" height="15" fill="rgb(250,87,22)" fg:x="17852" fg:w="2"/><text x="92.2469%" y="783.50"></text></g><g><title>generate-forecast`&lt;grib::templates::grid::LatitudeLongitudeGridTemplate as grib::templates::grid::GridDefinitionTemplate&gt;::end (4 samples, 0.02%)</title><rect x="91.9969%" y="821" width="0.0206%" height="15" fill="rgb(239,43,17)" fg:x="17852" fg:w="4"/><text x="92.2469%" y="831.50"></text></g><g><title>generate-forecast`grib::utils::utils::read_signed_from_bytes (4 samples, 0.02%)</title><rect x="91.9969%" y="805" width="0.0206%" height="15" fill="rgb(231,177,25)" fg:x="17852" fg:w="4"/><text x="92.2469%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="92.0072%" y="789" width="0.0103%" height="15" fill="rgb(219,179,1)" fg:x="17854" fg:w="2"/><text x="92.2572%" y="799.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="92.0278%" y="757" width="0.0103%" height="15" fill="rgb(238,219,53)" fg:x="17858" fg:w="2"/><text x="92.2778%" y="767.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.04%)</title><rect x="92.0175%" y="773" width="0.0412%" height="15" fill="rgb(232,167,36)" fg:x="17856" fg:w="8"/><text x="92.2675%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="92.0484%" y="757" width="0.0103%" height="15" fill="rgb(244,19,51)" fg:x="17862" fg:w="2"/><text x="92.2984%" y="767.50"></text></g><g><title>generate-forecast`&lt;grib::templates::grid::LatitudeLongitudeGridTemplate as grib::templates::grid::GridDefinitionTemplate&gt;::longitude_resolution (10 samples, 0.05%)</title><rect x="92.0175%" y="821" width="0.0515%" height="15" fill="rgb(224,6,22)" fg:x="17856" fg:w="10"/><text x="92.2675%" y="831.50"></text></g><g><title>generate-forecast`grib::utils::utils::read_signed_from_bytes (10 samples, 0.05%)</title><rect x="92.0175%" y="805" width="0.0515%" height="15" fill="rgb(224,145,5)" fg:x="17856" fg:w="10"/><text x="92.2675%" y="815.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (10 samples, 0.05%)</title><rect x="92.0175%" y="789" width="0.0515%" height="15" fill="rgb(234,130,49)" fg:x="17856" fg:w="10"/><text x="92.2675%" y="799.50"></text></g><g><title>generate-forecast`alloc::fmt::format (2 samples, 0.01%)</title><rect x="92.0845%" y="757" width="0.0103%" height="15" fill="rgb(254,6,2)" fg:x="17869" fg:w="2"/><text x="92.3345%" y="767.50"></text></g><g><title>generate-forecast`core::fmt::write (2 samples, 0.01%)</title><rect x="92.0845%" y="741" width="0.0103%" height="15" fill="rgb(208,96,46)" fg:x="17869" fg:w="2"/><text x="92.3345%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (2 samples, 0.01%)</title><rect x="92.0845%" y="725" width="0.0103%" height="15" fill="rgb(239,3,39)" fg:x="17869" fg:w="2"/><text x="92.3345%" y="735.50"></text></g><g><title>generate-forecast`&lt;grib::templates::grid::LatitudeLongitudeGridTemplate as grib::templates::grid::GridDefinitionTemplate&gt;::start (7 samples, 0.04%)</title><rect x="92.0691%" y="821" width="0.0361%" height="15" fill="rgb(233,210,1)" fg:x="17866" fg:w="7"/><text x="92.3191%" y="831.50"></text></g><g><title>generate-forecast`grib::utils::utils::read_signed_from_bytes (7 samples, 0.04%)</title><rect x="92.0691%" y="805" width="0.0361%" height="15" fill="rgb(244,137,37)" fg:x="17866" fg:w="7"/><text x="92.3191%" y="815.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (7 samples, 0.04%)</title><rect x="92.0691%" y="789" width="0.0361%" height="15" fill="rgb(240,136,2)" fg:x="17866" fg:w="7"/><text x="92.3191%" y="799.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="92.0794%" y="773" width="0.0258%" height="15" fill="rgb(239,18,37)" fg:x="17868" fg:w="5"/><text x="92.3294%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="92.0948%" y="757" width="0.0103%" height="15" fill="rgb(218,185,22)" fg:x="17871" fg:w="2"/><text x="92.3448%" y="767.50"></text></g><g><title>generate-forecast`grib::message::Message::metadata (23 samples, 0.12%)</title><rect x="91.9969%" y="837" width="0.1185%" height="15" fill="rgb(225,218,4)" fg:x="17852" fg:w="23"/><text x="92.2469%" y="847.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (17,828 samples, 91.87%)</title><rect x="0.2474%" y="853" width="91.8732%" height="15" fill="rgb(230,182,32)" fg:x="48" fg:w="17828"/><text x="0.4974%" y="863.50">generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text></g><g><title>generate-forecast`bytes::bytes::promotable_even_drop (3 samples, 0.02%)</title><rect x="92.1206%" y="853" width="0.0155%" height="15" fill="rgb(242,56,43)" fg:x="17876" fg:w="3"/><text x="92.3706%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.01%)</title><rect x="92.1257%" y="837" width="0.0103%" height="15" fill="rgb(233,99,24)" fg:x="17877" fg:w="2"/><text x="92.3757%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.01%)</title><rect x="92.1257%" y="821" width="0.0103%" height="15" fill="rgb(234,209,42)" fg:x="17877" fg:w="2"/><text x="92.3757%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.01%)</title><rect x="92.1257%" y="805" width="0.0103%" height="15" fill="rgb(227,7,12)" fg:x="17877" fg:w="2"/><text x="92.3757%" y="815.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (17,832 samples, 91.89%)</title><rect x="0.2474%" y="885" width="91.8938%" height="15" fill="rgb(245,203,43)" fg:x="48" fg:w="17832"/><text x="0.4974%" y="895.50">generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text></g><g><title>generate-forecast`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (17,832 samples, 91.89%)</title><rect x="0.2474%" y="869" width="91.8938%" height="15" fill="rgb(238,205,33)" fg:x="48" fg:w="17832"/><text x="0.4974%" y="879.50">generate-forecast`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>generate-forecast`&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="92.1412%" y="885" width="0.0103%" height="15" fill="rgb(231,56,7)" fg:x="17880" fg:w="2"/><text x="92.3912%" y="895.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;u8&gt; as bytes::buf::buf_mut::BufMut&gt;::put (72 samples, 0.37%)</title><rect x="92.2082%" y="805" width="0.3710%" height="15" fill="rgb(244,186,29)" fg:x="17893" fg:w="72"/><text x="92.4582%" y="815.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (72 samples, 0.37%)</title><rect x="92.2082%" y="789" width="0.3710%" height="15" fill="rgb(234,111,31)" fg:x="17893" fg:w="72"/><text x="92.4582%" y="799.50"></text></g><g><title>generate-forecast`&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (2 samples, 0.01%)</title><rect x="92.5844%" y="709" width="0.0103%" height="15" fill="rgb(241,149,10)" fg:x="17966" fg:w="2"/><text x="92.8344%" y="719.50"></text></g><g><title>generate-forecast`&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (2 samples, 0.01%)</title><rect x="92.5844%" y="693" width="0.0103%" height="15" fill="rgb(249,206,44)" fg:x="17966" fg:w="2"/><text x="92.8344%" y="703.50"></text></g><g><title>generate-forecast`mio::net::tcp::TcpStream::connect_stream (8 samples, 0.04%)</title><rect x="92.6153%" y="501" width="0.0412%" height="15" fill="rgb(251,153,30)" fg:x="17972" fg:w="8"/><text x="92.8653%" y="511.50"></text></g><g><title>generate-forecast`mio::sys::unix::tcp::TcpStream::connect (8 samples, 0.04%)</title><rect x="92.6153%" y="485" width="0.0412%" height="15" fill="rgb(239,152,38)" fg:x="17972" fg:w="8"/><text x="92.8653%" y="495.50"></text></g><g><title>generate-forecast`net2::ext::do_connect (8 samples, 0.04%)</title><rect x="92.6153%" y="469" width="0.0412%" height="15" fill="rgb(249,139,47)" fg:x="17972" fg:w="8"/><text x="92.8653%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__connect (8 samples, 0.04%)</title><rect x="92.6153%" y="453" width="0.0412%" height="15" fill="rgb(244,64,35)" fg:x="17972" fg:w="8"/><text x="92.8653%" y="463.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="92.6153%" y="517" width="0.0464%" height="15" fill="rgb(216,46,15)" fg:x="17972" fg:w="9"/><text x="92.8653%" y="527.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.06%)</title><rect x="92.6153%" y="533" width="0.0618%" height="15" fill="rgb(250,74,19)" fg:x="17972" fg:w="12"/><text x="92.8653%" y="543.50"></text></g><g><title>generate-forecast`hyper::client::connect::http::connect (3 samples, 0.02%)</title><rect x="92.6617%" y="517" width="0.0155%" height="15" fill="rgb(249,42,33)" fg:x="17981" fg:w="3"/><text x="92.9117%" y="527.50"></text></g><g><title>generate-forecast`socket2::socket::Socket::new (2 samples, 0.01%)</title><rect x="92.6668%" y="501" width="0.0103%" height="15" fill="rgb(242,149,17)" fg:x="17982" fg:w="2"/><text x="92.9168%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`socket (2 samples, 0.01%)</title><rect x="92.6668%" y="485" width="0.0103%" height="15" fill="rgb(244,29,21)" fg:x="17982" fg:w="2"/><text x="92.9168%" y="495.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.07%)</title><rect x="92.6153%" y="549" width="0.0670%" height="15" fill="rgb(220,130,37)" fg:x="17972" fg:w="13"/><text x="92.8653%" y="559.50"></text></g><g><title>generate-forecast`security_framework::policy::SecPolicy::create_ssl (2 samples, 0.01%)</title><rect x="92.6823%" y="517" width="0.0103%" height="15" fill="rgb(211,67,2)" fg:x="17985" fg:w="2"/><text x="92.9323%" y="527.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="92.6978%" y="389" width="0.0103%" height="15" fill="rgb(235,68,52)" fg:x="17988" fg:w="2"/><text x="92.9478%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (2 samples, 0.01%)</title><rect x="92.6978%" y="373" width="0.0103%" height="15" fill="rgb(246,142,3)" fg:x="17988" fg:w="2"/><text x="92.9478%" y="383.50"></text></g><g><title>Security`SSLRecordReadInternal (3 samples, 0.02%)</title><rect x="92.6978%" y="469" width="0.0155%" height="15" fill="rgb(241,25,7)" fg:x="17988" fg:w="3"/><text x="92.9478%" y="479.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::read_func (3 samples, 0.02%)</title><rect x="92.6978%" y="453" width="0.0155%" height="15" fill="rgb(242,119,39)" fg:x="17988" fg:w="3"/><text x="92.9478%" y="463.50"></text></g><g><title>generate-forecast`std::panicking::try (3 samples, 0.02%)</title><rect x="92.6978%" y="437" width="0.0155%" height="15" fill="rgb(241,98,45)" fg:x="17988" fg:w="3"/><text x="92.9478%" y="447.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.02%)</title><rect x="92.6978%" y="421" width="0.0155%" height="15" fill="rgb(254,28,30)" fg:x="17988" fg:w="3"/><text x="92.9478%" y="431.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_read_priv (3 samples, 0.02%)</title><rect x="92.6978%" y="405" width="0.0155%" height="15" fill="rgb(241,142,54)" fg:x="17988" fg:w="3"/><text x="92.9478%" y="415.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (2 samples, 0.01%)</title><rect x="92.7132%" y="469" width="0.0103%" height="15" fill="rgb(222,85,15)" fg:x="17991" fg:w="2"/><text x="92.9632%" y="479.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::write_func (2 samples, 0.01%)</title><rect x="92.7132%" y="453" width="0.0103%" height="15" fill="rgb(210,85,47)" fg:x="17991" fg:w="2"/><text x="92.9632%" y="463.50"></text></g><g><title>generate-forecast`std::panicking::try (2 samples, 0.01%)</title><rect x="92.7132%" y="437" width="0.0103%" height="15" fill="rgb(224,206,25)" fg:x="17991" fg:w="2"/><text x="92.9632%" y="447.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.01%)</title><rect x="92.7132%" y="421" width="0.0103%" height="15" fill="rgb(243,201,19)" fg:x="17991" fg:w="2"/><text x="92.9632%" y="431.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_write_priv (2 samples, 0.01%)</title><rect x="92.7132%" y="405" width="0.0103%" height="15" fill="rgb(236,59,4)" fg:x="17991" fg:w="2"/><text x="92.9632%" y="415.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.01%)</title><rect x="92.7132%" y="389" width="0.0103%" height="15" fill="rgb(254,179,45)" fg:x="17991" fg:w="2"/><text x="92.9632%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="92.7132%" y="373" width="0.0103%" height="15" fill="rgb(226,14,10)" fg:x="17991" fg:w="2"/><text x="92.9632%" y="383.50"></text></g><g><title>libcorecrypto.dylib`ccn_sqr_256_montgomery (3 samples, 0.02%)</title><rect x="92.7338%" y="341" width="0.0155%" height="15" fill="rgb(244,27,41)" fg:x="17995" fg:w="3"/><text x="92.9838%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccecdh_compute_shared_secret (8 samples, 0.04%)</title><rect x="92.7235%" y="405" width="0.0412%" height="15" fill="rgb(235,35,32)" fg:x="17993" fg:w="8"/><text x="92.9735%" y="415.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult (8 samples, 0.04%)</title><rect x="92.7235%" y="389" width="0.0412%" height="15" fill="rgb(218,68,31)" fg:x="17993" fg:w="8"/><text x="92.9735%" y="399.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_ws (8 samples, 0.04%)</title><rect x="92.7235%" y="373" width="0.0412%" height="15" fill="rgb(207,120,37)" fg:x="17993" fg:w="8"/><text x="92.9735%" y="383.50"></text></g><g><title>libcorecrypto.dylib`XYCZaddC_ws (8 samples, 0.04%)</title><rect x="92.7235%" y="357" width="0.0412%" height="15" fill="rgb(227,98,0)" fg:x="17993" fg:w="8"/><text x="92.9735%" y="367.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (2 samples, 0.01%)</title><rect x="92.7544%" y="341" width="0.0103%" height="15" fill="rgb(207,7,3)" fg:x="17999" fg:w="2"/><text x="93.0044%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccn_mux (2 samples, 0.01%)</title><rect x="92.7544%" y="325" width="0.0103%" height="15" fill="rgb(206,98,19)" fg:x="17999" fg:w="2"/><text x="93.0044%" y="335.50"></text></g><g><title>libcorecrypto.dylib`ccn_add (3 samples, 0.02%)</title><rect x="92.7751%" y="277" width="0.0155%" height="15" fill="rgb(217,5,26)" fg:x="18003" fg:w="3"/><text x="93.0251%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccn_mux (3 samples, 0.02%)</title><rect x="92.7905%" y="277" width="0.0155%" height="15" fill="rgb(235,190,38)" fg:x="18006" fg:w="3"/><text x="93.0405%" y="287.50"></text></g><g><title>libcorecrypto.dylib`XYCZaddC_ws (9 samples, 0.05%)</title><rect x="92.7648%" y="309" width="0.0464%" height="15" fill="rgb(247,86,24)" fg:x="18001" fg:w="9"/><text x="93.0148%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (7 samples, 0.04%)</title><rect x="92.7751%" y="293" width="0.0361%" height="15" fill="rgb(205,101,16)" fg:x="18003" fg:w="7"/><text x="93.0251%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul_256_montgomery (3 samples, 0.02%)</title><rect x="92.8111%" y="293" width="0.0155%" height="15" fill="rgb(246,168,33)" fg:x="18010" fg:w="3"/><text x="93.0611%" y="303.50"></text></g><g><title>libcorecrypto.dylib`XYCZadd_ws (6 samples, 0.03%)</title><rect x="92.8111%" y="309" width="0.0309%" height="15" fill="rgb(231,114,1)" fg:x="18010" fg:w="6"/><text x="93.0611%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (3 samples, 0.02%)</title><rect x="92.8266%" y="293" width="0.0155%" height="15" fill="rgb(207,184,53)" fg:x="18013" fg:w="3"/><text x="93.0766%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccn_mux (3 samples, 0.02%)</title><rect x="92.8266%" y="277" width="0.0155%" height="15" fill="rgb(224,95,51)" fg:x="18013" fg:w="3"/><text x="93.0766%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key_internal_fips (16 samples, 0.08%)</title><rect x="92.7648%" y="373" width="0.0825%" height="15" fill="rgb(212,188,45)" fg:x="18001" fg:w="16"/><text x="93.0148%" y="383.50"></text></g><g><title>libcorecrypto.dylib`ccec_make_pub_from_priv (16 samples, 0.08%)</title><rect x="92.7648%" y="357" width="0.0825%" height="15" fill="rgb(223,154,38)" fg:x="18001" fg:w="16"/><text x="93.0148%" y="367.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult (16 samples, 0.08%)</title><rect x="92.7648%" y="341" width="0.0825%" height="15" fill="rgb(251,22,52)" fg:x="18001" fg:w="16"/><text x="93.0148%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_ws (16 samples, 0.08%)</title><rect x="92.7648%" y="325" width="0.0825%" height="15" fill="rgb(229,209,22)" fg:x="18001" fg:w="16"/><text x="93.0148%" y="335.50"></text></g><g><title>libcorecrypto.dylib`ccn_mux (2 samples, 0.01%)</title><rect x="92.8678%" y="229" width="0.0103%" height="15" fill="rgb(234,138,34)" fg:x="18021" fg:w="2"/><text x="93.1178%" y="239.50"></text></g><g><title>libcorecrypto.dylib`XYCZaddC_ws (6 samples, 0.03%)</title><rect x="92.8524%" y="261" width="0.0309%" height="15" fill="rgb(212,95,11)" fg:x="18018" fg:w="6"/><text x="93.1024%" y="271.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (4 samples, 0.02%)</title><rect x="92.8627%" y="245" width="0.0206%" height="15" fill="rgb(240,179,47)" fg:x="18020" fg:w="4"/><text x="93.1127%" y="255.50"></text></g><g><title>libcorecrypto.dylib`XYCZadd_ws (3 samples, 0.02%)</title><rect x="92.8833%" y="261" width="0.0155%" height="15" fill="rgb(240,163,11)" fg:x="18024" fg:w="3"/><text x="93.1333%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key_internal_fips (12 samples, 0.06%)</title><rect x="92.8472%" y="325" width="0.0618%" height="15" fill="rgb(236,37,12)" fg:x="18017" fg:w="12"/><text x="93.0972%" y="335.50"></text></g><g><title>libcorecrypto.dylib`ccec_make_pub_from_priv (12 samples, 0.06%)</title><rect x="92.8472%" y="309" width="0.0618%" height="15" fill="rgb(232,164,16)" fg:x="18017" fg:w="12"/><text x="93.0972%" y="319.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult (11 samples, 0.06%)</title><rect x="92.8524%" y="293" width="0.0567%" height="15" fill="rgb(244,205,15)" fg:x="18018" fg:w="11"/><text x="93.1024%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_ws (11 samples, 0.06%)</title><rect x="92.8524%" y="277" width="0.0567%" height="15" fill="rgb(223,117,47)" fg:x="18018" fg:w="11"/><text x="93.1024%" y="287.50"></text></g><g><title>libcorecrypto.dylib`cczp_inv (2 samples, 0.01%)</title><rect x="92.9090%" y="325" width="0.0103%" height="15" fill="rgb(244,107,35)" fg:x="18029" fg:w="2"/><text x="93.1590%" y="335.50"></text></g><g><title>libcorecrypto.dylib`ccn_q256_inv (2 samples, 0.01%)</title><rect x="92.9090%" y="309" width="0.0103%" height="15" fill="rgb(205,140,8)" fg:x="18029" fg:w="2"/><text x="93.1590%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_sqr_ws (2 samples, 0.01%)</title><rect x="92.9090%" y="293" width="0.0103%" height="15" fill="rgb(228,84,46)" fg:x="18029" fg:w="2"/><text x="93.1590%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccec_sign (15 samples, 0.08%)</title><rect x="92.8472%" y="357" width="0.0773%" height="15" fill="rgb(254,188,9)" fg:x="18017" fg:w="15"/><text x="93.0972%" y="367.50"></text></g><g><title>libcorecrypto.dylib`ccec_sign_internal (15 samples, 0.08%)</title><rect x="92.8472%" y="341" width="0.0773%" height="15" fill="rgb(206,112,54)" fg:x="18017" fg:w="15"/><text x="93.0972%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul_256_montgomery (2 samples, 0.01%)</title><rect x="92.9245%" y="277" width="0.0103%" height="15" fill="rgb(216,84,49)" fg:x="18032" fg:w="2"/><text x="93.1745%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccec_add_ws (6 samples, 0.03%)</title><rect x="92.9245%" y="293" width="0.0309%" height="15" fill="rgb(214,194,35)" fg:x="18032" fg:w="6"/><text x="93.1745%" y="303.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (2 samples, 0.01%)</title><rect x="92.9451%" y="277" width="0.0103%" height="15" fill="rgb(249,28,3)" fg:x="18036" fg:w="2"/><text x="93.1951%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccn_add (2 samples, 0.01%)</title><rect x="92.9451%" y="261" width="0.0103%" height="15" fill="rgb(222,56,52)" fg:x="18036" fg:w="2"/><text x="93.1951%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul_256_montgomery (2 samples, 0.01%)</title><rect x="92.9554%" y="277" width="0.0103%" height="15" fill="rgb(245,217,50)" fg:x="18038" fg:w="2"/><text x="93.2054%" y="287.50"></text></g><g><title>libcorecrypto.dylib`cczp_add_ws (3 samples, 0.02%)</title><rect x="92.9709%" y="277" width="0.0155%" height="15" fill="rgb(213,201,24)" fg:x="18041" fg:w="3"/><text x="93.2209%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccn_mux (2 samples, 0.01%)</title><rect x="92.9760%" y="261" width="0.0103%" height="15" fill="rgb(248,116,28)" fg:x="18042" fg:w="2"/><text x="93.2260%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccec_double_ws (9 samples, 0.05%)</title><rect x="92.9554%" y="293" width="0.0464%" height="15" fill="rgb(219,72,43)" fg:x="18038" fg:w="9"/><text x="93.2054%" y="303.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (3 samples, 0.02%)</title><rect x="92.9863%" y="277" width="0.0155%" height="15" fill="rgb(209,138,14)" fg:x="18044" fg:w="3"/><text x="93.2363%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccn_add (2 samples, 0.01%)</title><rect x="92.9915%" y="261" width="0.0103%" height="15" fill="rgb(222,18,33)" fg:x="18045" fg:w="2"/><text x="93.2415%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccec_twin_mult (16 samples, 0.08%)</title><rect x="92.9245%" y="309" width="0.0825%" height="15" fill="rgb(213,199,7)" fg:x="18032" fg:w="16"/><text x="93.1745%" y="319.50"></text></g><g><title>libcoretls.dylib`tls_handshake_continue (56 samples, 0.29%)</title><rect x="92.7235%" y="469" width="0.2886%" height="15" fill="rgb(250,110,10)" fg:x="17993" fg:w="56"/><text x="92.9735%" y="479.50"></text></g><g><title>libcoretls.dylib`SSLAdvanceHandshake (56 samples, 0.29%)</title><rect x="92.7235%" y="453" width="0.2886%" height="15" fill="rgb(248,123,6)" fg:x="17993" fg:w="56"/><text x="92.9735%" y="463.50"></text></g><g><title>libcoretls.dylib`SSLPrepareAndQueueMessage (56 samples, 0.29%)</title><rect x="92.7235%" y="437" width="0.2886%" height="15" fill="rgb(206,91,31)" fg:x="17993" fg:w="56"/><text x="92.9735%" y="447.50"></text></g><g><title>libcoretls.dylib`SSLEncodeKeyExchange (56 samples, 0.29%)</title><rect x="92.7235%" y="421" width="0.2886%" height="15" fill="rgb(211,154,13)" fg:x="17993" fg:w="56"/><text x="92.9735%" y="431.50"></text></g><g><title>libcoretls.dylib`sslEcdhCreateKey (48 samples, 0.25%)</title><rect x="92.7648%" y="405" width="0.2474%" height="15" fill="rgb(225,148,7)" fg:x="18001" fg:w="48"/><text x="93.0148%" y="415.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key_fips (48 samples, 0.25%)</title><rect x="92.7648%" y="389" width="0.2474%" height="15" fill="rgb(220,160,43)" fg:x="18001" fg:w="48"/><text x="93.0148%" y="399.50"></text></g><g><title>libcorecrypto.dylib`ccec_pairwise_consistency_check (32 samples, 0.16%)</title><rect x="92.8472%" y="373" width="0.1649%" height="15" fill="rgb(213,52,39)" fg:x="18017" fg:w="32"/><text x="93.0972%" y="383.50"></text></g><g><title>libcorecrypto.dylib`ccec_verify (17 samples, 0.09%)</title><rect x="92.9245%" y="357" width="0.0876%" height="15" fill="rgb(243,137,7)" fg:x="18032" fg:w="17"/><text x="93.1745%" y="367.50"></text></g><g><title>libcorecrypto.dylib`ccec_verify_digest (17 samples, 0.09%)</title><rect x="92.9245%" y="341" width="0.0876%" height="15" fill="rgb(230,79,13)" fg:x="18032" fg:w="17"/><text x="93.1745%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccec_verify_internal (17 samples, 0.09%)</title><rect x="92.9245%" y="325" width="0.0876%" height="15" fill="rgb(247,105,23)" fg:x="18032" fg:w="17"/><text x="93.1745%" y="335.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.01%)</title><rect x="93.0224%" y="405" width="0.0103%" height="15" fill="rgb(223,179,41)" fg:x="18051" fg:w="2"/><text x="93.2724%" y="415.50"></text></g><g><title>Security`SecCDSAKeyCopyPublicBytes(__SecKey*, __CFData const**) (2 samples, 0.01%)</title><rect x="93.0327%" y="373" width="0.0103%" height="15" fill="rgb(218,9,34)" fg:x="18053" fg:w="2"/><text x="93.2827%" y="383.50"></text></g><g><title>Security`SecKeychainItemExport (2 samples, 0.01%)</title><rect x="93.0327%" y="357" width="0.0103%" height="15" fill="rgb(222,106,8)" fg:x="18053" fg:w="2"/><text x="93.2827%" y="367.50"></text></g><g><title>Security`SecCDSAKeyCopyAttributeDictionary(__SecKey*) (4 samples, 0.02%)</title><rect x="93.0327%" y="389" width="0.0206%" height="15" fill="rgb(211,220,0)" fg:x="18053" fg:w="4"/><text x="93.2827%" y="399.50"></text></g><g><title>Security`SecKeychainItemExport (2 samples, 0.01%)</title><rect x="93.0430%" y="373" width="0.0103%" height="15" fill="rgb(229,52,16)" fg:x="18055" fg:w="2"/><text x="93.2930%" y="383.50"></text></g><g><title>Security`SecExport::Key::exportRep (2 samples, 0.01%)</title><rect x="93.0430%" y="357" width="0.0103%" height="15" fill="rgb(212,155,18)" fg:x="18055" fg:w="2"/><text x="93.2930%" y="367.50"></text></g><g><title>Security`SecKeyCopyExponent (5 samples, 0.03%)</title><rect x="93.0327%" y="405" width="0.0258%" height="15" fill="rgb(242,21,14)" fg:x="18053" fg:w="5"/><text x="93.2827%" y="415.50"></text></g><g><title>CoreFoundation`__CFDataInit (2 samples, 0.01%)</title><rect x="93.0585%" y="373" width="0.0103%" height="15" fill="rgb(222,19,48)" fg:x="18058" fg:w="2"/><text x="93.3085%" y="383.50"></text></g><g><title>CoreFoundation`_CFRuntimeCreateInstance (2 samples, 0.01%)</title><rect x="93.0585%" y="357" width="0.0103%" height="15" fill="rgb(232,45,27)" fg:x="18058" fg:w="2"/><text x="93.3085%" y="367.50"></text></g><g><title>Security`SecKeyCopyModulus (4 samples, 0.02%)</title><rect x="93.0585%" y="405" width="0.0206%" height="15" fill="rgb(249,103,42)" fg:x="18058" fg:w="4"/><text x="93.3085%" y="415.50"></text></g><g><title>Security`SecCDSAKeyCopyAttributeDictionary(__SecKey*) (4 samples, 0.02%)</title><rect x="93.0585%" y="389" width="0.0206%" height="15" fill="rgb(246,81,33)" fg:x="18058" fg:w="4"/><text x="93.3085%" y="399.50"></text></g><g><title>Security`SecCDSAKeyCopyPublicBytes(__SecKey*, __CFData const**) (2 samples, 0.01%)</title><rect x="93.0688%" y="373" width="0.0103%" height="15" fill="rgb(252,33,42)" fg:x="18060" fg:w="2"/><text x="93.3188%" y="383.50"></text></g><g><title>Security`SecKeychainItemExport (2 samples, 0.01%)</title><rect x="93.0688%" y="357" width="0.0103%" height="15" fill="rgb(209,212,41)" fg:x="18060" fg:w="2"/><text x="93.3188%" y="367.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::certHandle (3 samples, 0.02%)</title><rect x="93.0791%" y="341" width="0.0155%" height="15" fill="rgb(207,154,6)" fg:x="18062" fg:w="3"/><text x="93.3291%" y="351.50"></text></g><g><title>Security`CSSM_CL_CertCache (3 samples, 0.02%)</title><rect x="93.0791%" y="325" width="0.0155%" height="15" fill="rgb(223,64,47)" fg:x="18062" fg:w="3"/><text x="93.3291%" y="335.50"></text></g><g><title>Security`cssm_CertCache(long, cssm_data const*, long*) (3 samples, 0.02%)</title><rect x="93.0791%" y="309" width="0.0155%" height="15" fill="rgb(211,161,38)" fg:x="18062" fg:w="3"/><text x="93.3291%" y="319.50"></text></g><g><title>Security`AppleX509CLSession::CertCache (3 samples, 0.02%)</title><rect x="93.0791%" y="293" width="0.0155%" height="15" fill="rgb(219,138,40)" fg:x="18062" fg:w="3"/><text x="93.3291%" y="303.50"></text></g><g><title>Security`DecodedCert::DecodedCert (3 samples, 0.02%)</title><rect x="93.0791%" y="277" width="0.0155%" height="15" fill="rgb(241,228,46)" fg:x="18062" fg:w="3"/><text x="93.3291%" y="287.50"></text></g><g><title>Security`SEC_ASN1Decode (2 samples, 0.01%)</title><rect x="93.0843%" y="261" width="0.0103%" height="15" fill="rgb(223,209,38)" fg:x="18063" fg:w="2"/><text x="93.3343%" y="271.50"></text></g><g><title>Security`SEC_ASN1DecoderUpdate (2 samples, 0.01%)</title><rect x="93.0843%" y="245" width="0.0103%" height="15" fill="rgb(236,164,45)" fg:x="18063" fg:w="2"/><text x="93.3343%" y="255.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (2 samples, 0.01%)</title><rect x="93.0946%" y="181" width="0.0103%" height="15" fill="rgb(231,15,5)" fg:x="18065" fg:w="2"/><text x="93.3446%" y="191.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (2 samples, 0.01%)</title><rect x="93.0946%" y="165" width="0.0103%" height="15" fill="rgb(252,35,15)" fg:x="18065" fg:w="2"/><text x="93.3446%" y="175.50"></text></g><g><title>Security`Security::Database::_dbOpen (2 samples, 0.01%)</title><rect x="93.0946%" y="149" width="0.0103%" height="15" fill="rgb(248,181,18)" fg:x="18065" fg:w="2"/><text x="93.3446%" y="159.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (2 samples, 0.01%)</title><rect x="93.0946%" y="133" width="0.0103%" height="15" fill="rgb(233,39,42)" fg:x="18065" fg:w="2"/><text x="93.3446%" y="143.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (2 samples, 0.01%)</title><rect x="93.0946%" y="117" width="0.0103%" height="15" fill="rgb(238,110,33)" fg:x="18065" fg:w="2"/><text x="93.3446%" y="127.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundleDir (4 samples, 0.02%)</title><rect x="93.1100%" y="165" width="0.0206%" height="15" fill="rgb(233,195,10)" fg:x="18068" fg:w="4"/><text x="93.3600%" y="175.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundle (4 samples, 0.02%)</title><rect x="93.1100%" y="149" width="0.0206%" height="15" fill="rgb(254,105,3)" fg:x="18068" fg:w="4"/><text x="93.3600%" y="159.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::directDbHand (3 samples, 0.02%)</title><rect x="93.1152%" y="133" width="0.0155%" height="15" fill="rgb(221,225,9)" fg:x="18069" fg:w="3"/><text x="93.3652%" y="143.50"></text></g><g><title>Security`Security::MDSSession::dbOpen (3 samples, 0.02%)</title><rect x="93.1152%" y="117" width="0.0155%" height="15" fill="rgb(224,227,45)" fg:x="18069" fg:w="3"/><text x="93.3652%" y="127.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (3 samples, 0.02%)</title><rect x="93.1152%" y="101" width="0.0155%" height="15" fill="rgb(229,198,43)" fg:x="18069" fg:w="3"/><text x="93.3652%" y="111.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (3 samples, 0.02%)</title><rect x="93.1152%" y="85" width="0.0155%" height="15" fill="rgb(206,209,35)" fg:x="18069" fg:w="3"/><text x="93.3652%" y="95.50"></text></g><g><title>Security`Security::Database::_dbOpen (3 samples, 0.02%)</title><rect x="93.1152%" y="69" width="0.0155%" height="15" fill="rgb(245,195,53)" fg:x="18069" fg:w="3"/><text x="93.3652%" y="79.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (3 samples, 0.02%)</title><rect x="93.1152%" y="53" width="0.0155%" height="15" fill="rgb(240,92,26)" fg:x="18069" fg:w="3"/><text x="93.3652%" y="63.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (3 samples, 0.02%)</title><rect x="93.1152%" y="37" width="0.0155%" height="15" fill="rgb(207,40,23)" fg:x="18069" fg:w="3"/><text x="93.3652%" y="47.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::fetch (8 samples, 0.04%)</title><rect x="93.0946%" y="277" width="0.0412%" height="15" fill="rgb(223,111,35)" fg:x="18065" fg:w="8"/><text x="93.3446%" y="287.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery (8 samples, 0.04%)</title><rect x="93.0946%" y="261" width="0.0412%" height="15" fill="rgb(229,147,28)" fg:x="18065" fg:w="8"/><text x="93.3446%" y="271.50"></text></g><g><title>Security`Security::MDSClient::Directory::dlGetFirst (8 samples, 0.04%)</title><rect x="93.0946%" y="245" width="0.0412%" height="15" fill="rgb(211,29,28)" fg:x="18065" fg:w="8"/><text x="93.3446%" y="255.50"></text></g><g><title>Security`Security::MDSClient::Directory::cdsa (8 samples, 0.04%)</title><rect x="93.0946%" y="229" width="0.0412%" height="15" fill="rgb(228,72,33)" fg:x="18065" fg:w="8"/><text x="93.3446%" y="239.50"></text></g><g><title>Security`mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (8 samples, 0.04%)</title><rect x="93.0946%" y="213" width="0.0412%" height="15" fill="rgb(205,214,31)" fg:x="18065" fg:w="8"/><text x="93.3446%" y="223.50"></text></g><g><title>Security`Security::MDSSession::DbOpen (8 samples, 0.04%)</title><rect x="93.0946%" y="197" width="0.0412%" height="15" fill="rgb(224,111,15)" fg:x="18065" fg:w="8"/><text x="93.3446%" y="207.50"></text></g><g><title>Security`Security::MDSSession::updateDataBases (6 samples, 0.03%)</title><rect x="93.1049%" y="181" width="0.0309%" height="15" fill="rgb(253,21,26)" fg:x="18067" fg:w="6"/><text x="93.3549%" y="191.50"></text></g><g><title>Security`SecTrustCopyPublicKey (12 samples, 0.06%)</title><rect x="93.0791%" y="405" width="0.0618%" height="15" fill="rgb(245,139,43)" fg:x="18062" fg:w="12"/><text x="93.3291%" y="415.50"></text></g><g><title>Security`SecCertificateCopyPublicKey (12 samples, 0.06%)</title><rect x="93.0791%" y="389" width="0.0618%" height="15" fill="rgb(252,170,7)" fg:x="18062" fg:w="12"/><text x="93.3291%" y="399.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::publicKey (12 samples, 0.06%)</title><rect x="93.0791%" y="373" width="0.0618%" height="15" fill="rgb(231,118,14)" fg:x="18062" fg:w="12"/><text x="93.3291%" y="383.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::copyFirstFieldValue (12 samples, 0.06%)</title><rect x="93.0791%" y="357" width="0.0618%" height="15" fill="rgb(238,83,0)" fg:x="18062" fg:w="12"/><text x="93.3291%" y="367.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::clHandle (9 samples, 0.05%)</title><rect x="93.0946%" y="341" width="0.0464%" height="15" fill="rgb(221,39,39)" fg:x="18065" fg:w="9"/><text x="93.3446%" y="351.50"></text></g><g><title>Security`Security::CssmClient::AttachmentImpl::activate (9 samples, 0.05%)</title><rect x="93.0946%" y="325" width="0.0464%" height="15" fill="rgb(222,119,46)" fg:x="18065" fg:w="9"/><text x="93.3446%" y="335.50"></text></g><g><title>Security`Security::CssmClient::ModuleImpl::activate (9 samples, 0.05%)</title><rect x="93.0946%" y="309" width="0.0464%" height="15" fill="rgb(222,165,49)" fg:x="18065" fg:w="9"/><text x="93.3446%" y="319.50"></text></g><g><title>Security`CSSM_ModuleLoad (9 samples, 0.05%)</title><rect x="93.0946%" y="293" width="0.0464%" height="15" fill="rgb(219,113,52)" fg:x="18065" fg:w="9"/><text x="93.3446%" y="303.50"></text></g><g><title>Security`tls_handshake_message_callback (27 samples, 0.14%)</title><rect x="93.0121%" y="437" width="0.1391%" height="15" fill="rgb(214,7,15)" fg:x="18049" fg:w="27"/><text x="93.2621%" y="447.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_set_peer_pubkey (26 samples, 0.13%)</title><rect x="93.0173%" y="421" width="0.1340%" height="15" fill="rgb(235,32,4)" fg:x="18050" fg:w="26"/><text x="93.2673%" y="431.50"></text></g><g><title>libcoretls.dylib`sslGetPubKeyFromBits (2 samples, 0.01%)</title><rect x="93.1409%" y="405" width="0.0103%" height="15" fill="rgb(238,90,54)" fg:x="18074" fg:w="2"/><text x="93.3909%" y="415.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_init_pub (2 samples, 0.01%)</title><rect x="93.1409%" y="389" width="0.0103%" height="15" fill="rgb(213,208,19)" fg:x="18074" fg:w="2"/><text x="93.3909%" y="399.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_init_pub_ws (2 samples, 0.01%)</title><rect x="93.1409%" y="373" width="0.0103%" height="15" fill="rgb(233,156,4)" fg:x="18074" fg:w="2"/><text x="93.3909%" y="383.50"></text></g><g><title>libcorecrypto.dylib`ccn_make_recip_ws (2 samples, 0.01%)</title><rect x="93.1409%" y="357" width="0.0103%" height="15" fill="rgb(207,194,5)" fg:x="18074" fg:w="2"/><text x="93.3909%" y="367.50"></text></g><g><title>Security`SecPolicyAddBasicX509Options (2 samples, 0.01%)</title><rect x="93.1564%" y="373" width="0.0103%" height="15" fill="rgb(206,111,30)" fg:x="18077" fg:w="2"/><text x="93.4064%" y="383.50"></text></g><g><title>Security`SecPolicyAddBasicCertOptions (2 samples, 0.01%)</title><rect x="93.1564%" y="357" width="0.0103%" height="15" fill="rgb(243,70,54)" fg:x="18077" fg:w="2"/><text x="93.4064%" y="367.50"></text></g><g><title>Security`SecPolicyCreateSSL (4 samples, 0.02%)</title><rect x="93.1564%" y="389" width="0.0206%" height="15" fill="rgb(242,28,8)" fg:x="18077" fg:w="4"/><text x="93.4064%" y="399.50"></text></g><g><title>Security`SecCEPAuthorityInfoAccess (2 samples, 0.01%)</title><rect x="93.1822%" y="341" width="0.0103%" height="15" fill="rgb(219,106,18)" fg:x="18082" fg:w="2"/><text x="93.4322%" y="351.50"></text></g><g><title>CoreFoundation`CFURLCreateWithBytes (2 samples, 0.01%)</title><rect x="93.1822%" y="325" width="0.0103%" height="15" fill="rgb(244,222,10)" fg:x="18082" fg:w="2"/><text x="93.4322%" y="335.50"></text></g><g><title>Security`tls_verify_peer_cert (10 samples, 0.05%)</title><rect x="93.1512%" y="437" width="0.0515%" height="15" fill="rgb(236,179,52)" fg:x="18076" fg:w="10"/><text x="93.4012%" y="447.50"></text></g><g><title>Security`sslCreateSecTrust (10 samples, 0.05%)</title><rect x="93.1512%" y="421" width="0.0515%" height="15" fill="rgb(213,23,39)" fg:x="18076" fg:w="10"/><text x="93.4012%" y="431.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_create_peer_trust (10 samples, 0.05%)</title><rect x="93.1512%" y="405" width="0.0515%" height="15" fill="rgb(238,48,10)" fg:x="18076" fg:w="10"/><text x="93.4012%" y="415.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_create_cfarray_from_certificates (4 samples, 0.02%)</title><rect x="93.1822%" y="389" width="0.0206%" height="15" fill="rgb(251,196,23)" fg:x="18082" fg:w="4"/><text x="93.4322%" y="399.50"></text></g><g><title>Security`SecCertificateCreateWithData (4 samples, 0.02%)</title><rect x="93.1822%" y="373" width="0.0206%" height="15" fill="rgb(250,152,24)" fg:x="18082" fg:w="4"/><text x="93.4322%" y="383.50"></text></g><g><title>Security`SecCertificateParse (4 samples, 0.02%)</title><rect x="93.1822%" y="357" width="0.0206%" height="15" fill="rgb(209,150,17)" fg:x="18082" fg:w="4"/><text x="93.4322%" y="367.50"></text></g><g><title>Security`SecCEPCrlDistributionPoints (2 samples, 0.01%)</title><rect x="93.1925%" y="341" width="0.0103%" height="15" fill="rgb(234,202,34)" fg:x="18084" fg:w="2"/><text x="93.4425%" y="351.50"></text></g><g><title>Security`parseGeneralNamesContent (2 samples, 0.01%)</title><rect x="93.1925%" y="325" width="0.0103%" height="15" fill="rgb(253,148,53)" fg:x="18084" fg:w="2"/><text x="93.4425%" y="335.50"></text></g><g><title>Security`appendCRLDPFromGeneralNames (2 samples, 0.01%)</title><rect x="93.1925%" y="309" width="0.0103%" height="15" fill="rgb(218,129,16)" fg:x="18084" fg:w="2"/><text x="93.4425%" y="319.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (2 samples, 0.01%)</title><rect x="93.2234%" y="325" width="0.0103%" height="15" fill="rgb(216,85,19)" fg:x="18090" fg:w="2"/><text x="93.4734%" y="335.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_dispose (2 samples, 0.01%)</title><rect x="93.2234%" y="309" width="0.0103%" height="15" fill="rgb(235,228,7)" fg:x="18090" fg:w="2"/><text x="93.4734%" y="319.50"></text></g><g><title>libsystem_asl.dylib`_asl_mt_shim_send_message (5 samples, 0.03%)</title><rect x="93.2182%" y="341" width="0.0258%" height="15" fill="rgb(245,175,0)" fg:x="18089" fg:w="5"/><text x="93.4682%" y="351.50"></text></g><g><title>libxpc.dylib`xpc_pipe_routine (2 samples, 0.01%)</title><rect x="93.2337%" y="325" width="0.0103%" height="15" fill="rgb(208,168,36)" fg:x="18092" fg:w="2"/><text x="93.4837%" y="335.50"></text></g><g><title>libxpc.dylib`_xpc_pipe_routine (2 samples, 0.01%)</title><rect x="93.2337%" y="309" width="0.0103%" height="15" fill="rgb(246,171,24)" fg:x="18092" fg:w="2"/><text x="93.4837%" y="319.50"></text></g><g><title>libxpc.dylib`_xpc_pipe_mach_msg (2 samples, 0.01%)</title><rect x="93.2337%" y="293" width="0.0103%" height="15" fill="rgb(215,142,24)" fg:x="18092" fg:w="2"/><text x="93.4837%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (2 samples, 0.01%)</title><rect x="93.2337%" y="277" width="0.0103%" height="15" fill="rgb(250,187,7)" fg:x="18092" fg:w="2"/><text x="93.4837%" y="287.50"></text></g><g><title>libcoretls.dylib`tls_metric_client_finished (11 samples, 0.06%)</title><rect x="93.2079%" y="421" width="0.0567%" height="15" fill="rgb(228,66,33)" fg:x="18087" fg:w="11"/><text x="93.4579%" y="431.50"></text></g><g><title>libcoretls.dylib`tls_metric_event_add_string (11 samples, 0.06%)</title><rect x="93.2079%" y="405" width="0.0567%" height="15" fill="rgb(234,215,21)" fg:x="18087" fg:w="11"/><text x="93.4579%" y="415.50"></text></g><g><title>libsystem_asl.dylib`asl_log (10 samples, 0.05%)</title><rect x="93.2131%" y="389" width="0.0515%" height="15" fill="rgb(222,191,20)" fg:x="18088" fg:w="10"/><text x="93.4631%" y="399.50"></text></g><g><title>libsystem_asl.dylib`_asl_lib_vlog (9 samples, 0.05%)</title><rect x="93.2182%" y="373" width="0.0464%" height="15" fill="rgb(245,79,54)" fg:x="18089" fg:w="9"/><text x="93.4682%" y="383.50"></text></g><g><title>libsystem_asl.dylib`_asl_send_message (9 samples, 0.05%)</title><rect x="93.2182%" y="357" width="0.0464%" height="15" fill="rgb(240,10,37)" fg:x="18089" fg:w="9"/><text x="93.4682%" y="367.50"></text></g><g><title>libsystem_asl.dylib`asl_msg_to_string_raw (2 samples, 0.01%)</title><rect x="93.2543%" y="341" width="0.0103%" height="15" fill="rgb(214,192,32)" fg:x="18096" fg:w="2"/><text x="93.5043%" y="351.50"></text></g><g><title>libsystem_asl.dylib`_asl_mt_shim_send_message (2 samples, 0.01%)</title><rect x="93.2646%" y="357" width="0.0103%" height="15" fill="rgb(209,36,54)" fg:x="18098" fg:w="2"/><text x="93.5146%" y="367.50"></text></g><g><title>libxpc.dylib`xpc_pipe_routine (2 samples, 0.01%)</title><rect x="93.2646%" y="341" width="0.0103%" height="15" fill="rgb(220,10,11)" fg:x="18098" fg:w="2"/><text x="93.5146%" y="351.50"></text></g><g><title>libxpc.dylib`_xpc_pipe_routine (2 samples, 0.01%)</title><rect x="93.2646%" y="325" width="0.0103%" height="15" fill="rgb(221,106,17)" fg:x="18098" fg:w="2"/><text x="93.5146%" y="335.50"></text></g><g><title>libcoretls.dylib`SSLAdvanceHandshake (15 samples, 0.08%)</title><rect x="93.2028%" y="437" width="0.0773%" height="15" fill="rgb(251,142,44)" fg:x="18086" fg:w="15"/><text x="93.4528%" y="447.50"></text></g><g><title>libcoretls.dylib`tls_metric_event_done (3 samples, 0.02%)</title><rect x="93.2646%" y="421" width="0.0155%" height="15" fill="rgb(238,13,15)" fg:x="18098" fg:w="3"/><text x="93.5146%" y="431.50"></text></g><g><title>libsystem_asl.dylib`asl_log (3 samples, 0.02%)</title><rect x="93.2646%" y="405" width="0.0155%" height="15" fill="rgb(208,107,27)" fg:x="18098" fg:w="3"/><text x="93.5146%" y="415.50"></text></g><g><title>libsystem_asl.dylib`_asl_lib_vlog (3 samples, 0.02%)</title><rect x="93.2646%" y="389" width="0.0155%" height="15" fill="rgb(205,136,37)" fg:x="18098" fg:w="3"/><text x="93.5146%" y="399.50"></text></g><g><title>libsystem_asl.dylib`_asl_send_message (3 samples, 0.02%)</title><rect x="93.2646%" y="373" width="0.0155%" height="15" fill="rgb(250,205,27)" fg:x="18098" fg:w="3"/><text x="93.5146%" y="383.50"></text></g><g><title>libcoretls.dylib`SSLProcessCertificate (2 samples, 0.01%)</title><rect x="93.2801%" y="421" width="0.0103%" height="15" fill="rgb(210,80,43)" fg:x="18101" fg:w="2"/><text x="93.5301%" y="431.50"></text></g><g><title>libcorecrypto.dylib`ccn_sqr_ws (3 samples, 0.02%)</title><rect x="93.3058%" y="293" width="0.0155%" height="15" fill="rgb(247,160,36)" fg:x="18106" fg:w="3"/><text x="93.5558%" y="303.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_init_ws (7 samples, 0.04%)</title><rect x="93.3007%" y="325" width="0.0361%" height="15" fill="rgb(234,13,49)" fg:x="18105" fg:w="7"/><text x="93.5507%" y="335.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_sqr_ws (6 samples, 0.03%)</title><rect x="93.3058%" y="309" width="0.0309%" height="15" fill="rgb(234,122,0)" fg:x="18106" fg:w="6"/><text x="93.5558%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_redc (3 samples, 0.02%)</title><rect x="93.3213%" y="293" width="0.0155%" height="15" fill="rgb(207,146,38)" fg:x="18109" fg:w="3"/><text x="93.5713%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccn_addmul1_asm (2 samples, 0.01%)</title><rect x="93.3265%" y="277" width="0.0103%" height="15" fill="rgb(207,177,25)" fg:x="18110" fg:w="2"/><text x="93.5765%" y="287.50"></text></g><g><title>libcoretls.dylib`SSLProcessHandshakeMessage (15 samples, 0.08%)</title><rect x="93.2801%" y="437" width="0.0773%" height="15" fill="rgb(211,178,42)" fg:x="18101" fg:w="15"/><text x="93.5301%" y="447.50"></text></g><g><title>libcoretls.dylib`SSLProcessServerKeyExchange (11 samples, 0.06%)</title><rect x="93.3007%" y="421" width="0.0567%" height="15" fill="rgb(230,69,54)" fg:x="18105" fg:w="11"/><text x="93.5507%" y="431.50"></text></g><g><title>libcoretls.dylib`sslRsaVerify (11 samples, 0.06%)</title><rect x="93.3007%" y="405" width="0.0567%" height="15" fill="rgb(214,135,41)" fg:x="18105" fg:w="11"/><text x="93.5507%" y="415.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_verify_pkcs1v15 (11 samples, 0.06%)</title><rect x="93.3007%" y="389" width="0.0567%" height="15" fill="rgb(237,67,25)" fg:x="18105" fg:w="11"/><text x="93.5507%" y="399.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_verify_pkcs1v15_internal (11 samples, 0.06%)</title><rect x="93.3007%" y="373" width="0.0567%" height="15" fill="rgb(222,189,50)" fg:x="18105" fg:w="11"/><text x="93.5507%" y="383.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_power_fast (11 samples, 0.06%)</title><rect x="93.3007%" y="357" width="0.0567%" height="15" fill="rgb(245,148,34)" fg:x="18105" fg:w="11"/><text x="93.5507%" y="367.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_power_func_ws (11 samples, 0.06%)</title><rect x="93.3007%" y="341" width="0.0567%" height="15" fill="rgb(222,29,6)" fg:x="18105" fg:w="11"/><text x="93.5507%" y="351.50"></text></g><g><title>libcorecrypto.dylib`cczp_power_fast_ws (4 samples, 0.02%)</title><rect x="93.3368%" y="325" width="0.0206%" height="15" fill="rgb(221,189,43)" fg:x="18112" fg:w="4"/><text x="93.5868%" y="335.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_sqr_ws (3 samples, 0.02%)</title><rect x="93.3419%" y="309" width="0.0155%" height="15" fill="rgb(207,36,27)" fg:x="18113" fg:w="3"/><text x="93.5919%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_redc (2 samples, 0.01%)</title><rect x="93.3471%" y="293" width="0.0103%" height="15" fill="rgb(217,90,24)" fg:x="18114" fg:w="2"/><text x="93.5971%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccn_addmul1_asm (2 samples, 0.01%)</title><rect x="93.3471%" y="277" width="0.0103%" height="15" fill="rgb(224,66,35)" fg:x="18114" fg:w="2"/><text x="93.5971%" y="287.50"></text></g><g><title>libcoretls.dylib`tls_handshake_process (73 samples, 0.38%)</title><rect x="93.0121%" y="469" width="0.3762%" height="15" fill="rgb(221,13,50)" fg:x="18049" fg:w="73"/><text x="93.2621%" y="479.50"></text></g><g><title>libcoretls.dylib`SSLProcessHandshakeRecordInner (73 samples, 0.38%)</title><rect x="93.0121%" y="453" width="0.3762%" height="15" fill="rgb(236,68,49)" fg:x="18049" fg:w="73"/><text x="93.2621%" y="463.50"></text></g><g><title>libcoretls.dylib`SSLUpdateHandshakeMacs (6 samples, 0.03%)</title><rect x="93.3574%" y="437" width="0.0309%" height="15" fill="rgb(229,146,28)" fg:x="18116" fg:w="6"/><text x="93.6074%" y="447.50"></text></g><g><title>libcoretls.dylib`HashSHA256Update (6 samples, 0.03%)</title><rect x="93.3574%" y="421" width="0.0309%" height="15" fill="rgb(225,31,38)" fg:x="18116" fg:w="6"/><text x="93.6074%" y="431.50"></text></g><g><title>libcorecrypto.dylib`ccdigest_update (6 samples, 0.03%)</title><rect x="93.3574%" y="405" width="0.0309%" height="15" fill="rgb(250,208,3)" fg:x="18116" fg:w="6"/><text x="93.6074%" y="415.50"></text></g><g><title>libcorecrypto.dylib`AccelerateCrypto_SHA256_compress_AVX2 (5 samples, 0.03%)</title><rect x="93.3625%" y="389" width="0.0258%" height="15" fill="rgb(246,54,23)" fg:x="18117" fg:w="5"/><text x="93.6125%" y="399.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::MidHandshakeSslStream&lt;S&gt;::handshake (136 samples, 0.70%)</title><rect x="92.6926%" y="517" width="0.7009%" height="15" fill="rgb(243,76,11)" fg:x="17987" fg:w="136"/><text x="92.9426%" y="527.50"></text></g><g><title>Security`SSLHandshake (136 samples, 0.70%)</title><rect x="92.6926%" y="501" width="0.7009%" height="15" fill="rgb(245,21,50)" fg:x="17987" fg:w="136"/><text x="92.9426%" y="511.50"></text></g><g><title>Security`SSLHandshakeProceed (136 samples, 0.70%)</title><rect x="92.6926%" y="485" width="0.7009%" height="15" fill="rgb(228,9,43)" fg:x="17987" fg:w="136"/><text x="92.9426%" y="495.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.01%)</title><rect x="93.3986%" y="309" width="0.0103%" height="15" fill="rgb(208,100,47)" fg:x="18124" fg:w="2"/><text x="93.6486%" y="319.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke (4 samples, 0.02%)</title><rect x="93.3935%" y="341" width="0.0206%" height="15" fill="rgb(232,26,8)" fg:x="18123" fg:w="4"/><text x="93.6435%" y="351.50"></text></g><g><title>Security`SecXPCDictionarySetPolicies (3 samples, 0.02%)</title><rect x="93.3986%" y="325" width="0.0155%" height="15" fill="rgb(216,166,38)" fg:x="18124" fg:w="3"/><text x="93.6486%" y="335.50"></text></g><g><title>Security`SecXPCDictionaryCopyChainOptional (2 samples, 0.01%)</title><rect x="93.4141%" y="325" width="0.0103%" height="15" fill="rgb(251,202,51)" fg:x="18127" fg:w="2"/><text x="93.6641%" y="335.50"></text></g><g><title>Security`SecCertificateCreateWithXPCArrayAtIndex (2 samples, 0.01%)</title><rect x="93.4141%" y="309" width="0.0103%" height="15" fill="rgb(254,216,34)" fg:x="18127" fg:w="2"/><text x="93.6641%" y="319.50"></text></g><g><title>Security`SecCertificateCreateWithBytes (2 samples, 0.01%)</title><rect x="93.4141%" y="293" width="0.0103%" height="15" fill="rgb(251,32,27)" fg:x="18127" fg:w="2"/><text x="93.6641%" y="303.50"></text></g><g><title>Security`SecCertificateParse (2 samples, 0.01%)</title><rect x="93.4141%" y="277" width="0.0103%" height="15" fill="rgb(208,127,28)" fg:x="18127" fg:w="2"/><text x="93.6641%" y="287.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke_2 (3 samples, 0.02%)</title><rect x="93.4141%" y="341" width="0.0155%" height="15" fill="rgb(224,137,22)" fg:x="18127" fg:w="3"/><text x="93.6641%" y="351.50"></text></g><g><title>Security`securityd_message_with_reply_sync (3 samples, 0.02%)</title><rect x="93.4295%" y="341" width="0.0155%" height="15" fill="rgb(254,70,32)" fg:x="18130" fg:w="3"/><text x="93.6795%" y="351.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (3 samples, 0.02%)</title><rect x="93.4295%" y="325" width="0.0155%" height="15" fill="rgb(229,75,37)" fg:x="18130" fg:w="3"/><text x="93.6795%" y="335.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_send_with_result_and_wait_for_reply (3 samples, 0.02%)</title><rect x="93.4295%" y="309" width="0.0155%" height="15" fill="rgb(252,64,23)" fg:x="18130" fg:w="3"/><text x="93.6795%" y="319.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_and_wait_for_reply (3 samples, 0.02%)</title><rect x="93.4295%" y="293" width="0.0155%" height="15" fill="rgb(232,162,48)" fg:x="18130" fg:w="3"/><text x="93.6795%" y="303.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_msg (3 samples, 0.02%)</title><rect x="93.4295%" y="277" width="0.0155%" height="15" fill="rgb(246,160,12)" fg:x="18130" fg:w="3"/><text x="93.6795%" y="287.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_drain (3 samples, 0.02%)</title><rect x="93.4295%" y="261" width="0.0155%" height="15" fill="rgb(247,166,0)" fg:x="18130" fg:w="3"/><text x="93.6795%" y="271.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_send (3 samples, 0.02%)</title><rect x="93.4295%" y="245" width="0.0155%" height="15" fill="rgb(249,219,21)" fg:x="18130" fg:w="3"/><text x="93.6795%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (2 samples, 0.01%)</title><rect x="93.4347%" y="229" width="0.0103%" height="15" fill="rgb(205,209,3)" fg:x="18131" fg:w="2"/><text x="93.6847%" y="239.50"></text></g><g><title>generate-forecast`security_framework::trust::SecTrust::evaluate (12 samples, 0.06%)</title><rect x="93.3935%" y="517" width="0.0618%" height="15" fill="rgb(243,44,1)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="527.50"></text></g><g><title>Security`SecTrustEvaluateInternal (12 samples, 0.06%)</title><rect x="93.3935%" y="501" width="0.0618%" height="15" fill="rgb(206,159,16)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="511.50"></text></g><g><title>Security`SecTrustEvaluateIfNecessary (12 samples, 0.06%)</title><rect x="93.3935%" y="485" width="0.0618%" height="15" fill="rgb(244,77,30)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="495.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (12 samples, 0.06%)</title><rect x="93.3935%" y="469" width="0.0618%" height="15" fill="rgb(218,69,12)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="479.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (12 samples, 0.06%)</title><rect x="93.3935%" y="453" width="0.0618%" height="15" fill="rgb(212,87,7)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="463.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke (12 samples, 0.06%)</title><rect x="93.3935%" y="437" width="0.0618%" height="15" fill="rgb(245,114,25)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="447.50"></text></g><g><title>libsystem_trace.dylib`_os_activity_initiate_impl (12 samples, 0.06%)</title><rect x="93.3935%" y="421" width="0.0618%" height="15" fill="rgb(210,61,42)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="431.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_2 (12 samples, 0.06%)</title><rect x="93.3935%" y="405" width="0.0618%" height="15" fill="rgb(211,52,33)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="415.50"></text></g><g><title>Security`SecOSStatusWith (12 samples, 0.06%)</title><rect x="93.3935%" y="389" width="0.0618%" height="15" fill="rgb(234,58,33)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="399.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_3 (12 samples, 0.06%)</title><rect x="93.3935%" y="373" width="0.0618%" height="15" fill="rgb(220,115,36)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="383.50"></text></g><g><title>Security`securityd_send_sync_and_do (12 samples, 0.06%)</title><rect x="93.3935%" y="357" width="0.0618%" height="15" fill="rgb(243,153,54)" fg:x="18123" fg:w="12"/><text x="93.6435%" y="367.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (2 samples, 0.01%)</title><rect x="93.4450%" y="341" width="0.0103%" height="15" fill="rgb(251,47,18)" fg:x="18133" fg:w="2"/><text x="93.6950%" y="351.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_dispose (2 samples, 0.01%)</title><rect x="93.4450%" y="325" width="0.0103%" height="15" fill="rgb(242,102,42)" fg:x="18133" fg:w="2"/><text x="93.6950%" y="335.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_node_free (2 samples, 0.01%)</title><rect x="93.4450%" y="309" width="0.0103%" height="15" fill="rgb(234,31,38)" fg:x="18133" fg:w="2"/><text x="93.6950%" y="319.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (2 samples, 0.01%)</title><rect x="93.4450%" y="293" width="0.0103%" height="15" fill="rgb(221,117,51)" fg:x="18133" fg:w="2"/><text x="93.6950%" y="303.50"></text></g><g><title>libxpc.dylib`_xpc_array_dispose (2 samples, 0.01%)</title><rect x="93.4450%" y="277" width="0.0103%" height="15" fill="rgb(212,20,18)" fg:x="18133" fg:w="2"/><text x="93.6950%" y="287.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (2 samples, 0.01%)</title><rect x="93.4450%" y="261" width="0.0103%" height="15" fill="rgb(245,133,36)" fg:x="18133" fg:w="2"/><text x="93.6950%" y="271.50"></text></g><g><title>libxpc.dylib`_xpc_array_dispose (2 samples, 0.01%)</title><rect x="93.4450%" y="245" width="0.0103%" height="15" fill="rgb(212,6,19)" fg:x="18133" fg:w="2"/><text x="93.6950%" y="255.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (2 samples, 0.01%)</title><rect x="93.4450%" y="229" width="0.0103%" height="15" fill="rgb(218,1,36)" fg:x="18133" fg:w="2"/><text x="93.6950%" y="239.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_dispose (2 samples, 0.01%)</title><rect x="93.4450%" y="213" width="0.0103%" height="15" fill="rgb(246,84,54)" fg:x="18133" fg:w="2"/><text x="93.6950%" y="223.50"></text></g><g><title>generate-forecast`native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (151 samples, 0.78%)</title><rect x="92.6823%" y="549" width="0.7781%" height="15" fill="rgb(242,110,6)" fg:x="17985" fg:w="151"/><text x="92.9323%" y="559.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (151 samples, 0.78%)</title><rect x="92.6823%" y="533" width="0.7781%" height="15" fill="rgb(214,47,5)" fg:x="17985" fg:w="151"/><text x="92.9323%" y="543.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (2 samples, 0.01%)</title><rect x="93.4656%" y="453" width="0.0103%" height="15" fill="rgb(218,159,25)" fg:x="18137" fg:w="2"/><text x="93.7156%" y="463.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::write_func (2 samples, 0.01%)</title><rect x="93.4656%" y="437" width="0.0103%" height="15" fill="rgb(215,211,28)" fg:x="18137" fg:w="2"/><text x="93.7156%" y="447.50"></text></g><g><title>generate-forecast`std::panicking::try (2 samples, 0.01%)</title><rect x="93.4656%" y="421" width="0.0103%" height="15" fill="rgb(238,59,32)" fg:x="18137" fg:w="2"/><text x="93.7156%" y="431.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.01%)</title><rect x="93.4656%" y="405" width="0.0103%" height="15" fill="rgb(226,82,3)" fg:x="18137" fg:w="2"/><text x="93.7156%" y="415.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_write_priv (2 samples, 0.01%)</title><rect x="93.4656%" y="389" width="0.0103%" height="15" fill="rgb(240,164,32)" fg:x="18137" fg:w="2"/><text x="93.7156%" y="399.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.01%)</title><rect x="93.4656%" y="373" width="0.0103%" height="15" fill="rgb(232,46,7)" fg:x="18137" fg:w="2"/><text x="93.7156%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="93.4656%" y="357" width="0.0103%" height="15" fill="rgb(229,129,53)" fg:x="18137" fg:w="2"/><text x="93.7156%" y="367.50"></text></g><g><title>Security`SSLHandshakeProceed (3 samples, 0.02%)</title><rect x="93.4656%" y="469" width="0.0155%" height="15" fill="rgb(234,188,29)" fg:x="18137" fg:w="3"/><text x="93.7156%" y="479.50"></text></g><g><title>Security`SSLHandshakeStart (2 samples, 0.01%)</title><rect x="93.4811%" y="469" width="0.0103%" height="15" fill="rgb(246,141,4)" fg:x="18140" fg:w="2"/><text x="93.7311%" y="479.50"></text></g><g><title>libcoretls.dylib`SSLAdvanceHandshake (2 samples, 0.01%)</title><rect x="93.4811%" y="453" width="0.0103%" height="15" fill="rgb(229,23,39)" fg:x="18140" fg:w="2"/><text x="93.7311%" y="463.50"></text></g><g><title>libcoretls.dylib`SSLPrepareAndQueueMessage (2 samples, 0.01%)</title><rect x="93.4811%" y="437" width="0.0103%" height="15" fill="rgb(206,12,3)" fg:x="18140" fg:w="2"/><text x="93.7311%" y="447.50"></text></g><g><title>libcoretls.dylib`SSLEncodeClientHello (2 samples, 0.01%)</title><rect x="93.4811%" y="421" width="0.0103%" height="15" fill="rgb(252,226,20)" fg:x="18140" fg:w="2"/><text x="93.7311%" y="431.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (6 samples, 0.03%)</title><rect x="93.4656%" y="517" width="0.0309%" height="15" fill="rgb(216,123,35)" fg:x="18137" fg:w="6"/><text x="93.7156%" y="527.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::MidHandshakeSslStream&lt;S&gt;::handshake (6 samples, 0.03%)</title><rect x="93.4656%" y="501" width="0.0309%" height="15" fill="rgb(212,68,40)" fg:x="18137" fg:w="6"/><text x="93.7156%" y="511.50"></text></g><g><title>Security`SSLHandshake (6 samples, 0.03%)</title><rect x="93.4656%" y="485" width="0.0309%" height="15" fill="rgb(254,125,32)" fg:x="18137" fg:w="6"/><text x="93.7156%" y="495.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (2 samples, 0.01%)</title><rect x="93.4965%" y="405" width="0.0103%" height="15" fill="rgb(253,97,22)" fg:x="18143" fg:w="2"/><text x="93.7465%" y="415.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (2 samples, 0.01%)</title><rect x="93.4965%" y="389" width="0.0103%" height="15" fill="rgb(241,101,14)" fg:x="18143" fg:w="2"/><text x="93.7465%" y="399.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (2 samples, 0.01%)</title><rect x="93.4965%" y="373" width="0.0103%" height="15" fill="rgb(238,103,29)" fg:x="18143" fg:w="2"/><text x="93.7465%" y="383.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (174 samples, 0.90%)</title><rect x="92.6153%" y="597" width="0.8967%" height="15" fill="rgb(233,195,47)" fg:x="17972" fg:w="174"/><text x="92.8653%" y="607.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (174 samples, 0.90%)</title><rect x="92.6153%" y="581" width="0.8967%" height="15" fill="rgb(246,218,30)" fg:x="17972" fg:w="174"/><text x="92.8653%" y="591.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (174 samples, 0.90%)</title><rect x="92.6153%" y="565" width="0.8967%" height="15" fill="rgb(219,145,47)" fg:x="17972" fg:w="174"/><text x="92.8653%" y="575.50"></text></g><g><title>generate-forecast`native_tls::imp::TlsConnector::connect (10 samples, 0.05%)</title><rect x="93.4604%" y="549" width="0.0515%" height="15" fill="rgb(243,12,26)" fg:x="18136" fg:w="10"/><text x="93.7104%" y="559.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::ClientBuilder::handshake (10 samples, 0.05%)</title><rect x="93.4604%" y="533" width="0.0515%" height="15" fill="rgb(214,87,16)" fg:x="18136" fg:w="10"/><text x="93.7104%" y="543.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::SslContext::new (3 samples, 0.02%)</title><rect x="93.4965%" y="517" width="0.0155%" height="15" fill="rgb(208,99,42)" fg:x="18143" fg:w="3"/><text x="93.7465%" y="527.50"></text></g><g><title>Security`SSLCreateContext (3 samples, 0.02%)</title><rect x="93.4965%" y="501" width="0.0155%" height="15" fill="rgb(253,99,2)" fg:x="18143" fg:w="3"/><text x="93.7465%" y="511.50"></text></g><g><title>Security`SSLCreateContextWithRecordFuncs (3 samples, 0.02%)</title><rect x="93.4965%" y="485" width="0.0155%" height="15" fill="rgb(220,168,23)" fg:x="18143" fg:w="3"/><text x="93.7465%" y="495.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (3 samples, 0.02%)</title><rect x="93.4965%" y="469" width="0.0155%" height="15" fill="rgb(242,38,24)" fg:x="18143" fg:w="3"/><text x="93.7465%" y="479.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (3 samples, 0.02%)</title><rect x="93.4965%" y="453" width="0.0155%" height="15" fill="rgb(225,182,9)" fg:x="18143" fg:w="3"/><text x="93.7465%" y="463.50"></text></g><g><title>Security`__SSLCreateContextWithRecordFuncs_block_invoke (3 samples, 0.02%)</title><rect x="93.4965%" y="437" width="0.0155%" height="15" fill="rgb(243,178,37)" fg:x="18143" fg:w="3"/><text x="93.7465%" y="447.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (3 samples, 0.02%)</title><rect x="93.4965%" y="421" width="0.0155%" height="15" fill="rgb(232,139,19)" fg:x="18143" fg:w="3"/><text x="93.7465%" y="431.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (176 samples, 0.91%)</title><rect x="92.6102%" y="629" width="0.9070%" height="15" fill="rgb(225,201,24)" fg:x="17971" fg:w="176"/><text x="92.8602%" y="639.50"></text></g><g><title>generate-forecast`&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (175 samples, 0.90%)</title><rect x="92.6153%" y="613" width="0.9018%" height="15" fill="rgb(221,47,46)" fg:x="17972" fg:w="175"/><text x="92.8653%" y="623.50"></text></g><g><title>generate-forecast`&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (2 samples, 0.01%)</title><rect x="93.5171%" y="597" width="0.0103%" height="15" fill="rgb(249,23,13)" fg:x="18147" fg:w="2"/><text x="93.7671%" y="607.50"></text></g><g><title>generate-forecast`tokio::task::spawn::spawn (2 samples, 0.01%)</title><rect x="93.5171%" y="581" width="0.0103%" height="15" fill="rgb(219,9,5)" fg:x="18147" fg:w="2"/><text x="93.7671%" y="591.50"></text></g><g><title>generate-forecast`tokio::runtime::spawner::Spawner::spawn (2 samples, 0.01%)</title><rect x="93.5171%" y="565" width="0.0103%" height="15" fill="rgb(254,171,16)" fg:x="18147" fg:w="2"/><text x="93.7671%" y="575.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Shared::schedule (2 samples, 0.01%)</title><rect x="93.5171%" y="549" width="0.0103%" height="15" fill="rgb(230,171,20)" fg:x="18147" fg:w="2"/><text x="93.7671%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.01%)</title><rect x="93.5171%" y="533" width="0.0103%" height="15" fill="rgb(210,71,41)" fg:x="18147" fg:w="2"/><text x="93.7671%" y="543.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (185 samples, 0.95%)</title><rect x="92.5792%" y="805" width="0.9534%" height="15" fill="rgb(206,173,20)" fg:x="17965" fg:w="185"/><text x="92.8292%" y="815.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (184 samples, 0.95%)</title><rect x="92.5844%" y="789" width="0.9482%" height="15" fill="rgb(233,88,34)" fg:x="17966" fg:w="184"/><text x="92.8344%" y="799.50"></text></g><g><title>generate-forecast`&lt;hyper::client::ResponseFuture as core::future::future::Future&gt;::poll (184 samples, 0.95%)</title><rect x="92.5844%" y="773" width="0.9482%" height="15" fill="rgb(223,209,46)" fg:x="17966" fg:w="184"/><text x="92.8344%" y="783.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (184 samples, 0.95%)</title><rect x="92.5844%" y="757" width="0.9482%" height="15" fill="rgb(250,43,18)" fg:x="17966" fg:w="184"/><text x="92.8344%" y="767.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (184 samples, 0.95%)</title><rect x="92.5844%" y="741" width="0.9482%" height="15" fill="rgb(208,13,10)" fg:x="17966" fg:w="184"/><text x="92.8344%" y="751.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (184 samples, 0.95%)</title><rect x="92.5844%" y="725" width="0.9482%" height="15" fill="rgb(212,200,36)" fg:x="17966" fg:w="184"/><text x="92.8344%" y="735.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (182 samples, 0.94%)</title><rect x="92.5947%" y="709" width="0.9379%" height="15" fill="rgb(225,90,30)" fg:x="17968" fg:w="182"/><text x="92.8447%" y="719.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (182 samples, 0.94%)</title><rect x="92.5947%" y="693" width="0.9379%" height="15" fill="rgb(236,182,39)" fg:x="17968" fg:w="182"/><text x="92.8447%" y="703.50"></text></g><g><title>generate-forecast`&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (180 samples, 0.93%)</title><rect x="92.6050%" y="677" width="0.9276%" height="15" fill="rgb(212,144,35)" fg:x="17970" fg:w="180"/><text x="92.8550%" y="687.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (180 samples, 0.93%)</title><rect x="92.6050%" y="661" width="0.9276%" height="15" fill="rgb(228,63,44)" fg:x="17970" fg:w="180"/><text x="92.8550%" y="671.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (180 samples, 0.93%)</title><rect x="92.6050%" y="645" width="0.9276%" height="15" fill="rgb(228,109,6)" fg:x="17970" fg:w="180"/><text x="92.8550%" y="655.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="93.5171%" y="629" width="0.0155%" height="15" fill="rgb(238,117,24)" fg:x="18147" fg:w="3"/><text x="93.7671%" y="639.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="93.5171%" y="613" width="0.0155%" height="15" fill="rgb(242,26,26)" fg:x="18147" fg:w="3"/><text x="93.7671%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="93.6408%" y="677" width="0.0103%" height="15" fill="rgb(221,92,48)" fg:x="18171" fg:w="2"/><text x="93.8908%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="93.6408%" y="661" width="0.0103%" height="15" fill="rgb(209,209,32)" fg:x="18171" fg:w="2"/><text x="93.8908%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="93.6408%" y="645" width="0.0103%" height="15" fill="rgb(221,70,22)" fg:x="18171" fg:w="2"/><text x="93.8908%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.03%)</title><rect x="93.6511%" y="677" width="0.0309%" height="15" fill="rgb(248,145,5)" fg:x="18173" fg:w="6"/><text x="93.9011%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="93.6717%" y="661" width="0.0103%" height="15" fill="rgb(226,116,26)" fg:x="18177" fg:w="2"/><text x="93.9217%" y="671.50"></text></g><g><title>generate-forecast`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (21 samples, 0.11%)</title><rect x="93.5790%" y="693" width="0.1082%" height="15" fill="rgb(244,5,17)" fg:x="18159" fg:w="21"/><text x="93.8290%" y="703.50"></text></g><g><title>generate-forecast`tokio::runtime::task::waker::wake_by_val (8 samples, 0.04%)</title><rect x="93.6872%" y="693" width="0.0412%" height="15" fill="rgb(252,159,33)" fg:x="18180" fg:w="8"/><text x="93.9372%" y="703.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (8 samples, 0.04%)</title><rect x="93.6872%" y="677" width="0.0412%" height="15" fill="rgb(206,71,0)" fg:x="18180" fg:w="8"/><text x="93.9372%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (6 samples, 0.03%)</title><rect x="93.6975%" y="661" width="0.0309%" height="15" fill="rgb(233,118,54)" fg:x="18182" fg:w="6"/><text x="93.9475%" y="671.50"></text></g><g><title>generate-forecast`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (35 samples, 0.18%)</title><rect x="93.5532%" y="709" width="0.1804%" height="15" fill="rgb(234,83,48)" fg:x="18154" fg:w="35"/><text x="93.8032%" y="719.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::decoder::Decoder as http_body::Body&gt;::poll_data (41 samples, 0.21%)</title><rect x="93.5326%" y="805" width="0.2113%" height="15" fill="rgb(228,3,54)" fg:x="18150" fg:w="41"/><text x="93.7826%" y="815.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (41 samples, 0.21%)</title><rect x="93.5326%" y="789" width="0.2113%" height="15" fill="rgb(226,155,13)" fg:x="18150" fg:w="41"/><text x="93.7826%" y="799.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (39 samples, 0.20%)</title><rect x="93.5429%" y="773" width="0.2010%" height="15" fill="rgb(241,28,37)" fg:x="18152" fg:w="39"/><text x="93.7929%" y="783.50"></text></g><g><title>generate-forecast`&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (38 samples, 0.20%)</title><rect x="93.5481%" y="757" width="0.1958%" height="15" fill="rgb(233,93,10)" fg:x="18153" fg:w="38"/><text x="93.7981%" y="767.50"></text></g><g><title>generate-forecast`hyper::body::body::Body::poll_inner (37 samples, 0.19%)</title><rect x="93.5532%" y="741" width="0.1907%" height="15" fill="rgb(225,113,19)" fg:x="18154" fg:w="37"/><text x="93.8032%" y="751.50"></text></g><g><title>generate-forecast`&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (37 samples, 0.19%)</title><rect x="93.5532%" y="725" width="0.1907%" height="15" fill="rgb(241,2,18)" fg:x="18154" fg:w="37"/><text x="93.8032%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="93.7542%" y="789" width="0.0103%" height="15" fill="rgb(228,207,21)" fg:x="18193" fg:w="2"/><text x="94.0042%" y="799.50"></text></g><g><title>generate-forecast`bytes::bytes_mut::shared_v_drop (4 samples, 0.02%)</title><rect x="93.7490%" y="805" width="0.0206%" height="15" fill="rgb(213,211,35)" fg:x="18192" fg:w="4"/><text x="93.9990%" y="815.50"></text></g><g><title>generate-forecast`core::ptr::drop_in_place (2 samples, 0.01%)</title><rect x="93.7696%" y="805" width="0.0103%" height="15" fill="rgb(209,83,10)" fg:x="18196" fg:w="2"/><text x="94.0196%" y="815.50"></text></g><g><title>generate-forecast`url::ParseOptions::parse (2 samples, 0.01%)</title><rect x="93.7851%" y="805" width="0.0103%" height="15" fill="rgb(209,164,1)" fg:x="18199" fg:w="2"/><text x="94.0351%" y="815.50"></text></g><g><title>generate-forecast`url::parser::Parser::parse_url (2 samples, 0.01%)</title><rect x="93.7851%" y="789" width="0.0103%" height="15" fill="rgb(213,184,43)" fg:x="18199" fg:w="2"/><text x="94.0351%" y="799.50"></text></g><g><title>generate-forecast`url::parser::Parser::after_double_slash (2 samples, 0.01%)</title><rect x="93.7851%" y="773" width="0.0103%" height="15" fill="rgb(231,61,34)" fg:x="18199" fg:w="2"/><text x="94.0351%" y="783.50"></text></g><g><title>generate-forecast`url::parser::Parser::parse_host (2 samples, 0.01%)</title><rect x="93.7851%" y="757" width="0.0103%" height="15" fill="rgb(235,75,3)" fg:x="18199" fg:w="2"/><text x="94.0351%" y="767.50"></text></g><g><title>generate-forecast`url::host::Host::parse (2 samples, 0.01%)</title><rect x="93.7851%" y="741" width="0.0103%" height="15" fill="rgb(220,106,47)" fg:x="18199" fg:w="2"/><text x="94.0351%" y="751.50"></text></g><g><title>generate-forecast`idna::domain_to_ascii (2 samples, 0.01%)</title><rect x="93.7851%" y="725" width="0.0103%" height="15" fill="rgb(210,196,33)" fg:x="18199" fg:w="2"/><text x="94.0351%" y="735.50"></text></g><g><title>generate-forecast`idna::uts46::Config::to_ascii (2 samples, 0.01%)</title><rect x="93.7851%" y="709" width="0.0103%" height="15" fill="rgb(229,154,42)" fg:x="18199" fg:w="2"/><text x="94.0351%" y="719.50"></text></g><g><title>generate-forecast`idna::uts46::processing (2 samples, 0.01%)</title><rect x="93.7851%" y="693" width="0.0103%" height="15" fill="rgb(228,114,26)" fg:x="18199" fg:w="2"/><text x="94.0351%" y="703.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (313 samples, 1.61%)</title><rect x="92.1979%" y="821" width="1.6130%" height="15" fill="rgb(208,144,1)" fg:x="17891" fg:w="313"/><text x="92.4479%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="93.8006%" y="805" width="0.0103%" height="15" fill="rgb(239,112,37)" fg:x="18202" fg:w="2"/><text x="94.0506%" y="815.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,162 samples, 93.59%)</title><rect x="0.2267%" y="901" width="93.5944%" height="15" fill="rgb(210,96,50)" fg:x="44" fg:w="18162"/><text x="0.4767%" y="911.50">generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>generate-forecast`&lt;futures_util::stream::stream::collect::Collect&lt;St,C&gt; as core::future::future::Future&gt;::poll (324 samples, 1.67%)</title><rect x="92.1515%" y="885" width="1.6697%" height="15" fill="rgb(222,178,2)" fg:x="17882" fg:w="324"/><text x="92.4015%" y="895.50"></text></g><g><title>generate-forecast`&lt;futures_util::stream::stream::buffered::Buffered&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (324 samples, 1.67%)</title><rect x="92.1515%" y="869" width="1.6697%" height="15" fill="rgb(226,74,18)" fg:x="17882" fg:w="324"/><text x="92.4015%" y="879.50"></text></g><g><title>generate-forecast`futures_util::stream::stream::StreamExt::poll_next_unpin (323 samples, 1.66%)</title><rect x="92.1567%" y="853" width="1.6645%" height="15" fill="rgb(225,67,54)" fg:x="17883" fg:w="323"/><text x="92.4067%" y="863.50"></text></g><g><title>generate-forecast`futures_util::stream::stream::StreamExt::poll_next_unpin (320 samples, 1.65%)</title><rect x="92.1721%" y="837" width="1.6491%" height="15" fill="rgb(251,92,32)" fg:x="17886" fg:w="320"/><text x="92.4221%" y="847.50"></text></g><g><title>generate-forecast`std::thread::local::LocalKey&lt;T&gt;::with (18,164 samples, 93.60%)</title><rect x="0.2267%" y="917" width="93.6047%" height="15" fill="rgb(228,149,22)" fg:x="44" fg:w="18164"/><text x="0.4767%" y="927.50">generate-forecast`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.01%)</title><rect x="93.8212%" y="901" width="0.0103%" height="15" fill="rgb(243,54,13)" fg:x="18206" fg:w="2"/><text x="94.0712%" y="911.50"></text></g><g><title>generate-forecast`tokio::runtime::Runtime::block_on (18,209 samples, 93.84%)</title><rect x="0.0000%" y="981" width="93.8366%" height="15" fill="rgb(243,180,28)" fg:x="0" fg:w="18209"/><text x="0.2500%" y="991.50">generate-forecast`tokio::runtime::Runtime::block_on</text></g><g><title>generate-forecast`tokio::runtime::context::enter (18,209 samples, 93.84%)</title><rect x="0.0000%" y="965" width="93.8366%" height="15" fill="rgb(208,167,24)" fg:x="0" fg:w="18209"/><text x="0.2500%" y="975.50">generate-forecast`tokio::runtime::context::enter</text></g><g><title>generate-forecast`tokio::runtime::thread_pool::ThreadPool::block_on (18,209 samples, 93.84%)</title><rect x="0.0000%" y="949" width="93.8366%" height="15" fill="rgb(245,73,45)" fg:x="0" fg:w="18209"/><text x="0.2500%" y="959.50">generate-forecast`tokio::runtime::thread_pool::ThreadPool::block_on</text></g><g><title>generate-forecast`tokio::runtime::enter::Enter::block_on (18,209 samples, 93.84%)</title><rect x="0.0000%" y="933" width="93.8366%" height="15" fill="rgb(237,203,48)" fg:x="0" fg:w="18209"/><text x="0.2500%" y="943.50">generate-forecast`tokio::runtime::enter::Enter::block_on</text></g><g><title>generate-forecast`main (18,210 samples, 93.84%)</title><rect x="0.0000%" y="1061" width="93.8418%" height="15" fill="rgb(211,197,16)" fg:x="0" fg:w="18210"/><text x="0.2500%" y="1071.50">generate-forecast`main</text></g><g><title>generate-forecast`std::rt::lang_start_internal (18,210 samples, 93.84%)</title><rect x="0.0000%" y="1045" width="93.8418%" height="15" fill="rgb(243,99,51)" fg:x="0" fg:w="18210"/><text x="0.2500%" y="1055.50">generate-forecast`std::rt::lang_start_internal</text></g><g><title>generate-forecast`std::rt::lang_start::_{{closure}} (18,210 samples, 93.84%)</title><rect x="0.0000%" y="1029" width="93.8418%" height="15" fill="rgb(215,123,29)" fg:x="0" fg:w="18210"/><text x="0.2500%" y="1039.50">generate-forecast`std::rt::lang_start::_{{closure}}</text></g><g><title>generate-forecast`std::sys_common::backtrace::__rust_begin_short_backtrace (18,210 samples, 93.84%)</title><rect x="0.0000%" y="1013" width="93.8418%" height="15" fill="rgb(239,186,37)" fg:x="0" fg:w="18210"/><text x="0.2500%" y="1023.50">generate-forecast`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>generate-forecast`generate_forecast::main (18,210 samples, 93.84%)</title><rect x="0.0000%" y="997" width="93.8418%" height="15" fill="rgb(252,136,39)" fg:x="0" fg:w="18210"/><text x="0.2500%" y="1007.50">generate-forecast`generate_forecast::main</text></g><g><title>generate-forecast`0x1 (18,214 samples, 93.86%)</title><rect x="0.0000%" y="1093" width="93.8624%" height="15" fill="rgb(223,213,32)" fg:x="0" fg:w="18214"/><text x="0.2500%" y="1103.50">generate-forecast`0x1</text></g><g><title>libdyld.dylib`start (18,214 samples, 93.86%)</title><rect x="0.0000%" y="1077" width="93.8624%" height="15" fill="rgb(233,115,5)" fg:x="0" fg:w="18214"/><text x="0.2500%" y="1087.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.02%)</title><rect x="93.8418%" y="1061" width="0.0206%" height="15" fill="rgb(207,226,44)" fg:x="18210" fg:w="4"/><text x="94.0918%" y="1071.50"></text></g><g><title>generate-forecast`std::sys::unix::condvar::Condvar::wait_timeout (3 samples, 0.02%)</title><rect x="93.8727%" y="981" width="0.0155%" height="15" fill="rgb(208,126,0)" fg:x="18216" fg:w="3"/><text x="94.1227%" y="991.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.02%)</title><rect x="93.8727%" y="965" width="0.0155%" height="15" fill="rgb(244,66,21)" fg:x="18216" fg:w="3"/><text x="94.1227%" y="975.50"></text></g><g><title>libnetwork.dylib`nw_path_create_evaluator_for_endpoint_no_evaluate (2 samples, 0.01%)</title><rect x="93.8933%" y="821" width="0.0103%" height="15" fill="rgb(222,97,12)" fg:x="18220" fg:w="2"/><text x="94.1433%" y="831.50"></text></g><g><title>libnetwork.dylib`nw_path_copy_dictionary_for_agent_with_generation (2 samples, 0.01%)</title><rect x="93.9036%" y="789" width="0.0103%" height="15" fill="rgb(219,213,19)" fg:x="18222" fg:w="2"/><text x="94.1536%" y="799.50"></text></g><g><title>libnetwork.dylib`nw_path_snapshot_path (3 samples, 0.02%)</title><rect x="93.9036%" y="805" width="0.0155%" height="15" fill="rgb(252,169,30)" fg:x="18222" fg:w="3"/><text x="94.1536%" y="815.50"></text></g><g><title>libnetwork.dylib`nw_path_evaluator_evaluate (4 samples, 0.02%)</title><rect x="93.9036%" y="821" width="0.0206%" height="15" fill="rgb(206,32,51)" fg:x="18222" fg:w="4"/><text x="94.1536%" y="831.50"></text></g><g><title>libnetwork.dylib`nw_path_create_evaluator_for_endpoint (11 samples, 0.06%)</title><rect x="93.8933%" y="837" width="0.0567%" height="15" fill="rgb(250,172,42)" fg:x="18220" fg:w="11"/><text x="94.1433%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`necp_client_action (5 samples, 0.03%)</title><rect x="93.9242%" y="821" width="0.0258%" height="15" fill="rgb(209,34,43)" fg:x="18226" fg:w="5"/><text x="94.1742%" y="831.50"></text></g><g><title>libnetwork.dylib`nw_nat64_v4_address_requires_synthesis (13 samples, 0.07%)</title><rect x="93.8882%" y="853" width="0.0670%" height="15" fill="rgb(223,11,35)" fg:x="18219" fg:w="13"/><text x="94.1382%" y="863.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceProcessResult (2 samples, 0.01%)</title><rect x="93.9603%" y="805" width="0.0103%" height="15" fill="rgb(251,219,26)" fg:x="18233" fg:w="2"/><text x="94.2103%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom_nocancel (2 samples, 0.01%)</title><rect x="93.9603%" y="789" width="0.0103%" height="15" fill="rgb(231,119,3)" fg:x="18233" fg:w="2"/><text x="94.2103%" y="799.50"></text></g><g><title>libsystem_info.dylib`_mdns_query_clear (2 samples, 0.01%)</title><rect x="93.9706%" y="805" width="0.0103%" height="15" fill="rgb(216,97,11)" fg:x="18235" fg:w="2"/><text x="94.2206%" y="815.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceRefDeallocate (2 samples, 0.01%)</title><rect x="93.9706%" y="789" width="0.0103%" height="15" fill="rgb(223,59,9)" fg:x="18235" fg:w="2"/><text x="94.2206%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom_nocancel (3 samples, 0.02%)</title><rect x="93.9809%" y="757" width="0.0155%" height="15" fill="rgb(233,93,31)" fg:x="18237" fg:w="3"/><text x="94.2309%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__sendto_nocancel (2 samples, 0.01%)</title><rect x="93.9964%" y="757" width="0.0103%" height="15" fill="rgb(239,81,33)" fg:x="18240" fg:w="2"/><text x="94.2464%" y="767.50"></text></g><g><title>libsystem_dnssd.dylib`deliver_request (6 samples, 0.03%)</title><rect x="93.9809%" y="773" width="0.0309%" height="15" fill="rgb(213,120,34)" fg:x="18237" fg:w="6"/><text x="94.2309%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (3 samples, 0.02%)</title><rect x="94.0119%" y="773" width="0.0155%" height="15" fill="rgb(243,49,53)" fg:x="18243" fg:w="3"/><text x="94.2619%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`__select_nocancel (4 samples, 0.02%)</title><rect x="94.0273%" y="773" width="0.0206%" height="15" fill="rgb(247,216,33)" fg:x="18246" fg:w="4"/><text x="94.2773%" y="783.50"></text></g><g><title>libsystem_info.dylib`_mdns_query_start (14 samples, 0.07%)</title><rect x="93.9809%" y="805" width="0.0721%" height="15" fill="rgb(226,26,14)" fg:x="18237" fg:w="14"/><text x="94.2309%" y="815.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceQueryRecord (14 samples, 0.07%)</title><rect x="93.9809%" y="789" width="0.0721%" height="15" fill="rgb(215,49,53)" fg:x="18237" fg:w="14"/><text x="94.2309%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`__select_nocancel (2 samples, 0.01%)</title><rect x="94.0582%" y="805" width="0.0103%" height="15" fill="rgb(245,162,40)" fg:x="18252" fg:w="2"/><text x="94.3082%" y="815.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (6 samples, 0.03%)</title><rect x="94.0685%" y="805" width="0.0309%" height="15" fill="rgb(229,68,17)" fg:x="18254" fg:w="6"/><text x="94.3185%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (6 samples, 0.03%)</title><rect x="94.0685%" y="789" width="0.0309%" height="15" fill="rgb(213,182,10)" fg:x="18254" fg:w="6"/><text x="94.3185%" y="799.50"></text></g><g><title>generate-forecast`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.22%)</title><rect x="93.8882%" y="933" width="0.2164%" height="15" fill="rgb(245,125,30)" fg:x="18219" fg:w="42"/><text x="94.1382%" y="943.50"></text></g><g><title>generate-forecast`&lt;(&amp;str,u16) as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (42 samples, 0.22%)</title><rect x="93.8882%" y="917" width="0.2164%" height="15" fill="rgb(232,202,2)" fg:x="18219" fg:w="42"/><text x="94.1382%" y="927.50"></text></g><g><title>generate-forecast`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (42 samples, 0.22%)</title><rect x="93.8882%" y="901" width="0.2164%" height="15" fill="rgb(237,140,51)" fg:x="18219" fg:w="42"/><text x="94.1382%" y="911.50"></text></g><g><title>libsystem_info.dylib`getaddrinfo (42 samples, 0.22%)</title><rect x="93.8882%" y="885" width="0.2164%" height="15" fill="rgb(236,157,25)" fg:x="18219" fg:w="42"/><text x="94.1382%" y="895.50"></text></g><g><title>libsystem_info.dylib`si_addrinfo (42 samples, 0.22%)</title><rect x="93.8882%" y="869" width="0.2164%" height="15" fill="rgb(219,209,0)" fg:x="18219" fg:w="42"/><text x="94.1382%" y="879.50"></text></g><g><title>libsystem_info.dylib`search_addrinfo (29 samples, 0.15%)</title><rect x="93.9552%" y="853" width="0.1494%" height="15" fill="rgb(240,116,54)" fg:x="18232" fg:w="29"/><text x="94.2052%" y="863.50"></text></g><g><title>libsystem_info.dylib`mdns_addrinfo (29 samples, 0.15%)</title><rect x="93.9552%" y="837" width="0.1494%" height="15" fill="rgb(216,10,36)" fg:x="18232" fg:w="29"/><text x="94.2052%" y="847.50"></text></g><g><title>libsystem_info.dylib`_mdns_search_ex (29 samples, 0.15%)</title><rect x="93.9552%" y="821" width="0.1494%" height="15" fill="rgb(222,72,44)" fg:x="18232" fg:w="29"/><text x="94.2052%" y="831.50"></text></g><g><title>generate-forecast`std::sync::condvar::Condvar::notify_one (2 samples, 0.01%)</title><rect x="94.1510%" y="885" width="0.0103%" height="15" fill="rgb(232,159,9)" fg:x="18270" fg:w="2"/><text x="94.4010%" y="895.50"></text></g><g><title>generate-forecast`tokio::runtime::queue::Inject&lt;T&gt;::is_closed (4 samples, 0.02%)</title><rect x="94.1613%" y="885" width="0.0206%" height="15" fill="rgb(210,39,32)" fg:x="18272" fg:w="4"/><text x="94.4113%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="94.1716%" y="869" width="0.0103%" height="15" fill="rgb(216,194,45)" fg:x="18274" fg:w="2"/><text x="94.4216%" y="879.50"></text></g><g><title>generate-forecast`tokio::runtime::queue::Local&lt;T&gt;::pop (3 samples, 0.02%)</title><rect x="94.1871%" y="885" width="0.0155%" height="15" fill="rgb(218,18,35)" fg:x="18277" fg:w="3"/><text x="94.4371%" y="895.50"></text></g><g><title>generate-forecast`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (7 samples, 0.04%)</title><rect x="94.2025%" y="885" width="0.0361%" height="15" fill="rgb(207,83,51)" fg:x="18280" fg:w="7"/><text x="94.4525%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="94.2438%" y="869" width="0.0103%" height="15" fill="rgb(225,63,43)" fg:x="18288" fg:w="2"/><text x="94.4938%" y="879.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (4 samples, 0.02%)</title><rect x="94.2386%" y="885" width="0.0206%" height="15" fill="rgb(207,57,36)" fg:x="18287" fg:w="4"/><text x="94.4886%" y="895.50"></text></g><g><title>generate-forecast`mio::poll::Events::iter (2 samples, 0.01%)</title><rect x="94.4757%" y="837" width="0.0103%" height="15" fill="rgb(216,99,33)" fg:x="18333" fg:w="2"/><text x="94.7257%" y="847.50"></text></g><g><title>generate-forecast`mio::poll::ReadinessQueueInner::dequeue_node (6 samples, 0.03%)</title><rect x="94.5581%" y="789" width="0.0309%" height="15" fill="rgb(225,42,16)" fg:x="18349" fg:w="6"/><text x="94.8081%" y="799.50"></text></g><g><title>generate-forecast`mio::sys::unix::awakener::pipe::Awakener::cleanup (12 samples, 0.06%)</title><rect x="94.5890%" y="789" width="0.0618%" height="15" fill="rgb(220,201,45)" fg:x="18355" fg:w="12"/><text x="94.8390%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`read (11 samples, 0.06%)</title><rect x="94.5942%" y="773" width="0.0567%" height="15" fill="rgb(225,33,4)" fg:x="18356" fg:w="11"/><text x="94.8442%" y="783.50"></text></g><g><title>generate-forecast`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (2 samples, 0.01%)</title><rect x="94.7075%" y="773" width="0.0103%" height="15" fill="rgb(224,33,50)" fg:x="18378" fg:w="2"/><text x="94.9575%" y="783.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="94.7179%" y="773" width="0.0155%" height="15" fill="rgb(246,198,51)" fg:x="18380" fg:w="3"/><text x="94.9679%" y="783.50"></text></g><g><title>generate-forecast`mio::sys::unix::kqueue::Selector::select (49 samples, 0.25%)</title><rect x="94.6509%" y="789" width="0.2525%" height="15" fill="rgb(205,22,4)" fg:x="18367" fg:w="49"/><text x="94.9009%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (33 samples, 0.17%)</title><rect x="94.7333%" y="773" width="0.1701%" height="15" fill="rgb(206,3,8)" fg:x="18383" fg:w="33"/><text x="94.9833%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`kevent (137 samples, 0.71%)</title><rect x="94.9034%" y="789" width="0.7060%" height="15" fill="rgb(251,23,15)" fg:x="18416" fg:w="137"/><text x="95.1534%" y="799.50"></text></g><g><title>generate-forecast`mio::poll::Poll::poll1 (211 samples, 1.09%)</title><rect x="94.5272%" y="805" width="1.0873%" height="15" fill="rgb(252,88,28)" fg:x="18343" fg:w="211"/><text x="94.7772%" y="815.50"></text></g><g><title>generate-forecast`mio::poll::Poll::poll (213 samples, 1.10%)</title><rect x="94.5220%" y="821" width="1.0977%" height="15" fill="rgb(212,127,14)" fg:x="18342" fg:w="213"/><text x="94.7720%" y="831.50"></text></g><g><title>generate-forecast`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (4 samples, 0.02%)</title><rect x="95.6300%" y="789" width="0.0206%" height="15" fill="rgb(247,145,37)" fg:x="18557" fg:w="4"/><text x="95.8800%" y="799.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.01%)</title><rect x="95.6403%" y="773" width="0.0103%" height="15" fill="rgb(209,117,53)" fg:x="18559" fg:w="2"/><text x="95.8903%" y="783.50"></text></g><g><title>generate-forecast`tokio::io::driver::Driver::turn (225 samples, 1.16%)</title><rect x="94.4963%" y="837" width="1.1595%" height="15" fill="rgb(212,90,42)" fg:x="18337" fg:w="225"/><text x="94.7463%" y="847.50"></text></g><g><title>generate-forecast`tokio::runtime::task::waker::wake_by_val (6 samples, 0.03%)</title><rect x="95.6248%" y="821" width="0.0309%" height="15" fill="rgb(218,164,37)" fg:x="18556" fg:w="6"/><text x="95.8748%" y="831.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (6 samples, 0.03%)</title><rect x="95.6248%" y="805" width="0.0309%" height="15" fill="rgb(246,65,34)" fg:x="18556" fg:w="6"/><text x="95.8748%" y="815.50"></text></g><g><title>generate-forecast`tokio::time::wheel::Wheel&lt;T&gt;::poll (2 samples, 0.01%)</title><rect x="95.6764%" y="821" width="0.0103%" height="15" fill="rgb(231,100,33)" fg:x="18566" fg:w="2"/><text x="95.9264%" y="831.50"></text></g><g><title>generate-forecast`tokio::time::driver::Driver&lt;T&gt;::process (10 samples, 0.05%)</title><rect x="95.6609%" y="837" width="0.0515%" height="15" fill="rgb(228,126,14)" fg:x="18563" fg:w="10"/><text x="95.9109%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.02%)</title><rect x="95.6918%" y="821" width="0.0206%" height="15" fill="rgb(215,173,21)" fg:x="18569" fg:w="4"/><text x="95.9418%" y="831.50"></text></g><g><title>generate-forecast`tokio::time::wheel::Wheel&lt;T&gt;::poll_at (2 samples, 0.01%)</title><rect x="95.7176%" y="837" width="0.0103%" height="15" fill="rgb(210,6,40)" fg:x="18574" fg:w="2"/><text x="95.9676%" y="847.50"></text></g><g><title>generate-forecast`tokio::time::wheel::level::Level&lt;T&gt;::next_expiration (2 samples, 0.01%)</title><rect x="95.7176%" y="821" width="0.0103%" height="15" fill="rgb(212,48,18)" fg:x="18574" fg:w="2"/><text x="95.9676%" y="831.50"></text></g><g><title>generate-forecast`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (248 samples, 1.28%)</title><rect x="94.4602%" y="853" width="1.2780%" height="15" fill="rgb(230,214,11)" fg:x="18330" fg:w="248"/><text x="94.7102%" y="863.50"></text></g><g><title>generate-forecast`tokio::io::driver::Driver::turn (2 samples, 0.01%)</title><rect x="95.7382%" y="853" width="0.0103%" height="15" fill="rgb(254,105,39)" fg:x="18578" fg:w="2"/><text x="95.9882%" y="863.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (120 samples, 0.62%)</title><rect x="95.7485%" y="853" width="0.6184%" height="15" fill="rgb(245,158,5)" fg:x="18580" fg:w="120"/><text x="95.9985%" y="863.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (102 samples, 0.53%)</title><rect x="96.3669%" y="853" width="0.5256%" height="15" fill="rgb(249,208,11)" fg:x="18700" fg:w="102"/><text x="96.6169%" y="863.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (2 samples, 0.01%)</title><rect x="96.9286%" y="837" width="0.0103%" height="15" fill="rgb(210,39,28)" fg:x="18809" fg:w="2"/><text x="97.1786%" y="847.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="96.9389%" y="837" width="0.0103%" height="15" fill="rgb(211,56,53)" fg:x="18811" fg:w="2"/><text x="97.1889%" y="847.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (13 samples, 0.07%)</title><rect x="96.8926%" y="853" width="0.0670%" height="15" fill="rgb(226,201,30)" fg:x="18802" fg:w="13"/><text x="97.1426%" y="863.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (2 samples, 0.01%)</title><rect x="96.9492%" y="837" width="0.0103%" height="15" fill="rgb(239,101,34)" fg:x="18813" fg:w="2"/><text x="97.1992%" y="847.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (2 samples, 0.01%)</title><rect x="96.9595%" y="853" width="0.0103%" height="15" fill="rgb(226,209,5)" fg:x="18815" fg:w="2"/><text x="97.2095%" y="863.50"></text></g><g><title>generate-forecast`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (500 samples, 2.58%)</title><rect x="94.4035%" y="869" width="2.5767%" height="15" fill="rgb(250,105,47)" fg:x="18319" fg:w="500"/><text x="94.6535%" y="879.50">ge..</text></g><g><title>generate-forecast`tokio::io::driver::Driver::turn (4 samples, 0.02%)</title><rect x="96.9802%" y="837" width="0.0206%" height="15" fill="rgb(230,72,3)" fg:x="18819" fg:w="4"/><text x="97.2302%" y="847.50"></text></g><g><title>generate-forecast`mio::poll::Poll::poll (4 samples, 0.02%)</title><rect x="96.9802%" y="821" width="0.0206%" height="15" fill="rgb(232,218,39)" fg:x="18819" fg:w="4"/><text x="97.2302%" y="831.50"></text></g><g><title>generate-forecast`mio::poll::Poll::poll1 (4 samples, 0.02%)</title><rect x="96.9802%" y="805" width="0.0206%" height="15" fill="rgb(248,166,6)" fg:x="18819" fg:w="4"/><text x="97.2302%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`kevent (2 samples, 0.01%)</title><rect x="96.9905%" y="789" width="0.0103%" height="15" fill="rgb(247,89,20)" fg:x="18821" fg:w="2"/><text x="97.2405%" y="799.50"></text></g><g><title>generate-forecast`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (5 samples, 0.03%)</title><rect x="96.9802%" y="869" width="0.0258%" height="15" fill="rgb(248,130,54)" fg:x="18819" fg:w="5"/><text x="97.2302%" y="879.50"></text></g><g><title>generate-forecast`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (5 samples, 0.03%)</title><rect x="96.9802%" y="853" width="0.0258%" height="15" fill="rgb(234,196,4)" fg:x="18819" fg:w="5"/><text x="97.2302%" y="863.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (3 samples, 0.02%)</title><rect x="97.0111%" y="869" width="0.0155%" height="15" fill="rgb(250,143,31)" fg:x="18825" fg:w="3"/><text x="97.2611%" y="879.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (2 samples, 0.01%)</title><rect x="97.0265%" y="869" width="0.0103%" height="15" fill="rgb(211,110,34)" fg:x="18828" fg:w="2"/><text x="97.2765%" y="879.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Context::park_timeout (543 samples, 2.80%)</title><rect x="94.2592%" y="885" width="2.7982%" height="15" fill="rgb(215,124,48)" fg:x="18291" fg:w="543"/><text x="94.5092%" y="895.50">ge..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="97.0472%" y="869" width="0.0103%" height="15" fill="rgb(216,46,13)" fg:x="18832" fg:w="2"/><text x="97.2972%" y="879.50"></text></g><g><title>generate-forecast`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (9 samples, 0.05%)</title><rect x="97.0626%" y="869" width="0.0464%" height="15" fill="rgb(205,184,25)" fg:x="18835" fg:w="9"/><text x="97.3126%" y="879.50"></text></g><g><title>generate-forecast`mio::poll::SetReadiness::set_readiness (9 samples, 0.05%)</title><rect x="97.0626%" y="853" width="0.0464%" height="15" fill="rgb(228,1,10)" fg:x="18835" fg:w="9"/><text x="97.3126%" y="863.50"></text></g><g><title>generate-forecast`mio::poll::enqueue_with_wakeup (9 samples, 0.05%)</title><rect x="97.0626%" y="837" width="0.0464%" height="15" fill="rgb(213,116,27)" fg:x="18835" fg:w="9"/><text x="97.3126%" y="847.50"></text></g><g><title>generate-forecast`mio::sys::unix::awakener::pipe::Awakener::wakeup (8 samples, 0.04%)</title><rect x="97.0678%" y="821" width="0.0412%" height="15" fill="rgb(241,95,50)" fg:x="18836" fg:w="8"/><text x="97.3178%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`write (8 samples, 0.04%)</title><rect x="97.0678%" y="805" width="0.0412%" height="15" fill="rgb(238,48,32)" fg:x="18836" fg:w="8"/><text x="97.3178%" y="815.50"></text></g><g><title>generate-forecast`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (3 samples, 0.02%)</title><rect x="97.1090%" y="869" width="0.0155%" height="15" fill="rgb(235,113,49)" fg:x="18844" fg:w="3"/><text x="97.3590%" y="879.50"></text></g><g><title>generate-forecast`tokio::coop::CURRENT::__getit (2 samples, 0.01%)</title><rect x="97.1296%" y="853" width="0.0103%" height="15" fill="rgb(205,127,43)" fg:x="18848" fg:w="2"/><text x="97.3796%" y="863.50"></text></g><g><title>generate-forecast`core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (2 samples, 0.01%)</title><rect x="97.1811%" y="757" width="0.0103%" height="15" fill="rgb(250,162,2)" fg:x="18858" fg:w="2"/><text x="97.4311%" y="767.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_shutdown (3 samples, 0.02%)</title><rect x="97.1966%" y="757" width="0.0155%" height="15" fill="rgb(220,13,41)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="767.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_shutdown (3 samples, 0.02%)</title><rect x="97.1966%" y="741" width="0.0155%" height="15" fill="rgb(249,221,25)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="751.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_shutdown (3 samples, 0.02%)</title><rect x="97.1966%" y="725" width="0.0155%" height="15" fill="rgb(215,208,19)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="735.50"></text></g><g><title>Security`SSLClose (3 samples, 0.02%)</title><rect x="97.1966%" y="709" width="0.0155%" height="15" fill="rgb(236,175,2)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="719.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (3 samples, 0.02%)</title><rect x="97.1966%" y="693" width="0.0155%" height="15" fill="rgb(241,52,2)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="703.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::write_func (3 samples, 0.02%)</title><rect x="97.1966%" y="677" width="0.0155%" height="15" fill="rgb(248,140,14)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="687.50"></text></g><g><title>generate-forecast`std::panicking::try (3 samples, 0.02%)</title><rect x="97.1966%" y="661" width="0.0155%" height="15" fill="rgb(253,22,42)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="671.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 0.02%)</title><rect x="97.1966%" y="645" width="0.0155%" height="15" fill="rgb(234,61,47)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="655.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_write_priv (3 samples, 0.02%)</title><rect x="97.1966%" y="629" width="0.0155%" height="15" fill="rgb(208,226,15)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="639.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="97.1966%" y="613" width="0.0155%" height="15" fill="rgb(217,221,4)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (3 samples, 0.02%)</title><rect x="97.1966%" y="597" width="0.0155%" height="15" fill="rgb(212,174,34)" fg:x="18861" fg:w="3"/><text x="97.4466%" y="607.50"></text></g><g><title>generate-forecast`futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (2 samples, 0.01%)</title><rect x="97.2687%" y="741" width="0.0103%" height="15" fill="rgb(253,83,4)" fg:x="18875" fg:w="2"/><text x="97.5187%" y="751.50"></text></g><g><title>generate-forecast`futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (3 samples, 0.02%)</title><rect x="97.2894%" y="725" width="0.0155%" height="15" fill="rgb(250,195,49)" fg:x="18879" fg:w="3"/><text x="97.5394%" y="735.50"></text></g><g><title>generate-forecast`futures_core::task::__internal::atomic_waker::AtomicWaker::register (6 samples, 0.03%)</title><rect x="97.3048%" y="725" width="0.0309%" height="15" fill="rgb(241,192,25)" fg:x="18882" fg:w="6"/><text x="97.5548%" y="735.50"></text></g><g><title>generate-forecast`tokio::runtime::task::waker::clone_waker (2 samples, 0.01%)</title><rect x="97.3254%" y="709" width="0.0103%" height="15" fill="rgb(208,124,10)" fg:x="18886" fg:w="2"/><text x="97.5754%" y="719.50"></text></g><g><title>generate-forecast`tokio::runtime::task::state::State::ref_inc (2 samples, 0.01%)</title><rect x="97.3254%" y="693" width="0.0103%" height="15" fill="rgb(222,33,0)" fg:x="18886" fg:w="2"/><text x="97.5754%" y="703.50"></text></g><g><title>generate-forecast`hyper::body::body::Sender::poll_ready (10 samples, 0.05%)</title><rect x="97.2894%" y="741" width="0.0515%" height="15" fill="rgb(234,209,28)" fg:x="18879" fg:w="10"/><text x="97.5394%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (10 samples, 0.05%)</title><rect x="97.3667%" y="677" width="0.0515%" height="15" fill="rgb(224,11,23)" fg:x="18894" fg:w="10"/><text x="97.6167%" y="687.50"></text></g><g><title>generate-forecast`futures_task::arc_wake::ArcWake::wake (12 samples, 0.06%)</title><rect x="97.3667%" y="709" width="0.0618%" height="15" fill="rgb(232,99,1)" fg:x="18894" fg:w="12"/><text x="97.6167%" y="719.50"></text></g><g><title>generate-forecast`tokio::park::thread::wake (12 samples, 0.06%)</title><rect x="97.3667%" y="693" width="0.0618%" height="15" fill="rgb(237,95,45)" fg:x="18894" fg:w="12"/><text x="97.6167%" y="703.50"></text></g><g><title>generate-forecast`futures_channel::mpsc::Sender&lt;T&gt;::try_send (21 samples, 0.11%)</title><rect x="97.3460%" y="725" width="0.1082%" height="15" fill="rgb(208,109,11)" fg:x="18890" fg:w="21"/><text x="97.5960%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="97.4337%" y="709" width="0.0206%" height="15" fill="rgb(216,190,48)" fg:x="18907" fg:w="4"/><text x="97.6837%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="97.4337%" y="693" width="0.0206%" height="15" fill="rgb(251,171,36)" fg:x="18907" fg:w="4"/><text x="97.6837%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="97.4337%" y="677" width="0.0206%" height="15" fill="rgb(230,62,22)" fg:x="18907" fg:w="4"/><text x="97.6837%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.01%)</title><rect x="97.4440%" y="661" width="0.0103%" height="15" fill="rgb(225,114,35)" fg:x="18909" fg:w="2"/><text x="97.6940%" y="671.50"></text></g><g><title>generate-forecast`hyper::body::body::Sender::try_send_data (23 samples, 0.12%)</title><rect x="97.3409%" y="741" width="0.1185%" height="15" fill="rgb(215,118,42)" fg:x="18889" fg:w="23"/><text x="97.5909%" y="751.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (4 samples, 0.02%)</title><rect x="97.4646%" y="741" width="0.0206%" height="15" fill="rgb(243,119,21)" fg:x="18913" fg:w="4"/><text x="97.7146%" y="751.50"></text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (3 samples, 0.02%)</title><rect x="97.4697%" y="725" width="0.0155%" height="15" fill="rgb(252,177,53)" fg:x="18914" fg:w="3"/><text x="97.7197%" y="735.50"></text></g><g><title>generate-forecast`tokio::io::async_write::AsyncWrite::poll_write_buf (2 samples, 0.01%)</title><rect x="97.4749%" y="709" width="0.0103%" height="15" fill="rgb(237,209,29)" fg:x="18915" fg:w="2"/><text x="97.7249%" y="719.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.01%)</title><rect x="97.4749%" y="693" width="0.0103%" height="15" fill="rgb(212,65,23)" fg:x="18915" fg:w="2"/><text x="97.7249%" y="703.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.01%)</title><rect x="97.4749%" y="677" width="0.0103%" height="15" fill="rgb(230,222,46)" fg:x="18915" fg:w="2"/><text x="97.7249%" y="687.50"></text></g><g><title>Security`SSLWrite (2 samples, 0.01%)</title><rect x="97.4749%" y="661" width="0.0103%" height="15" fill="rgb(215,135,32)" fg:x="18915" fg:w="2"/><text x="97.7249%" y="671.50"></text></g><g><title>generate-forecast`bytes::bytes_mut::BytesMut::freeze (2 samples, 0.01%)</title><rect x="97.4955%" y="725" width="0.0103%" height="15" fill="rgb(246,101,22)" fg:x="18919" fg:w="2"/><text x="97.7455%" y="735.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::try_keep_alive (2 samples, 0.01%)</title><rect x="97.5110%" y="725" width="0.0103%" height="15" fill="rgb(206,107,13)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="735.50"></text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2 samples, 0.01%)</title><rect x="97.5110%" y="709" width="0.0103%" height="15" fill="rgb(250,100,44)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="719.50"></text></g><g><title>generate-forecast`tokio::io::async_read::AsyncRead::poll_read_buf (2 samples, 0.01%)</title><rect x="97.5110%" y="693" width="0.0103%" height="15" fill="rgb(231,147,38)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="703.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.01%)</title><rect x="97.5110%" y="677" width="0.0103%" height="15" fill="rgb(229,8,40)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="687.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.01%)</title><rect x="97.5110%" y="661" width="0.0103%" height="15" fill="rgb(221,135,30)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="671.50"></text></g><g><title>Security`SSLRead (2 samples, 0.01%)</title><rect x="97.5110%" y="645" width="0.0103%" height="15" fill="rgb(249,193,18)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="655.50"></text></g><g><title>Security`SSLRecordReadInternal (2 samples, 0.01%)</title><rect x="97.5110%" y="629" width="0.0103%" height="15" fill="rgb(209,133,39)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="639.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::read_func (2 samples, 0.01%)</title><rect x="97.5110%" y="613" width="0.0103%" height="15" fill="rgb(232,100,14)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="623.50"></text></g><g><title>generate-forecast`std::panicking::try (2 samples, 0.01%)</title><rect x="97.5110%" y="597" width="0.0103%" height="15" fill="rgb(224,185,1)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="607.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.01%)</title><rect x="97.5110%" y="581" width="0.0103%" height="15" fill="rgb(223,139,8)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="591.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_read_priv (2 samples, 0.01%)</title><rect x="97.5110%" y="565" width="0.0103%" height="15" fill="rgb(232,213,38)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="575.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="97.5110%" y="549" width="0.0103%" height="15" fill="rgb(207,94,22)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (2 samples, 0.01%)</title><rect x="97.5110%" y="533" width="0.0103%" height="15" fill="rgb(219,183,54)" fg:x="18922" fg:w="2"/><text x="97.7610%" y="543.50"></text></g><g><title>generate-forecast`bytes::bytes_mut::BytesMut::split_to (2 samples, 0.01%)</title><rect x="97.5419%" y="709" width="0.0103%" height="15" fill="rgb(216,185,54)" fg:x="18928" fg:w="2"/><text x="97.7919%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="97.5419%" y="693" width="0.0103%" height="15" fill="rgb(254,217,39)" fg:x="18928" fg:w="2"/><text x="97.7919%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="97.5419%" y="677" width="0.0103%" height="15" fill="rgb(240,178,23)" fg:x="18928" fg:w="2"/><text x="97.7919%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="97.5625%" y="677" width="0.0103%" height="15" fill="rgb(218,11,47)" fg:x="18932" fg:w="2"/><text x="97.8125%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="97.5625%" y="661" width="0.0103%" height="15" fill="rgb(218,51,51)" fg:x="18932" fg:w="2"/><text x="97.8125%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.01%)</title><rect x="97.5625%" y="645" width="0.0103%" height="15" fill="rgb(238,126,27)" fg:x="18932" fg:w="2"/><text x="97.8125%" y="655.50"></text></g><g><title>generate-forecast`bytes::bytes_mut::BytesMut::reserve_inner (3 samples, 0.02%)</title><rect x="97.5625%" y="693" width="0.0155%" height="15" fill="rgb(249,202,22)" fg:x="18932" fg:w="3"/><text x="97.8125%" y="703.50"></text></g><g><title>Security`SSLGetConnection (2 samples, 0.01%)</title><rect x="97.6037%" y="645" width="0.0103%" height="15" fill="rgb(254,195,49)" fg:x="18940" fg:w="2"/><text x="97.8537%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="97.6449%" y="613" width="0.0103%" height="15" fill="rgb(208,123,14)" fg:x="18948" fg:w="2"/><text x="97.8949%" y="623.50"></text></g><g><title>Security`SSLRecordFreeInternal (4 samples, 0.02%)</title><rect x="97.6449%" y="629" width="0.0206%" height="15" fill="rgb(224,200,8)" fg:x="18948" fg:w="4"/><text x="97.8949%" y="639.50"></text></g><g><title>generate-forecast`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (5 samples, 0.03%)</title><rect x="97.7119%" y="533" width="0.0258%" height="15" fill="rgb(217,61,36)" fg:x="18961" fg:w="5"/><text x="97.9619%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (4 samples, 0.02%)</title><rect x="97.7171%" y="517" width="0.0206%" height="15" fill="rgb(206,35,45)" fg:x="18962" fg:w="4"/><text x="97.9671%" y="527.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (2 samples, 0.01%)</title><rect x="97.7377%" y="533" width="0.0103%" height="15" fill="rgb(217,65,33)" fg:x="18966" fg:w="2"/><text x="97.9877%" y="543.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (219 samples, 1.13%)</title><rect x="97.7119%" y="549" width="1.1286%" height="15" fill="rgb(222,158,48)" fg:x="18961" fg:w="219"/><text x="97.9619%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (210 samples, 1.08%)</title><rect x="97.7583%" y="533" width="1.0822%" height="15" fill="rgb(254,2,54)" fg:x="18970" fg:w="210"/><text x="98.0083%" y="543.50"></text></g><g><title>generate-forecast`tokio::io::registration::Registration::poll_ready (2 samples, 0.01%)</title><rect x="98.8663%" y="501" width="0.0103%" height="15" fill="rgb(250,143,38)" fg:x="19185" fg:w="2"/><text x="99.1163%" y="511.50"></text></g><g><title>generate-forecast`tokio::io::poll_evented::PollEvented&lt;E&gt;::clear_read_ready (7 samples, 0.04%)</title><rect x="98.8457%" y="549" width="0.0361%" height="15" fill="rgb(248,25,0)" fg:x="19181" fg:w="7"/><text x="99.0957%" y="559.50"></text></g><g><title>generate-forecast`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (7 samples, 0.04%)</title><rect x="98.8457%" y="533" width="0.0361%" height="15" fill="rgb(206,152,27)" fg:x="19181" fg:w="7"/><text x="99.0957%" y="543.50"></text></g><g><title>generate-forecast`tokio::io::registration::Registration::poll_read_ready (7 samples, 0.04%)</title><rect x="98.8457%" y="517" width="0.0361%" height="15" fill="rgb(240,77,30)" fg:x="19181" fg:w="7"/><text x="99.0957%" y="527.50"></text></g><g><title>generate-forecast`tokio::io::registration::Registration::poll_ready (2 samples, 0.01%)</title><rect x="98.8920%" y="517" width="0.0103%" height="15" fill="rgb(231,5,3)" fg:x="19190" fg:w="2"/><text x="99.1420%" y="527.50"></text></g><g><title>generate-forecast`tokio::sync::task::atomic_waker::AtomicWaker::register (2 samples, 0.01%)</title><rect x="98.8920%" y="501" width="0.0103%" height="15" fill="rgb(207,226,32)" fg:x="19190" fg:w="2"/><text x="99.1420%" y="511.50"></text></g><g><title>generate-forecast`tokio::io::registration::Registration::poll_read_ready (4 samples, 0.02%)</title><rect x="98.8869%" y="533" width="0.0206%" height="15" fill="rgb(222,207,47)" fg:x="19189" fg:w="4"/><text x="99.1369%" y="543.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::read_func (239 samples, 1.23%)</title><rect x="97.6862%" y="613" width="1.2316%" height="15" fill="rgb(229,115,45)" fg:x="18956" fg:w="239"/><text x="97.9362%" y="623.50"></text></g><g><title>generate-forecast`std::panicking::try (235 samples, 1.21%)</title><rect x="97.7068%" y="597" width="1.2110%" height="15" fill="rgb(224,191,6)" fg:x="18960" fg:w="235"/><text x="97.9568%" y="607.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (234 samples, 1.21%)</title><rect x="97.7119%" y="581" width="1.2059%" height="15" fill="rgb(230,227,24)" fg:x="18961" fg:w="234"/><text x="97.9619%" y="591.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_read_priv (234 samples, 1.21%)</title><rect x="97.7119%" y="565" width="1.2059%" height="15" fill="rgb(228,80,19)" fg:x="18961" fg:w="234"/><text x="97.9619%" y="575.50"></text></g><g><title>generate-forecast`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (7 samples, 0.04%)</title><rect x="98.8817%" y="549" width="0.0361%" height="15" fill="rgb(247,229,0)" fg:x="19188" fg:w="7"/><text x="99.1317%" y="559.50"></text></g><g><title>generate-forecast`tokio::io::registration::Registration::poll_ready (2 samples, 0.01%)</title><rect x="98.9075%" y="533" width="0.0103%" height="15" fill="rgb(237,194,15)" fg:x="19193" fg:w="2"/><text x="99.1575%" y="543.50"></text></g><g><title>generate-forecast`std::panicking::try (2 samples, 0.01%)</title><rect x="98.9230%" y="613" width="0.0103%" height="15" fill="rgb(219,203,20)" fg:x="19196" fg:w="2"/><text x="99.1730%" y="623.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_reset (2 samples, 0.01%)</title><rect x="98.9590%" y="565" width="0.0103%" height="15" fill="rgb(234,128,8)" fg:x="19203" fg:w="2"/><text x="99.2090%" y="575.50"></text></g><g><title>libcorecrypto.dylib`ecb_wrapper_aesni (2 samples, 0.01%)</title><rect x="98.9693%" y="565" width="0.0103%" height="15" fill="rgb(248,202,8)" fg:x="19205" fg:w="2"/><text x="99.2193%" y="575.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_init (9 samples, 0.05%)</title><rect x="98.9436%" y="581" width="0.0464%" height="15" fill="rgb(206,104,37)" fg:x="19200" fg:w="9"/><text x="99.1936%" y="591.50"></text></g><g><title>libcorecrypto.dylib`vng_aes_encrypt_aesni_key (2 samples, 0.01%)</title><rect x="98.9796%" y="565" width="0.0103%" height="15" fill="rgb(223,8,27)" fg:x="19207" fg:w="2"/><text x="99.2296%" y="575.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_init_with_iv (15 samples, 0.08%)</title><rect x="98.9436%" y="597" width="0.0773%" height="15" fill="rgb(216,217,28)" fg:x="19200" fg:w="15"/><text x="99.1936%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`_get_cpu_capabilities (4 samples, 0.02%)</title><rect x="99.0003%" y="581" width="0.0206%" height="15" fill="rgb(249,199,1)" fg:x="19211" fg:w="4"/><text x="99.2503%" y="591.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_init (2 samples, 0.01%)</title><rect x="99.0209%" y="597" width="0.0103%" height="15" fill="rgb(240,85,17)" fg:x="19215" fg:w="2"/><text x="99.2709%" y="607.50"></text></g><g><title>libcoretls.dylib`CCSymmAEADSetIV (2 samples, 0.01%)</title><rect x="99.0312%" y="597" width="0.0103%" height="15" fill="rgb(206,108,45)" fg:x="19217" fg:w="2"/><text x="99.2812%" y="607.50"></text></g><g><title>libcoretls.dylib`SSLDecryptRecord (40 samples, 0.21%)</title><rect x="99.0415%" y="597" width="0.2061%" height="15" fill="rgb(245,210,41)" fg:x="19219" fg:w="40"/><text x="99.2915%" y="607.50"></text></g><g><title>libcoretls.dylib`CCSymmAEADDecrypt (40 samples, 0.21%)</title><rect x="99.0415%" y="581" width="0.2061%" height="15" fill="rgb(206,13,37)" fg:x="19219" fg:w="40"/><text x="99.2915%" y="591.50"></text></g><g><title>libcorecrypto.dylib`ccaes_vng_gcm_decrypt (40 samples, 0.21%)</title><rect x="99.0415%" y="565" width="0.2061%" height="15" fill="rgb(250,61,18)" fg:x="19219" fg:w="40"/><text x="99.2915%" y="575.50"></text></g><g><title>libcorecrypto.dylib`Main_Decrypt_Loop (39 samples, 0.20%)</title><rect x="99.0466%" y="549" width="0.2010%" height="15" fill="rgb(235,172,48)" fg:x="19220" fg:w="39"/><text x="99.2966%" y="559.50"></text></g><g><title>libcoretls.dylib`tls_record_decrypt (66 samples, 0.34%)</title><rect x="98.9333%" y="613" width="0.3401%" height="15" fill="rgb(249,201,17)" fg:x="19198" fg:w="66"/><text x="99.1833%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="99.2476%" y="597" width="0.0258%" height="15" fill="rgb(219,208,6)" fg:x="19259" fg:w="5"/><text x="99.4976%" y="607.50"></text></g><g><title>libcoretls.dylib`tls_record_decrypted_size (2 samples, 0.01%)</title><rect x="99.2734%" y="613" width="0.0103%" height="15" fill="rgb(248,31,23)" fg:x="19264" fg:w="2"/><text x="99.5234%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="99.2888%" y="613" width="0.0155%" height="15" fill="rgb(245,15,42)" fg:x="19267" fg:w="3"/><text x="99.5388%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="99.2940%" y="597" width="0.0103%" height="15" fill="rgb(222,217,39)" fg:x="19268" fg:w="2"/><text x="99.5440%" y="607.50"></text></g><g><title>Security`SSLRecordReadInternal (320 samples, 1.65%)</title><rect x="97.6656%" y="629" width="1.6491%" height="15" fill="rgb(210,219,27)" fg:x="18952" fg:w="320"/><text x="97.9156%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="99.3043%" y="613" width="0.0103%" height="15" fill="rgb(252,166,36)" fg:x="19270" fg:w="2"/><text x="99.5543%" y="623.50"></text></g><g><title>Security`SSLRead (341 samples, 1.76%)</title><rect x="97.6140%" y="645" width="1.7573%" height="15" fill="rgb(245,132,34)" fg:x="18942" fg:w="341"/><text x="97.8640%" y="655.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.03%)</title><rect x="99.3404%" y="629" width="0.0309%" height="15" fill="rgb(236,54,3)" fg:x="19277" fg:w="6"/><text x="99.5904%" y="639.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (349 samples, 1.80%)</title><rect x="97.6037%" y="661" width="1.7985%" height="15" fill="rgb(241,173,43)" fg:x="18940" fg:w="349"/><text x="97.8537%" y="671.50">g..</text></g><g><title>libcoretls.dylib`tls_handshake_continue (5 samples, 0.03%)</title><rect x="99.3764%" y="645" width="0.0258%" height="15" fill="rgb(215,190,9)" fg:x="19284" fg:w="5"/><text x="99.6264%" y="655.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (352 samples, 1.81%)</title><rect x="97.5934%" y="677" width="1.8140%" height="15" fill="rgb(242,101,16)" fg:x="18938" fg:w="352"/><text x="97.8434%" y="687.50">g..</text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (361 samples, 1.86%)</title><rect x="97.5522%" y="709" width="1.8603%" height="15" fill="rgb(223,190,21)" fg:x="18930" fg:w="361"/><text x="97.8022%" y="719.50">g..</text></g><g><title>generate-forecast`tokio::io::async_read::AsyncRead::poll_read_buf (356 samples, 1.83%)</title><rect x="97.5779%" y="693" width="1.8346%" height="15" fill="rgb(215,228,25)" fg:x="18935" fg:w="356"/><text x="97.8279%" y="703.50">g..</text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (375 samples, 1.93%)</title><rect x="97.4852%" y="741" width="1.9325%" height="15" fill="rgb(225,36,22)" fg:x="18917" fg:w="375"/><text x="97.7352%" y="751.50">g..</text></g><g><title>generate-forecast`hyper::proto::h1::decode::Decoder::decode (368 samples, 1.90%)</title><rect x="97.5213%" y="725" width="1.8964%" height="15" fill="rgb(251,106,46)" fg:x="18924" fg:w="368"/><text x="97.7713%" y="735.50">g..</text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (10 samples, 0.05%)</title><rect x="99.4280%" y="549" width="0.0515%" height="15" fill="rgb(208,90,1)" fg:x="19294" fg:w="10"/><text x="99.6780%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (10 samples, 0.05%)</title><rect x="99.4280%" y="533" width="0.0515%" height="15" fill="rgb(243,10,4)" fg:x="19294" fg:w="10"/><text x="99.6780%" y="543.50"></text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (11 samples, 0.06%)</title><rect x="99.4280%" y="709" width="0.0567%" height="15" fill="rgb(212,137,27)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="719.50"></text></g><g><title>generate-forecast`tokio::io::async_read::AsyncRead::poll_read_buf (11 samples, 0.06%)</title><rect x="99.4280%" y="693" width="0.0567%" height="15" fill="rgb(231,220,49)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="703.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 0.06%)</title><rect x="99.4280%" y="677" width="0.0567%" height="15" fill="rgb(237,96,20)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="687.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 0.06%)</title><rect x="99.4280%" y="661" width="0.0567%" height="15" fill="rgb(239,229,30)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="671.50"></text></g><g><title>Security`SSLRead (11 samples, 0.06%)</title><rect x="99.4280%" y="645" width="0.0567%" height="15" fill="rgb(219,65,33)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="655.50"></text></g><g><title>Security`SSLRecordReadInternal (11 samples, 0.06%)</title><rect x="99.4280%" y="629" width="0.0567%" height="15" fill="rgb(243,134,7)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="639.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::read_func (11 samples, 0.06%)</title><rect x="99.4280%" y="613" width="0.0567%" height="15" fill="rgb(216,177,54)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="623.50"></text></g><g><title>generate-forecast`std::panicking::try (11 samples, 0.06%)</title><rect x="99.4280%" y="597" width="0.0567%" height="15" fill="rgb(211,160,20)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="607.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 0.06%)</title><rect x="99.4280%" y="581" width="0.0567%" height="15" fill="rgb(239,85,39)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="591.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_read_priv (11 samples, 0.06%)</title><rect x="99.4280%" y="565" width="0.0567%" height="15" fill="rgb(232,125,22)" fg:x="19294" fg:w="11"/><text x="99.6780%" y="575.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (14 samples, 0.07%)</title><rect x="99.4177%" y="741" width="0.0721%" height="15" fill="rgb(244,57,34)" fg:x="19292" fg:w="14"/><text x="99.6677%" y="751.50"></text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (13 samples, 0.07%)</title><rect x="99.4228%" y="725" width="0.0670%" height="15" fill="rgb(214,203,32)" fg:x="19293" fg:w="13"/><text x="99.6728%" y="735.50"></text></g><g><title>Security`SSLRecordReadInternal (3 samples, 0.02%)</title><rect x="99.4898%" y="629" width="0.0155%" height="15" fill="rgb(207,58,43)" fg:x="19306" fg:w="3"/><text x="99.7398%" y="639.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::read_func (3 samples, 0.02%)</title><rect x="99.4898%" y="613" width="0.0155%" height="15" fill="rgb(215,193,15)" fg:x="19306" fg:w="3"/><text x="99.7398%" y="623.50"></text></g><g><title>generate-forecast`std::panicking::try (3 samples, 0.02%)</title><rect x="99.4898%" y="597" width="0.0155%" height="15" fill="rgb(232,15,44)" fg:x="19306" fg:w="3"/><text x="99.7398%" y="607.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.02%)</title><rect x="99.4898%" y="581" width="0.0155%" height="15" fill="rgb(212,3,48)" fg:x="19306" fg:w="3"/><text x="99.7398%" y="591.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_read_priv (2 samples, 0.01%)</title><rect x="99.4950%" y="565" width="0.0103%" height="15" fill="rgb(218,128,7)" fg:x="19307" fg:w="2"/><text x="99.7450%" y="575.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (4 samples, 0.02%)</title><rect x="99.4898%" y="741" width="0.0206%" height="15" fill="rgb(226,216,39)" fg:x="19306" fg:w="4"/><text x="99.7398%" y="751.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (4 samples, 0.02%)</title><rect x="99.4898%" y="725" width="0.0206%" height="15" fill="rgb(243,47,51)" fg:x="19306" fg:w="4"/><text x="99.7398%" y="735.50"></text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4 samples, 0.02%)</title><rect x="99.4898%" y="709" width="0.0206%" height="15" fill="rgb(241,183,40)" fg:x="19306" fg:w="4"/><text x="99.7398%" y="719.50"></text></g><g><title>generate-forecast`tokio::io::async_read::AsyncRead::poll_read_buf (4 samples, 0.02%)</title><rect x="99.4898%" y="693" width="0.0206%" height="15" fill="rgb(231,217,32)" fg:x="19306" fg:w="4"/><text x="99.7398%" y="703.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.02%)</title><rect x="99.4898%" y="677" width="0.0206%" height="15" fill="rgb(229,61,38)" fg:x="19306" fg:w="4"/><text x="99.7398%" y="687.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.02%)</title><rect x="99.4898%" y="661" width="0.0206%" height="15" fill="rgb(225,210,5)" fg:x="19306" fg:w="4"/><text x="99.7398%" y="671.50"></text></g><g><title>Security`SSLRead (4 samples, 0.02%)</title><rect x="99.4898%" y="645" width="0.0206%" height="15" fill="rgb(231,79,45)" fg:x="19306" fg:w="4"/><text x="99.7398%" y="655.50"></text></g><g><title>generate-forecast`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (460 samples, 2.37%)</title><rect x="97.1554%" y="789" width="2.3705%" height="15" fill="rgb(224,100,7)" fg:x="18853" fg:w="460"/><text x="97.4054%" y="799.50">ge..</text></g><g><title>generate-forecast`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (457 samples, 2.36%)</title><rect x="97.1708%" y="773" width="2.3551%" height="15" fill="rgb(241,198,18)" fg:x="18856" fg:w="457"/><text x="97.4208%" y="783.50">g..</text></g><g><title>generate-forecast`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (449 samples, 2.31%)</title><rect x="97.2121%" y="757" width="2.3138%" height="15" fill="rgb(252,97,53)" fg:x="18864" fg:w="449"/><text x="97.4621%" y="767.50">g..</text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::can_buffer (2 samples, 0.01%)</title><rect x="99.5156%" y="741" width="0.0103%" height="15" fill="rgb(220,88,7)" fg:x="19311" fg:w="2"/><text x="99.7656%" y="751.50"></text></g><g><title>CoreFoundation`__RELEASE_OBJECTS_IN_THE_ARRAY__ (2 samples, 0.01%)</title><rect x="99.5259%" y="677" width="0.0103%" height="15" fill="rgb(213,176,14)" fg:x="19313" fg:w="2"/><text x="99.7759%" y="687.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.01%)</title><rect x="99.5259%" y="661" width="0.0103%" height="15" fill="rgb(246,73,7)" fg:x="19313" fg:w="2"/><text x="99.7759%" y="671.50"></text></g><g><title>Security`SecCertificateDestroy (2 samples, 0.01%)</title><rect x="99.5259%" y="645" width="0.0103%" height="15" fill="rgb(245,64,36)" fg:x="19313" fg:w="2"/><text x="99.7759%" y="655.50"></text></g><g><title>CoreFoundation`-[__NSArrayM dealloc] (3 samples, 0.02%)</title><rect x="99.5259%" y="693" width="0.0155%" height="15" fill="rgb(245,80,10)" fg:x="19313" fg:w="3"/><text x="99.7759%" y="703.50"></text></g><g><title>CoreFoundation`_CFRelease (4 samples, 0.02%)</title><rect x="99.5259%" y="725" width="0.0206%" height="15" fill="rgb(232,107,50)" fg:x="19313" fg:w="4"/><text x="99.7759%" y="735.50"></text></g><g><title>Security`SecTrustDestroy (4 samples, 0.02%)</title><rect x="99.5259%" y="709" width="0.0206%" height="15" fill="rgb(253,3,0)" fg:x="19313" fg:w="4"/><text x="99.7759%" y="719.50"></text></g><g><title>CoreFoundation`_CFRelease (6 samples, 0.03%)</title><rect x="99.5259%" y="757" width="0.0309%" height="15" fill="rgb(212,99,53)" fg:x="19313" fg:w="6"/><text x="99.7759%" y="767.50"></text></g><g><title>Security`SSLContextDestroy (6 samples, 0.03%)</title><rect x="99.5259%" y="741" width="0.0309%" height="15" fill="rgb(249,111,54)" fg:x="19313" fg:w="6"/><text x="99.7759%" y="751.50"></text></g><g><title>generate-forecast`&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.5568%" y="725" width="0.0103%" height="15" fill="rgb(249,55,30)" fg:x="19319" fg:w="2"/><text x="99.8068%" y="735.50"></text></g><g><title>generate-forecast`tokio::io::driver::Inner::deregister_source (2 samples, 0.01%)</title><rect x="99.5568%" y="709" width="0.0103%" height="15" fill="rgb(237,47,42)" fg:x="19319" fg:w="2"/><text x="99.8068%" y="719.50"></text></g><g><title>generate-forecast`&lt;mio::net::tcp::TcpStream as mio::event_imp::Evented&gt;::deregister (2 samples, 0.01%)</title><rect x="99.5568%" y="693" width="0.0103%" height="15" fill="rgb(211,20,18)" fg:x="19319" fg:w="2"/><text x="99.8068%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`kevent (2 samples, 0.01%)</title><rect x="99.5568%" y="677" width="0.0103%" height="15" fill="rgb(231,203,46)" fg:x="19319" fg:w="2"/><text x="99.8068%" y="687.50"></text></g><g><title>generate-forecast`core::ptr::drop_in_place (11 samples, 0.06%)</title><rect x="99.5259%" y="789" width="0.0567%" height="15" fill="rgb(237,142,3)" fg:x="19313" fg:w="11"/><text x="99.7759%" y="799.50"></text></g><g><title>generate-forecast`core::ptr::drop_in_place (11 samples, 0.06%)</title><rect x="99.5259%" y="773" width="0.0567%" height="15" fill="rgb(241,107,1)" fg:x="19313" fg:w="11"/><text x="99.7759%" y="783.50"></text></g><g><title>generate-forecast`core::ptr::drop_in_place (5 samples, 0.03%)</title><rect x="99.5568%" y="757" width="0.0258%" height="15" fill="rgb(229,83,13)" fg:x="19319" fg:w="5"/><text x="99.8068%" y="767.50"></text></g><g><title>generate-forecast`core::ptr::drop_in_place (5 samples, 0.03%)</title><rect x="99.5568%" y="741" width="0.0258%" height="15" fill="rgb(241,91,40)" fg:x="19319" fg:w="5"/><text x="99.8068%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (2 samples, 0.01%)</title><rect x="99.5723%" y="725" width="0.0103%" height="15" fill="rgb(225,3,45)" fg:x="19322" fg:w="2"/><text x="99.8223%" y="735.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (473 samples, 2.44%)</title><rect x="97.1502%" y="805" width="2.4375%" height="15" fill="rgb(244,223,14)" fg:x="18852" fg:w="473"/><text x="97.4002%" y="815.50">ge..</text></g><g><title>generate-forecast`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.02%)</title><rect x="99.5877%" y="805" width="0.0155%" height="15" fill="rgb(224,124,37)" fg:x="19325" fg:w="3"/><text x="99.8377%" y="815.50"></text></g><g><title>generate-forecast`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (479 samples, 2.47%)</title><rect x="97.1399%" y="837" width="2.4684%" height="15" fill="rgb(251,171,30)" fg:x="18850" fg:w="479"/><text x="97.3899%" y="847.50">ge..</text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (478 samples, 2.46%)</title><rect x="97.1451%" y="821" width="2.4633%" height="15" fill="rgb(236,46,54)" fg:x="18851" fg:w="478"/><text x="97.3951%" y="831.50">ge..</text></g><g><title>generate-forecast`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (483 samples, 2.49%)</title><rect x="97.1399%" y="853" width="2.4890%" height="15" fill="rgb(245,213,5)" fg:x="18850" fg:w="483"/><text x="97.3899%" y="863.50">ge..</text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::yield_now (3 samples, 0.02%)</title><rect x="99.6135%" y="837" width="0.0155%" height="15" fill="rgb(230,144,27)" fg:x="19330" fg:w="3"/><text x="99.8635%" y="847.50"></text></g><g><title>generate-forecast`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (3 samples, 0.02%)</title><rect x="99.6135%" y="821" width="0.0155%" height="15" fill="rgb(220,86,6)" fg:x="19330" fg:w="3"/><text x="99.8635%" y="831.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Shared::schedule_local (3 samples, 0.02%)</title><rect x="99.6135%" y="805" width="0.0155%" height="15" fill="rgb(240,20,13)" fg:x="19330" fg:w="3"/><text x="99.8635%" y="815.50"></text></g><g><title>generate-forecast`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (3 samples, 0.02%)</title><rect x="99.6135%" y="789" width="0.0155%" height="15" fill="rgb(217,89,34)" fg:x="19330" fg:w="3"/><text x="99.8635%" y="799.50"></text></g><g><title>generate-forecast`mio::poll::SetReadiness::set_readiness (3 samples, 0.02%)</title><rect x="99.6135%" y="773" width="0.0155%" height="15" fill="rgb(229,13,5)" fg:x="19330" fg:w="3"/><text x="99.8635%" y="783.50"></text></g><g><title>generate-forecast`mio::poll::enqueue_with_wakeup (3 samples, 0.02%)</title><rect x="99.6135%" y="757" width="0.0155%" height="15" fill="rgb(244,67,35)" fg:x="19330" fg:w="3"/><text x="99.8635%" y="767.50"></text></g><g><title>generate-forecast`mio::sys::unix::awakener::pipe::Awakener::wakeup (3 samples, 0.02%)</title><rect x="99.6135%" y="741" width="0.0155%" height="15" fill="rgb(221,40,2)" fg:x="19330" fg:w="3"/><text x="99.8635%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.02%)</title><rect x="99.6135%" y="725" width="0.0155%" height="15" fill="rgb(237,157,21)" fg:x="19330" fg:w="3"/><text x="99.8635%" y="735.50"></text></g><g><title>generate-forecast`std::thread::local::LocalKey&lt;T&gt;::with (487 samples, 2.51%)</title><rect x="97.1245%" y="869" width="2.5097%" height="15" fill="rgb(222,94,11)" fg:x="18847" fg:w="487"/><text x="97.3745%" y="879.50">ge..</text></g><g><title>generate-forecast`tokio::runtime::thread_pool::idle::Idle::worker_to_notify (2 samples, 0.01%)</title><rect x="99.6393%" y="869" width="0.0103%" height="15" fill="rgb(249,113,6)" fg:x="19335" fg:w="2"/><text x="99.8893%" y="879.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (57 samples, 0.29%)</title><rect x="99.6496%" y="869" width="0.2937%" height="15" fill="rgb(238,137,36)" fg:x="19337" fg:w="57"/><text x="99.8996%" y="879.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Context::run_task (561 samples, 2.89%)</title><rect x="97.0575%" y="885" width="2.8910%" height="15" fill="rgb(210,102,26)" fg:x="18834" fg:w="561"/><text x="97.3075%" y="895.50">ge..</text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (2 samples, 0.01%)</title><rect x="99.9485%" y="885" width="0.0103%" height="15" fill="rgb(218,30,30)" fg:x="19395" fg:w="2"/><text x="100.1985%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (2 samples, 0.01%)</title><rect x="99.9588%" y="885" width="0.0103%" height="15" fill="rgb(214,67,26)" fg:x="19397" fg:w="2"/><text x="100.2088%" y="895.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Context::run (1,139 samples, 5.87%)</title><rect x="94.1098%" y="901" width="5.8696%" height="15" fill="rgb(251,9,53)" fg:x="18262" fg:w="1139"/><text x="94.3598%" y="911.50">generat..</text></g><g><title>generate-forecast`std::sys::unix::thread::Thread::new::thread_start (1,188 samples, 6.12%)</title><rect x="93.8676%" y="1061" width="6.1221%" height="15" fill="rgb(228,204,25)" fg:x="18215" fg:w="1188"/><text x="94.1176%" y="1071.50">generate..</text></g><g><title>generate-forecast`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,188 samples, 6.12%)</title><rect x="93.8676%" y="1045" width="6.1221%" height="15" fill="rgb(207,153,8)" fg:x="18215" fg:w="1188"/><text x="94.1176%" y="1055.50">generate..</text></g><g><title>generate-forecast`std::sys_common::backtrace::__rust_begin_short_backtrace (1,188 samples, 6.12%)</title><rect x="93.8676%" y="1029" width="6.1221%" height="15" fill="rgb(242,9,16)" fg:x="18215" fg:w="1188"/><text x="94.1176%" y="1039.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::context::enter (1,187 samples, 6.12%)</title><rect x="93.8727%" y="1013" width="6.1170%" height="15" fill="rgb(217,211,10)" fg:x="18216" fg:w="1187"/><text x="94.1227%" y="1023.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::blocking::pool::Inner::run (1,187 samples, 6.12%)</title><rect x="93.8727%" y="997" width="6.1170%" height="15" fill="rgb(219,228,52)" fg:x="18216" fg:w="1187"/><text x="94.1227%" y="1007.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,184 samples, 6.10%)</title><rect x="93.8882%" y="981" width="6.1015%" height="15" fill="rgb(231,92,29)" fg:x="18219" fg:w="1184"/><text x="94.1382%" y="991.50">generate..</text></g><g><title>generate-forecast`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,184 samples, 6.10%)</title><rect x="93.8882%" y="965" width="6.1015%" height="15" fill="rgb(232,8,23)" fg:x="18219" fg:w="1184"/><text x="94.1382%" y="975.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,184 samples, 6.10%)</title><rect x="93.8882%" y="949" width="6.1015%" height="15" fill="rgb(216,211,34)" fg:x="18219" fg:w="1184"/><text x="94.1382%" y="959.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::run (1,142 samples, 5.89%)</title><rect x="94.1046%" y="933" width="5.8851%" height="15" fill="rgb(236,151,0)" fg:x="18261" fg:w="1142"/><text x="94.3546%" y="943.50">generat..</text></g><g><title>generate-forecast`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,142 samples, 5.89%)</title><rect x="94.1046%" y="917" width="5.8851%" height="15" fill="rgb(209,168,3)" fg:x="18261" fg:w="1142"/><text x="94.3546%" y="927.50">generat..</text></g><g><title>all (19,405 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(208,129,28)" fg:x="0" fg:w="19405"/><text x="0.2500%" y="1119.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,190 samples, 6.13%)</title><rect x="93.8676%" y="1093" width="6.1324%" height="15" fill="rgb(229,78,22)" fg:x="18215" fg:w="1190"/><text x="94.1176%" y="1103.50">libsyste..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,190 samples, 6.13%)</title><rect x="93.8676%" y="1077" width="6.1324%" height="15" fill="rgb(228,187,13)" fg:x="18215" fg:w="1190"/><text x="94.1176%" y="1087.50">libsyste..</text></g></svg></svg>