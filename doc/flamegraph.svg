<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1141.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="16594"><g><title>generate-forecast`&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (30 samples, 0.18%)</title><rect x="0.0000%" y="917" width="0.1808%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="30"/><text x="0.2500%" y="927.50"></text></g><g><title>generate-forecast`tokio::park::thread::Inner::park (30 samples, 0.18%)</title><rect x="0.0000%" y="901" width="0.1808%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="30"/><text x="0.2500%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (28 samples, 0.17%)</title><rect x="0.0121%" y="885" width="0.1687%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="28"/><text x="0.2621%" y="895.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (16 samples, 0.10%)</title><rect x="1.1390%" y="805" width="0.0964%" height="15" fill="rgb(248,212,6)" fg:x="189" fg:w="16"/><text x="1.3890%" y="815.50"></text></g><g><title>generate-forecast`__rdl_realloc (28 samples, 0.17%)</title><rect x="7.0387%" y="773" width="0.1687%" height="15" fill="rgb(208,68,35)" fg:x="1168" fg:w="28"/><text x="7.2887%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.04%)</title><rect x="8.0873%" y="741" width="0.0362%" height="15" fill="rgb(232,128,0)" fg:x="1342" fg:w="6"/><text x="8.3373%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,077 samples, 6.49%)</title><rect x="7.7197%" y="757" width="6.4903%" height="15" fill="rgb(207,160,47)" fg:x="1281" fg:w="1077"/><text x="7.9697%" y="767.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,010 samples, 6.09%)</title><rect x="8.1234%" y="741" width="6.0865%" height="15" fill="rgb(228,23,34)" fg:x="1348" fg:w="1010"/><text x="8.3734%" y="751.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (333 samples, 2.01%)</title><rect x="12.2032%" y="725" width="2.0067%" height="15" fill="rgb(218,30,26)" fg:x="2025" fg:w="333"/><text x="12.4532%" y="735.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (53 samples, 0.32%)</title><rect x="13.8906%" y="709" width="0.3194%" height="15" fill="rgb(220,122,19)" fg:x="2305" fg:w="53"/><text x="14.1406%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,164 samples, 7.01%)</title><rect x="7.2074%" y="773" width="7.0146%" height="15" fill="rgb(250,228,42)" fg:x="1196" fg:w="1164"/><text x="7.4574%" y="783.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="14.2100%" y="757" width="0.0121%" height="15" fill="rgb(240,193,28)" fg:x="2358" fg:w="2"/><text x="14.4600%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (16 samples, 0.10%)</title><rect x="14.2220%" y="773" width="0.0964%" height="15" fill="rgb(216,20,37)" fg:x="2360" fg:w="16"/><text x="14.4720%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.07%)</title><rect x="14.3184%" y="773" width="0.0663%" height="15" fill="rgb(206,188,39)" fg:x="2376" fg:w="11"/><text x="14.5684%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (22 samples, 0.13%)</title><rect x="15.0356%" y="757" width="0.1326%" height="15" fill="rgb(217,207,13)" fg:x="2495" fg:w="22"/><text x="15.2856%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (12 samples, 0.07%)</title><rect x="15.6984%" y="741" width="0.0723%" height="15" fill="rgb(231,73,38)" fg:x="2605" fg:w="12"/><text x="15.9484%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (198 samples, 1.19%)</title><rect x="16.1745%" y="725" width="1.1932%" height="15" fill="rgb(225,20,46)" fg:x="2684" fg:w="198"/><text x="16.4245%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (165 samples, 0.99%)</title><rect x="16.3734%" y="709" width="0.9943%" height="15" fill="rgb(210,31,41)" fg:x="2717" fg:w="165"/><text x="16.6234%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (266 samples, 1.60%)</title><rect x="15.7708%" y="741" width="1.6030%" height="15" fill="rgb(221,200,47)" fg:x="2617" fg:w="266"/><text x="16.0208%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (372 samples, 2.24%)</title><rect x="15.1681%" y="757" width="2.2418%" height="15" fill="rgb(226,26,5)" fg:x="2517" fg:w="372"/><text x="15.4181%" y="767.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.04%)</title><rect x="17.3737%" y="741" width="0.0362%" height="15" fill="rgb(249,33,26)" fg:x="2883" fg:w="6"/><text x="17.6237%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.02%)</title><rect x="17.4099%" y="757" width="0.0241%" height="15" fill="rgb(235,183,28)" fg:x="2889" fg:w="4"/><text x="17.6599%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (206 samples, 1.24%)</title><rect x="17.4340%" y="757" width="1.2414%" height="15" fill="rgb(221,5,38)" fg:x="2893" fg:w="206"/><text x="17.6840%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (181 samples, 1.09%)</title><rect x="17.5847%" y="741" width="1.0908%" height="15" fill="rgb(247,18,42)" fg:x="2918" fg:w="181"/><text x="17.8347%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`realloc (722 samples, 4.35%)</title><rect x="14.3847%" y="773" width="4.3510%" height="15" fill="rgb(241,131,45)" fg:x="2387" fg:w="722"/><text x="14.6347%" y="783.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.06%)</title><rect x="18.6754%" y="757" width="0.0603%" height="15" fill="rgb(249,31,29)" fg:x="3099" fg:w="10"/><text x="18.9254%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.12%)</title><rect x="18.7417%" y="773" width="0.1205%" height="15" fill="rgb(225,111,53)" fg:x="3110" fg:w="20"/><text x="18.9917%" y="783.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2,375 samples, 14.31%)</title><rect x="4.6222%" y="789" width="14.3124%" height="15" fill="rgb(238,160,17)" fg:x="767" fg:w="2375"/><text x="4.8722%" y="799.50">generate-forecast`&lt;all..</text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.07%)</title><rect x="18.8622%" y="773" width="0.0723%" height="15" fill="rgb(214,148,48)" fg:x="3130" fg:w="12"/><text x="19.1122%" y="783.50"></text></g><g><title>generate-forecast`__rdl_alloc (19 samples, 0.11%)</title><rect x="18.9346%" y="789" width="0.1145%" height="15" fill="rgb(232,36,49)" fg:x="3142" fg:w="19"/><text x="19.1846%" y="799.50"></text></g><g><title>generate-forecast`__rdl_realloc (11 samples, 0.07%)</title><rect x="19.0491%" y="789" width="0.0663%" height="15" fill="rgb(209,103,24)" fg:x="3161" fg:w="11"/><text x="19.2991%" y="799.50"></text></g><g><title>generate-forecast`&lt;&amp;T as core::fmt::Binary&gt;::fmt (10 samples, 0.06%)</title><rect x="19.9108%" y="773" width="0.0603%" height="15" fill="rgb(229,88,8)" fg:x="3304" fg:w="10"/><text x="20.1608%" y="783.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (15 samples, 0.09%)</title><rect x="19.9711%" y="773" width="0.0904%" height="15" fill="rgb(213,181,19)" fg:x="3314" fg:w="15"/><text x="20.2211%" y="783.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (10 samples, 0.06%)</title><rect x="20.0615%" y="773" width="0.0603%" height="15" fill="rgb(254,191,54)" fg:x="3329" fg:w="10"/><text x="20.3115%" y="783.50"></text></g><g><title>generate-forecast`&lt;&amp;T as core::fmt::Binary&gt;::fmt (10 samples, 0.06%)</title><rect x="21.0739%" y="757" width="0.0603%" height="15" fill="rgb(241,83,37)" fg:x="3497" fg:w="10"/><text x="21.3239%" y="767.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (111 samples, 0.67%)</title><rect x="21.1341%" y="757" width="0.6689%" height="15" fill="rgb(233,36,39)" fg:x="3507" fg:w="111"/><text x="21.3841%" y="767.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (46 samples, 0.28%)</title><rect x="21.5259%" y="741" width="0.2772%" height="15" fill="rgb(226,3,54)" fg:x="3572" fg:w="46"/><text x="21.7759%" y="751.50"></text></g><g><title>generate-forecast`DYLD-STUB$$memcpy (4 samples, 0.02%)</title><rect x="21.8031%" y="757" width="0.0241%" height="15" fill="rgb(245,192,40)" fg:x="3618" fg:w="4"/><text x="22.0531%" y="767.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (19 samples, 0.11%)</title><rect x="21.8272%" y="757" width="0.1145%" height="15" fill="rgb(238,167,29)" fg:x="3622" fg:w="19"/><text x="22.0772%" y="767.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (9 samples, 0.05%)</title><rect x="23.0384%" y="741" width="0.0542%" height="15" fill="rgb(232,182,51)" fg:x="3823" fg:w="9"/><text x="23.2884%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (423 samples, 2.55%)</title><rect x="23.7375%" y="709" width="2.5491%" height="15" fill="rgb(231,60,39)" fg:x="3939" fg:w="423"/><text x="23.9875%" y="719.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (395 samples, 2.38%)</title><rect x="23.9062%" y="693" width="2.3804%" height="15" fill="rgb(208,69,12)" fg:x="3967" fg:w="395"/><text x="24.1562%" y="703.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (481 samples, 2.90%)</title><rect x="23.4000%" y="725" width="2.8986%" height="15" fill="rgb(235,93,37)" fg:x="3883" fg:w="481"/><text x="23.6500%" y="735.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="26.2866%" y="709" width="0.0121%" height="15" fill="rgb(213,116,39)" fg:x="4362" fg:w="2"/><text x="26.5366%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.04%)</title><rect x="26.2987%" y="725" width="0.0422%" height="15" fill="rgb(222,207,29)" fg:x="4364" fg:w="7"/><text x="26.5487%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (3 samples, 0.02%)</title><rect x="26.3408%" y="725" width="0.0181%" height="15" fill="rgb(206,96,30)" fg:x="4371" fg:w="3"/><text x="26.5908%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.05%)</title><rect x="26.3589%" y="725" width="0.0482%" height="15" fill="rgb(218,138,4)" fg:x="4374" fg:w="8"/><text x="26.6089%" y="735.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (561 samples, 3.38%)</title><rect x="23.0927%" y="741" width="3.3807%" height="15" fill="rgb(250,191,14)" fg:x="3832" fg:w="561"/><text x="23.3427%" y="751.50">gen..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.07%)</title><rect x="26.4071%" y="725" width="0.0663%" height="15" fill="rgb(239,60,40)" fg:x="4382" fg:w="11"/><text x="26.6571%" y="735.50"></text></g><g><title>generate-forecast`__rdl_alloc (11 samples, 0.07%)</title><rect x="26.4734%" y="741" width="0.0663%" height="15" fill="rgb(206,27,48)" fg:x="4393" fg:w="11"/><text x="26.7234%" y="751.50"></text></g><g><title>generate-forecast`__rust_alloc (2 samples, 0.01%)</title><rect x="26.5397%" y="741" width="0.0121%" height="15" fill="rgb(225,35,8)" fg:x="4404" fg:w="2"/><text x="26.7897%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (214 samples, 1.29%)</title><rect x="26.5518%" y="741" width="1.2896%" height="15" fill="rgb(250,213,24)" fg:x="4406" fg:w="214"/><text x="26.8018%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral::write_prefix (8 samples, 0.05%)</title><rect x="27.8414%" y="741" width="0.0482%" height="15" fill="rgb(247,123,22)" fg:x="4620" fg:w="8"/><text x="28.0914%" y="751.50"></text></g><g><title>generate-forecast`__rdl_alloc (7 samples, 0.04%)</title><rect x="27.8896%" y="709" width="0.0422%" height="15" fill="rgb(231,138,38)" fg:x="4628" fg:w="7"/><text x="28.1396%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (419 samples, 2.53%)</title><rect x="28.5404%" y="677" width="2.5250%" height="15" fill="rgb(231,145,46)" fg:x="4736" fg:w="419"/><text x="28.7904%" y="687.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (394 samples, 2.37%)</title><rect x="28.6911%" y="661" width="2.3744%" height="15" fill="rgb(251,118,11)" fg:x="4761" fg:w="394"/><text x="28.9411%" y="671.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (457 samples, 2.75%)</title><rect x="28.3175%" y="693" width="2.7540%" height="15" fill="rgb(217,147,25)" fg:x="4699" fg:w="457"/><text x="28.5675%" y="703.50">li..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.05%)</title><rect x="31.0715%" y="693" width="0.0542%" height="15" fill="rgb(247,81,37)" fg:x="5156" fg:w="9"/><text x="31.3215%" y="703.50"></text></g><g><title>generate-forecast`alloc::string::String::push (536 samples, 3.23%)</title><rect x="27.9318%" y="709" width="3.2301%" height="15" fill="rgb(209,12,38)" fg:x="4635" fg:w="536"/><text x="28.1818%" y="719.50">gen..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.04%)</title><rect x="31.1257%" y="693" width="0.0362%" height="15" fill="rgb(227,1,9)" fg:x="5165" fg:w="6"/><text x="31.3757%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="31.1619%" y="709" width="0.0362%" height="15" fill="rgb(248,47,43)" fg:x="5171" fg:w="6"/><text x="31.4119%" y="719.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (551 samples, 3.32%)</title><rect x="27.8896%" y="725" width="3.3205%" height="15" fill="rgb(221,10,30)" fg:x="4628" fg:w="551"/><text x="28.1396%" y="735.50">gen..</text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="31.1980%" y="709" width="0.0121%" height="15" fill="rgb(210,229,1)" fg:x="5177" fg:w="2"/><text x="31.4480%" y="719.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (67 samples, 0.40%)</title><rect x="31.2101%" y="725" width="0.4038%" height="15" fill="rgb(222,148,37)" fg:x="5179" fg:w="67"/><text x="31.4601%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (37 samples, 0.22%)</title><rect x="31.3909%" y="709" width="0.2230%" height="15" fill="rgb(234,67,33)" fg:x="5209" fg:w="37"/><text x="31.6409%" y="719.50"></text></g><g><title>generate-forecast`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="31.6138%" y="725" width="0.0181%" height="15" fill="rgb(247,98,35)" fg:x="5246" fg:w="3"/><text x="31.8638%" y="735.50"></text></g><g><title>generate-forecast`alloc::string::String::push (19 samples, 0.11%)</title><rect x="31.6319%" y="725" width="0.1145%" height="15" fill="rgb(247,138,52)" fg:x="5249" fg:w="19"/><text x="31.8819%" y="735.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral::write_prefix (33 samples, 0.20%)</title><rect x="31.7464%" y="725" width="0.1989%" height="15" fill="rgb(213,79,30)" fg:x="5268" fg:w="33"/><text x="31.9964%" y="735.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (686 samples, 4.13%)</title><rect x="27.8896%" y="741" width="4.1340%" height="15" fill="rgb(246,177,23)" fg:x="4628" fg:w="686"/><text x="28.1396%" y="751.50">gener..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.08%)</title><rect x="31.9453%" y="725" width="0.0783%" height="15" fill="rgb(230,62,27)" fg:x="5301" fg:w="13"/><text x="32.1953%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.04%)</title><rect x="32.0236%" y="741" width="0.0422%" height="15" fill="rgb(216,154,8)" fg:x="5314" fg:w="7"/><text x="32.2736%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.02%)</title><rect x="32.0658%" y="741" width="0.0241%" height="15" fill="rgb(244,35,45)" fg:x="5321" fg:w="4"/><text x="32.3158%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (1,687 samples, 10.17%)</title><rect x="21.9417%" y="757" width="10.1663%" height="15" fill="rgb(251,115,12)" fg:x="3641" fg:w="1687"/><text x="22.1917%" y="767.50">generate-foreca..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="32.0899%" y="741" width="0.0181%" height="15" fill="rgb(240,54,50)" fg:x="5325" fg:w="3"/><text x="32.3399%" y="751.50"></text></g><g><title>generate-forecast`alloc::fmt::format (2,166 samples, 13.05%)</title><rect x="19.1153%" y="789" width="13.0529%" height="15" fill="rgb(233,84,52)" fg:x="3172" fg:w="2166"/><text x="19.3653%" y="799.50">generate-forecast`al..</text></g><g><title>generate-forecast`core::fmt::write (1,999 samples, 12.05%)</title><rect x="20.1217%" y="773" width="12.0465%" height="15" fill="rgb(207,117,47)" fg:x="3339" fg:w="1999"/><text x="20.3717%" y="783.50">generate-forecast`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.06%)</title><rect x="32.1080%" y="757" width="0.0603%" height="15" fill="rgb(249,43,39)" fg:x="5328" fg:w="10"/><text x="32.3580%" y="767.50"></text></g><g><title>generate-forecast`core::fmt::write (9 samples, 0.05%)</title><rect x="32.1683%" y="789" width="0.0542%" height="15" fill="rgb(209,38,44)" fg:x="5338" fg:w="9"/><text x="32.4183%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="32.2225%" y="789" width="0.0362%" height="15" fill="rgb(236,212,23)" fg:x="5347" fg:w="6"/><text x="32.4725%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (444 samples, 2.68%)</title><rect x="33.6507%" y="773" width="2.6757%" height="15" fill="rgb(242,79,21)" fg:x="5584" fg:w="444"/><text x="33.9007%" y="783.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_size (389 samples, 2.34%)</title><rect x="33.9822%" y="757" width="2.3442%" height="15" fill="rgb(211,96,35)" fg:x="5639" fg:w="389"/><text x="34.2322%" y="767.50">l..</text></g><g><title>libsystem_malloc.dylib`free (695 samples, 4.19%)</title><rect x="32.2586%" y="789" width="4.1883%" height="15" fill="rgb(253,215,40)" fg:x="5353" fg:w="695"/><text x="32.5086%" y="799.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_size (20 samples, 0.12%)</title><rect x="36.3264%" y="773" width="0.1205%" height="15" fill="rgb(211,81,21)" fg:x="6028" fg:w="20"/><text x="36.5764%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.03%)</title><rect x="41.2077%" y="773" width="0.0301%" height="15" fill="rgb(208,190,38)" fg:x="6838" fg:w="5"/><text x="41.4577%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (282 samples, 1.70%)</title><rect x="44.1184%" y="757" width="1.6994%" height="15" fill="rgb(235,213,38)" fg:x="7321" fg:w="282"/><text x="44.3684%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,623 samples, 9.78%)</title><rect x="36.4469%" y="789" width="9.7806%" height="15" fill="rgb(237,122,38)" fg:x="6048" fg:w="1623"/><text x="36.6969%" y="799.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (827 samples, 4.98%)</title><rect x="41.2438%" y="773" width="4.9837%" height="15" fill="rgb(244,218,35)" fg:x="6844" fg:w="827"/><text x="41.4938%" y="783.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (68 samples, 0.41%)</title><rect x="45.8178%" y="757" width="0.4098%" height="15" fill="rgb(240,68,47)" fg:x="7603" fg:w="68"/><text x="46.0678%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.02%)</title><rect x="46.2276%" y="789" width="0.0241%" height="15" fill="rgb(210,16,53)" fg:x="7671" fg:w="4"/><text x="46.4776%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.08%)</title><rect x="46.2517%" y="789" width="0.0783%" height="15" fill="rgb(235,124,12)" fg:x="7675" fg:w="13"/><text x="46.5017%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.19%)</title><rect x="46.3300%" y="789" width="0.1928%" height="15" fill="rgb(224,169,11)" fg:x="7688" fg:w="32"/><text x="46.5800%" y="799.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,523 samples, 45.34%)</title><rect x="1.2354%" y="805" width="45.3357%" height="15" fill="rgb(250,166,2)" fg:x="205" fg:w="7523"/><text x="1.4854%" y="815.50">generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.05%)</title><rect x="46.5228%" y="789" width="0.0482%" height="15" fill="rgb(242,216,29)" fg:x="7720" fg:w="8"/><text x="46.7728%" y="799.50"></text></g><g><title>generate-forecast`__rdl_dealloc (28 samples, 0.17%)</title><rect x="46.5710%" y="805" width="0.1687%" height="15" fill="rgb(230,116,27)" fg:x="7728" fg:w="28"/><text x="46.8210%" y="815.50"></text></g><g><title>generate-forecast`__rust_dealloc (13 samples, 0.08%)</title><rect x="46.7398%" y="805" width="0.0783%" height="15" fill="rgb(228,99,48)" fg:x="7756" fg:w="13"/><text x="46.9898%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (41 samples, 0.25%)</title><rect x="46.8242%" y="805" width="0.2471%" height="15" fill="rgb(253,11,6)" fg:x="7770" fg:w="41"/><text x="47.0742%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.10%)</title><rect x="47.0712%" y="805" width="0.0964%" height="15" fill="rgb(247,143,39)" fg:x="7811" fg:w="16"/><text x="47.3212%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.09%)</title><rect x="47.1677%" y="805" width="0.0904%" height="15" fill="rgb(236,97,10)" fg:x="7827" fg:w="15"/><text x="47.4177%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="47.2822%" y="757" width="0.0121%" height="15" fill="rgb(233,208,19)" fg:x="7846" fg:w="2"/><text x="47.5322%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2 samples, 0.01%)</title><rect x="47.2822%" y="741" width="0.0121%" height="15" fill="rgb(216,164,2)" fg:x="7846" fg:w="2"/><text x="47.5322%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (17 samples, 0.10%)</title><rect x="47.2580%" y="789" width="0.1024%" height="15" fill="rgb(220,129,5)" fg:x="7842" fg:w="17"/><text x="47.5080%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (17 samples, 0.10%)</title><rect x="47.2580%" y="773" width="0.1024%" height="15" fill="rgb(242,17,10)" fg:x="7842" fg:w="17"/><text x="47.5080%" y="783.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.06%)</title><rect x="47.3002%" y="757" width="0.0603%" height="15" fill="rgb(242,107,0)" fg:x="7849" fg:w="10"/><text x="47.5502%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.11%)</title><rect x="47.2580%" y="805" width="0.1085%" height="15" fill="rgb(251,28,31)" fg:x="7842" fg:w="18"/><text x="47.5080%" y="815.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (7,893 samples, 47.57%)</title><rect x="0.1928%" y="821" width="47.5654%" height="15" fill="rgb(233,223,10)" fg:x="32" fg:w="7893"/><text x="0.4428%" y="831.50">generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_it..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (65 samples, 0.39%)</title><rect x="47.3665%" y="805" width="0.3917%" height="15" fill="rgb(215,21,27)" fg:x="7860" fg:w="65"/><text x="47.6165%" y="815.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.30%)</title><rect x="47.7582%" y="821" width="0.3013%" height="15" fill="rgb(232,23,21)" fg:x="7925" fg:w="50"/><text x="48.0082%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (2 samples, 0.01%)</title><rect x="48.2885%" y="725" width="0.0121%" height="15" fill="rgb(244,5,23)" fg:x="8013" fg:w="2"/><text x="48.5385%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="48.3006%" y="725" width="0.0181%" height="15" fill="rgb(226,81,46)" fg:x="8015" fg:w="3"/><text x="48.5506%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.01%)</title><rect x="48.3066%" y="709" width="0.0121%" height="15" fill="rgb(247,70,30)" fg:x="8016" fg:w="2"/><text x="48.5566%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.01%)</title><rect x="48.3066%" y="693" width="0.0121%" height="15" fill="rgb(212,68,19)" fg:x="8016" fg:w="2"/><text x="48.5566%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.06%)</title><rect x="48.2885%" y="741" width="0.0603%" height="15" fill="rgb(240,187,13)" fg:x="8013" fg:w="10"/><text x="48.5385%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="48.3187%" y="725" width="0.0301%" height="15" fill="rgb(223,113,26)" fg:x="8018" fg:w="5"/><text x="48.5687%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.07%)</title><rect x="48.2885%" y="773" width="0.0663%" height="15" fill="rgb(206,192,2)" fg:x="8013" fg:w="11"/><text x="48.5385%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.07%)</title><rect x="48.2885%" y="757" width="0.0663%" height="15" fill="rgb(241,108,4)" fg:x="8013" fg:w="11"/><text x="48.5385%" y="767.50"></text></g><g><title>generate-forecast`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.08%)</title><rect x="48.2825%" y="789" width="0.0783%" height="15" fill="rgb(247,173,49)" fg:x="8012" fg:w="13"/><text x="48.5325%" y="799.50"></text></g><g><title>generate-forecast`opj_j2k_create_decompress (4 samples, 0.02%)</title><rect x="48.3609%" y="773" width="0.0241%" height="15" fill="rgb(224,114,35)" fg:x="8025" fg:w="4"/><text x="48.6109%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="48.3669%" y="757" width="0.0181%" height="15" fill="rgb(245,159,27)" fg:x="8026" fg:w="3"/><text x="48.6169%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="48.3669%" y="741" width="0.0181%" height="15" fill="rgb(245,172,44)" fg:x="8026" fg:w="3"/><text x="48.6169%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.02%)</title><rect x="48.3669%" y="725" width="0.0181%" height="15" fill="rgb(236,23,11)" fg:x="8026" fg:w="3"/><text x="48.6169%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="48.3729%" y="709" width="0.0121%" height="15" fill="rgb(205,117,38)" fg:x="8027" fg:w="2"/><text x="48.6229%" y="719.50"></text></g><g><title>generate-forecast`opj_create_decompress (5 samples, 0.03%)</title><rect x="48.3609%" y="789" width="0.0301%" height="15" fill="rgb(237,72,25)" fg:x="8025" fg:w="5"/><text x="48.6109%" y="799.50"></text></g><g><title>generate-forecast`opj_image_destroy (2 samples, 0.01%)</title><rect x="48.3970%" y="757" width="0.0121%" height="15" fill="rgb(244,70,9)" fg:x="8031" fg:w="2"/><text x="48.6470%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="48.3970%" y="741" width="0.0121%" height="15" fill="rgb(217,125,39)" fg:x="8031" fg:w="2"/><text x="48.6470%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="48.3970%" y="725" width="0.0121%" height="15" fill="rgb(235,36,10)" fg:x="8031" fg:w="2"/><text x="48.6470%" y="735.50"></text></g><g><title>generate-forecast`opj_aligned_free (2 samples, 0.01%)</title><rect x="48.4211%" y="741" width="0.0121%" height="15" fill="rgb(251,123,47)" fg:x="8035" fg:w="2"/><text x="48.6711%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.04%)</title><rect x="48.4693%" y="709" width="0.0362%" height="15" fill="rgb(221,13,13)" fg:x="8043" fg:w="6"/><text x="48.7193%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.03%)</title><rect x="48.4754%" y="693" width="0.0301%" height="15" fill="rgb(238,131,9)" fg:x="8044" fg:w="5"/><text x="48.7254%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.07%)</title><rect x="48.4452%" y="725" width="0.0723%" height="15" fill="rgb(211,50,8)" fg:x="8039" fg:w="12"/><text x="48.6952%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="48.5055%" y="709" width="0.0121%" height="15" fill="rgb(245,182,24)" fg:x="8049" fg:w="2"/><text x="48.7555%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.05%)</title><rect x="48.7104%" y="693" width="0.0542%" height="15" fill="rgb(242,14,37)" fg:x="8083" fg:w="9"/><text x="48.9604%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (46 samples, 0.28%)</title><rect x="48.5236%" y="725" width="0.2772%" height="15" fill="rgb(246,228,12)" fg:x="8052" fg:w="46"/><text x="48.7736%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.19%)</title><rect x="48.6140%" y="709" width="0.1868%" height="15" fill="rgb(213,55,15)" fg:x="8067" fg:w="31"/><text x="48.8640%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.04%)</title><rect x="48.7646%" y="693" width="0.0362%" height="15" fill="rgb(209,9,3)" fg:x="8092" fg:w="6"/><text x="49.0146%" y="703.50"></text></g><g><title>generate-forecast`opj_tcd_code_block_dec_deallocate (61 samples, 0.37%)</title><rect x="48.4392%" y="741" width="0.3676%" height="15" fill="rgb(230,59,30)" fg:x="8038" fg:w="61"/><text x="48.6892%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="48.8128%" y="741" width="0.0121%" height="15" fill="rgb(209,121,21)" fg:x="8100" fg:w="2"/><text x="49.0628%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="48.8128%" y="725" width="0.0121%" height="15" fill="rgb(220,109,13)" fg:x="8100" fg:w="2"/><text x="49.0628%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="48.8128%" y="709" width="0.0121%" height="15" fill="rgb(232,18,1)" fg:x="8100" fg:w="2"/><text x="49.0628%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="48.8249%" y="741" width="0.0121%" height="15" fill="rgb(215,41,42)" fg:x="8102" fg:w="2"/><text x="49.0749%" y="751.50"></text></g><g><title>generate-forecast`opj_tcd_destroy (71 samples, 0.43%)</title><rect x="48.4151%" y="757" width="0.4279%" height="15" fill="rgb(224,123,36)" fg:x="8034" fg:w="71"/><text x="48.6651%" y="767.50"></text></g><g><title>generate-forecast`opj_thread_pool_destroy (2 samples, 0.01%)</title><rect x="48.8430%" y="757" width="0.0121%" height="15" fill="rgb(240,125,3)" fg:x="8105" fg:w="2"/><text x="49.0930%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="48.8430%" y="741" width="0.0121%" height="15" fill="rgb(205,98,50)" fg:x="8105" fg:w="2"/><text x="49.0930%" y="751.50"></text></g><g><title>generate-forecast`opj_destroy_codec (78 samples, 0.47%)</title><rect x="48.3910%" y="789" width="0.4700%" height="15" fill="rgb(205,185,37)" fg:x="8030" fg:w="78"/><text x="48.6410%" y="799.50"></text></g><g><title>generate-forecast`opj_j2k_destroy (78 samples, 0.47%)</title><rect x="48.3910%" y="773" width="0.4700%" height="15" fill="rgb(238,207,15)" fg:x="8030" fg:w="78"/><text x="48.6410%" y="783.50"></text></g><g><title>generate-forecast`opj_image_destroy (2 samples, 0.01%)</title><rect x="48.8610%" y="789" width="0.0121%" height="15" fill="rgb(213,199,42)" fg:x="8108" fg:w="2"/><text x="49.1110%" y="799.50"></text></g><g><title>generate-forecast`opj_idwt53_h (19 samples, 0.11%)</title><rect x="48.9575%" y="693" width="0.1145%" height="15" fill="rgb(235,201,11)" fg:x="8124" fg:w="19"/><text x="49.2075%" y="703.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.04%)</title><rect x="49.0298%" y="677" width="0.0422%" height="15" fill="rgb(207,46,11)" fg:x="8136" fg:w="7"/><text x="49.2798%" y="687.50"></text></g><g><title>generate-forecast`opj_idwt53_v (18 samples, 0.11%)</title><rect x="49.0720%" y="693" width="0.1085%" height="15" fill="rgb(241,35,35)" fg:x="8143" fg:w="18"/><text x="49.3220%" y="703.50"></text></g><g><title>generate-forecast`opj_dwt_decode (50 samples, 0.30%)</title><rect x="48.8972%" y="709" width="0.3013%" height="15" fill="rgb(243,32,47)" fg:x="8114" fg:w="50"/><text x="49.1472%" y="719.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="49.1804%" y="693" width="0.0181%" height="15" fill="rgb(247,202,23)" fg:x="8161" fg:w="3"/><text x="49.4304%" y="703.50"></text></g><g><title>generate-forecast`opj_tcd_is_subband_area_of_interest (14 samples, 0.08%)</title><rect x="49.2527%" y="693" width="0.0844%" height="15" fill="rgb(219,102,11)" fg:x="8173" fg:w="14"/><text x="49.5027%" y="703.50"></text></g><g><title>generate-forecast`opj_mqc_init_dec (2 samples, 0.01%)</title><rect x="61.5463%" y="661" width="0.0121%" height="15" fill="rgb(243,110,44)" fg:x="10213" fg:w="2"/><text x="61.7963%" y="671.50"></text></g><g><title>generate-forecast`opj_t1_allocate_buffers (24 samples, 0.14%)</title><rect x="61.5644%" y="661" width="0.1446%" height="15" fill="rgb(222,74,54)" fg:x="10216" fg:w="24"/><text x="61.8144%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (15 samples, 0.09%)</title><rect x="61.6187%" y="645" width="0.0904%" height="15" fill="rgb(216,99,12)" fg:x="10225" fg:w="15"/><text x="61.8687%" y="655.50"></text></g><g><title>generate-forecast`opj_t1_dec_clnpass (1,939 samples, 11.68%)</title><rect x="61.7091%" y="661" width="11.6849%" height="15" fill="rgb(226,22,26)" fg:x="10240" fg:w="1939"/><text x="61.9591%" y="671.50">generate-forecast..</text></g><g><title>generate-forecast`opj_t1_dec_clnpass_step (1,262 samples, 7.61%)</title><rect x="65.7888%" y="645" width="7.6052%" height="15" fill="rgb(217,163,10)" fg:x="10917" fg:w="1262"/><text x="66.0388%" y="655.50">generate-f..</text></g><g><title>generate-forecast`opj_t1_dec_clnpass_step (71 samples, 0.43%)</title><rect x="73.3940%" y="661" width="0.4279%" height="15" fill="rgb(213,25,53)" fg:x="12179" fg:w="71"/><text x="73.6440%" y="671.50"></text></g><g><title>generate-forecast`opj_t1_dec_sigpass_mqc (2,016 samples, 12.15%)</title><rect x="73.8219%" y="661" width="12.1490%" height="15" fill="rgb(252,105,26)" fg:x="12250" fg:w="2016"/><text x="74.0719%" y="671.50">generate-forecast`..</text></g><g><title>generate-forecast`opj_t1_dec_sigpass_step_mqc (1,331 samples, 8.02%)</title><rect x="77.9499%" y="645" width="8.0210%" height="15" fill="rgb(220,39,43)" fg:x="12935" fg:w="1331"/><text x="78.1999%" y="655.50">generate-fo..</text></g><g><title>generate-forecast`opj_t1_dec_sigpass_step_mqc (29 samples, 0.17%)</title><rect x="85.9708%" y="661" width="0.1748%" height="15" fill="rgb(229,68,48)" fg:x="14266" fg:w="29"/><text x="86.2208%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.07%)</title><rect x="86.1516%" y="661" width="0.0723%" height="15" fill="rgb(252,8,32)" fg:x="14296" fg:w="12"/><text x="86.4016%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.07%)</title><rect x="86.1576%" y="645" width="0.0663%" height="15" fill="rgb(223,20,43)" fg:x="14297" fg:w="11"/><text x="86.4076%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.06%)</title><rect x="86.1637%" y="629" width="0.0603%" height="15" fill="rgb(229,81,49)" fg:x="14298" fg:w="10"/><text x="86.4137%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="86.2239%" y="661" width="0.0121%" height="15" fill="rgb(236,28,36)" fg:x="14308" fg:w="2"/><text x="86.4739%" y="671.50"></text></g><g><title>generate-forecast`opj_t1_clbl_decode_processor (6,120 samples, 36.88%)</title><rect x="49.3612%" y="677" width="36.8808%" height="15" fill="rgb(249,185,26)" fg:x="8191" fg:w="6120"/><text x="49.6112%" y="687.50">generate-forecast`opj_t1_clbl_decode_processor</text></g><g><title>generate-forecast`opj_t1_dec_clnpass (8 samples, 0.05%)</title><rect x="86.2420%" y="677" width="0.0482%" height="15" fill="rgb(249,174,33)" fg:x="14311" fg:w="8"/><text x="86.4920%" y="687.50"></text></g><g><title>generate-forecast`opj_t1_dec_sigpass_mqc (3 samples, 0.02%)</title><rect x="86.2902%" y="677" width="0.0181%" height="15" fill="rgb(233,201,37)" fg:x="14319" fg:w="3"/><text x="86.5402%" y="687.50"></text></g><g><title>generate-forecast`opj_thread_pool_submit_job (6,140 samples, 37.00%)</title><rect x="49.3431%" y="693" width="37.0013%" height="15" fill="rgb(221,78,26)" fg:x="8188" fg:w="6140"/><text x="49.5931%" y="703.50">generate-forecast`opj_thread_pool_submit_job</text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="86.3204%" y="677" width="0.0241%" height="15" fill="rgb(250,127,30)" fg:x="14324" fg:w="4"/><text x="86.5704%" y="687.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (11 samples, 0.07%)</title><rect x="86.4710%" y="645" width="0.0663%" height="15" fill="rgb(230,49,44)" fg:x="14349" fg:w="11"/><text x="86.7210%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (33 samples, 0.20%)</title><rect x="86.3445%" y="693" width="0.1989%" height="15" fill="rgb(229,67,23)" fg:x="14328" fg:w="33"/><text x="86.5945%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (31 samples, 0.19%)</title><rect x="86.3565%" y="677" width="0.1868%" height="15" fill="rgb(249,83,47)" fg:x="14330" fg:w="31"/><text x="86.6065%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.17%)</title><rect x="86.3686%" y="661" width="0.1748%" height="15" fill="rgb(215,43,3)" fg:x="14332" fg:w="29"/><text x="86.6186%" y="671.50"></text></g><g><title>generate-forecast`opj_t1_decode_cblks (6,196 samples, 37.34%)</title><rect x="49.2106%" y="709" width="37.3388%" height="15" fill="rgb(238,154,13)" fg:x="8166" fg:w="6196"/><text x="49.4606%" y="719.50">generate-forecast`opj_t1_decode_cblks</text></g><g><title>generate-forecast`opj_bio_read (3 samples, 0.02%)</title><rect x="86.5614%" y="693" width="0.0181%" height="15" fill="rgb(219,56,2)" fg:x="14364" fg:w="3"/><text x="86.8114%" y="703.50"></text></g><g><title>generate-forecast`opj_bio_read (20 samples, 0.12%)</title><rect x="86.6518%" y="677" width="0.1205%" height="15" fill="rgb(233,0,4)" fg:x="14379" fg:w="20"/><text x="86.9018%" y="687.50"></text></g><g><title>generate-forecast`opj_t2_read_packet_header (121 samples, 0.73%)</title><rect x="86.5795%" y="693" width="0.7292%" height="15" fill="rgb(235,30,7)" fg:x="14367" fg:w="121"/><text x="86.8295%" y="703.50"></text></g><g><title>generate-forecast`opj_tgt_decode (89 samples, 0.54%)</title><rect x="86.7723%" y="677" width="0.5363%" height="15" fill="rgb(250,79,13)" fg:x="14399" fg:w="89"/><text x="87.0223%" y="687.50"></text></g><g><title>generate-forecast`opj_bio_read (2 samples, 0.01%)</title><rect x="87.2966%" y="661" width="0.0121%" height="15" fill="rgb(211,146,34)" fg:x="14486" fg:w="2"/><text x="87.5466%" y="671.50"></text></g><g><title>generate-forecast`opj_j2k_decode_tile (6,398 samples, 38.56%)</title><rect x="48.8731%" y="741" width="38.5561%" height="15" fill="rgb(228,22,38)" fg:x="8110" fg:w="6398"/><text x="49.1231%" y="751.50">generate-forecast`opj_j2k_decode_tile</text></g><g><title>generate-forecast`opj_tcd_decode_tile (6,398 samples, 38.56%)</title><rect x="48.8731%" y="725" width="38.5561%" height="15" fill="rgb(235,168,5)" fg:x="8110" fg:w="6398"/><text x="49.1231%" y="735.50">generate-forecast`opj_tcd_decode_tile</text></g><g><title>generate-forecast`opj_t2_decode_packets (146 samples, 0.88%)</title><rect x="86.5494%" y="709" width="0.8798%" height="15" fill="rgb(221,155,16)" fg:x="14362" fg:w="146"/><text x="86.7994%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`realloc (20 samples, 0.12%)</title><rect x="87.3087%" y="693" width="0.1205%" height="15" fill="rgb(215,215,53)" fg:x="14488" fg:w="20"/><text x="87.5587%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.12%)</title><rect x="87.3087%" y="677" width="0.1205%" height="15" fill="rgb(223,4,10)" fg:x="14488" fg:w="20"/><text x="87.5587%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.10%)</title><rect x="87.3267%" y="661" width="0.1024%" height="15" fill="rgb(234,103,6)" fg:x="14491" fg:w="17"/><text x="87.5767%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.10%)</title><rect x="87.3267%" y="645" width="0.1024%" height="15" fill="rgb(227,97,0)" fg:x="14491" fg:w="17"/><text x="87.5767%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.03%)</title><rect x="87.3991%" y="629" width="0.0301%" height="15" fill="rgb(234,150,53)" fg:x="14503" fg:w="5"/><text x="87.6491%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.01%)</title><rect x="87.4834%" y="629" width="0.0121%" height="15" fill="rgb(228,201,54)" fg:x="14517" fg:w="2"/><text x="87.7334%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.03%)</title><rect x="87.4834%" y="645" width="0.0301%" height="15" fill="rgb(222,22,37)" fg:x="14517" fg:w="5"/><text x="87.7334%" y="655.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="87.4955%" y="629" width="0.0181%" height="15" fill="rgb(237,53,32)" fg:x="14519" fg:w="3"/><text x="87.7455%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.04%)</title><rect x="87.4834%" y="677" width="0.0422%" height="15" fill="rgb(233,25,53)" fg:x="14517" fg:w="7"/><text x="87.7334%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.04%)</title><rect x="87.4834%" y="661" width="0.0422%" height="15" fill="rgb(210,40,34)" fg:x="14517" fg:w="7"/><text x="87.7334%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="87.5136%" y="645" width="0.0121%" height="15" fill="rgb(241,220,44)" fg:x="14522" fg:w="2"/><text x="87.7636%" y="655.50"></text></g><g><title>generate-forecast`opj_tgt_create (12 samples, 0.07%)</title><rect x="87.4593%" y="693" width="0.0723%" height="15" fill="rgb(235,28,35)" fg:x="14513" fg:w="12"/><text x="87.7093%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.04%)</title><rect x="87.6582%" y="645" width="0.0362%" height="15" fill="rgb(210,56,17)" fg:x="14546" fg:w="6"/><text x="87.9082%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (28 samples, 0.17%)</title><rect x="87.5316%" y="693" width="0.1687%" height="15" fill="rgb(224,130,29)" fg:x="14525" fg:w="28"/><text x="87.7816%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.16%)</title><rect x="87.5377%" y="677" width="0.1627%" height="15" fill="rgb(235,212,8)" fg:x="14526" fg:w="27"/><text x="87.7877%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.13%)</title><rect x="87.5678%" y="661" width="0.1326%" height="15" fill="rgb(223,33,50)" fg:x="14531" fg:w="22"/><text x="87.8178%" y="671.50"></text></g><g><title>generate-forecast`opj_j2k_decode (6,445 samples, 38.84%)</title><rect x="48.8731%" y="789" width="38.8393%" height="15" fill="rgb(219,149,13)" fg:x="8110" fg:w="6445"/><text x="49.1231%" y="799.50">generate-forecast`opj_j2k_decode</text></g><g><title>generate-forecast`opj_j2k_exec (6,445 samples, 38.84%)</title><rect x="48.8731%" y="773" width="38.8393%" height="15" fill="rgb(250,156,29)" fg:x="8110" fg:w="6445"/><text x="49.1231%" y="783.50">generate-forecast`opj_j2k_exec</text></g><g><title>generate-forecast`opj_j2k_decode_tiles (6,445 samples, 38.84%)</title><rect x="48.8731%" y="757" width="38.8393%" height="15" fill="rgb(216,193,19)" fg:x="8110" fg:w="6445"/><text x="49.1231%" y="767.50">generate-forecast`opj_j2k_decode_tiles</text></g><g><title>generate-forecast`opj_j2k_read_tile_header (47 samples, 0.28%)</title><rect x="87.4292%" y="741" width="0.2832%" height="15" fill="rgb(216,135,14)" fg:x="14508" fg:w="47"/><text x="87.6792%" y="751.50"></text></g><g><title>generate-forecast`opj_tcd_init_decode_tile (47 samples, 0.28%)</title><rect x="87.4292%" y="725" width="0.2832%" height="15" fill="rgb(241,47,5)" fg:x="14508" fg:w="47"/><text x="87.6792%" y="735.50"></text></g><g><title>generate-forecast`opj_tcd_init_tile (46 samples, 0.28%)</title><rect x="87.4352%" y="709" width="0.2772%" height="15" fill="rgb(233,42,35)" fg:x="14509" fg:w="46"/><text x="87.6852%" y="719.50"></text></g><g><title>generate-forecast`opj_tcd_init (3 samples, 0.02%)</title><rect x="87.7185%" y="757" width="0.0181%" height="15" fill="rgb(231,13,6)" fg:x="14556" fg:w="3"/><text x="87.9685%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="87.7185%" y="741" width="0.0181%" height="15" fill="rgb(207,181,40)" fg:x="14556" fg:w="3"/><text x="87.9685%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="87.7185%" y="725" width="0.0181%" height="15" fill="rgb(254,173,49)" fg:x="14556" fg:w="3"/><text x="87.9685%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.02%)</title><rect x="87.7185%" y="709" width="0.0181%" height="15" fill="rgb(221,1,38)" fg:x="14556" fg:w="3"/><text x="87.9685%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.02%)</title><rect x="87.7185%" y="693" width="0.0181%" height="15" fill="rgb(206,124,46)" fg:x="14556" fg:w="3"/><text x="87.9685%" y="703.50"></text></g><g><title>generate-forecast`opj_j2k_copy_default_tcp_and_create_tcd (6 samples, 0.04%)</title><rect x="87.7124%" y="773" width="0.0362%" height="15" fill="rgb(249,21,11)" fg:x="14555" fg:w="6"/><text x="87.9624%" y="783.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="87.7365%" y="757" width="0.0121%" height="15" fill="rgb(222,201,40)" fg:x="14559" fg:w="2"/><text x="87.9865%" y="767.50"></text></g><g><title>generate-forecast`opj_event_msg (2 samples, 0.01%)</title><rect x="87.7486%" y="757" width="0.0121%" height="15" fill="rgb(235,61,29)" fg:x="14561" fg:w="2"/><text x="87.9986%" y="767.50"></text></g><g><title>libsystem_c.dylib`vsnprintf (2 samples, 0.01%)</title><rect x="87.7486%" y="741" width="0.0121%" height="15" fill="rgb(219,207,3)" fg:x="14561" fg:w="2"/><text x="87.9986%" y="751.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (2 samples, 0.01%)</title><rect x="87.7486%" y="725" width="0.0121%" height="15" fill="rgb(222,56,46)" fg:x="14561" fg:w="2"/><text x="87.9986%" y="735.50"></text></g><g><title>libsystem_c.dylib`__v2printf (2 samples, 0.01%)</title><rect x="87.7486%" y="709" width="0.0121%" height="15" fill="rgb(239,76,54)" fg:x="14561" fg:w="2"/><text x="87.9986%" y="719.50"></text></g><g><title>generate-forecast`gribberish::utils::jpeg::jpeg_opj_stream_read_fn (13 samples, 0.08%)</title><rect x="87.7667%" y="741" width="0.0783%" height="15" fill="rgb(231,124,27)" fg:x="14564" fg:w="13"/><text x="88.0167%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.08%)</title><rect x="87.7667%" y="725" width="0.0783%" height="15" fill="rgb(249,195,6)" fg:x="14564" fg:w="13"/><text x="88.0167%" y="735.50"></text></g><g><title>generate-forecast`opj_j2k_read_header_procedure (17 samples, 0.10%)</title><rect x="87.7486%" y="773" width="0.1024%" height="15" fill="rgb(237,174,47)" fg:x="14561" fg:w="17"/><text x="87.9986%" y="783.50"></text></g><g><title>generate-forecast`opj_stream_read_data (14 samples, 0.08%)</title><rect x="87.7667%" y="757" width="0.0844%" height="15" fill="rgb(206,201,31)" fg:x="14564" fg:w="14"/><text x="88.0167%" y="767.50"></text></g><g><title>generate-forecast`opj_j2k_read_header (24 samples, 0.14%)</title><rect x="87.7124%" y="789" width="0.1446%" height="15" fill="rgb(231,57,52)" fg:x="14555" fg:w="24"/><text x="87.9624%" y="799.50"></text></g><g><title>generate-forecast`opj_stream_default_create (7 samples, 0.04%)</title><rect x="87.8631%" y="789" width="0.0422%" height="15" fill="rgb(248,177,22)" fg:x="14580" fg:w="7"/><text x="88.1131%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.04%)</title><rect x="87.8631%" y="773" width="0.0422%" height="15" fill="rgb(215,211,37)" fg:x="14580" fg:w="7"/><text x="88.1131%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.04%)</title><rect x="87.8631%" y="757" width="0.0422%" height="15" fill="rgb(241,128,51)" fg:x="14580" fg:w="7"/><text x="88.1131%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (6 samples, 0.04%)</title><rect x="87.8691%" y="741" width="0.0362%" height="15" fill="rgb(227,165,31)" fg:x="14581" fg:w="6"/><text x="88.1191%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (5 samples, 0.03%)</title><rect x="87.8751%" y="725" width="0.0301%" height="15" fill="rgb(228,167,24)" fg:x="14582" fg:w="5"/><text x="88.1251%" y="735.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (5 samples, 0.03%)</title><rect x="87.8751%" y="709" width="0.0301%" height="15" fill="rgb(228,143,12)" fg:x="14582" fg:w="5"/><text x="88.1251%" y="719.50"></text></g><g><title>generate-forecast`gribberish::utils::jpeg::extract_jpeg_data (6,614 samples, 39.86%)</title><rect x="48.0656%" y="805" width="39.8578%" height="15" fill="rgb(249,149,8)" fg:x="7976" fg:w="6614"/><text x="48.3156%" y="815.50">generate-forecast`gribberish::utils::jpeg::extract_jpeg_data</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="87.9113%" y="789" width="0.0121%" height="15" fill="rgb(243,35,44)" fg:x="14588" fg:w="2"/><text x="88.1613%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.02%)</title><rect x="88.4175%" y="757" width="0.0181%" height="15" fill="rgb(246,89,9)" fg:x="14672" fg:w="3"/><text x="88.6675%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.02%)</title><rect x="88.4175%" y="741" width="0.0181%" height="15" fill="rgb(233,213,13)" fg:x="14672" fg:w="3"/><text x="88.6675%" y="751.50"></text></g><g><title>generate-forecast`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.02%)</title><rect x="88.4175%" y="789" width="0.0241%" height="15" fill="rgb(233,141,41)" fg:x="14672" fg:w="4"/><text x="88.6675%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.02%)</title><rect x="88.4175%" y="773" width="0.0241%" height="15" fill="rgb(239,167,4)" fg:x="14672" fg:w="4"/><text x="88.6675%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="88.4416%" y="789" width="0.0121%" height="15" fill="rgb(209,217,16)" fg:x="14676" fg:w="2"/><text x="88.6916%" y="799.50"></text></g><g><title>generate-forecast`gribberish::utils::utils::bits_to_bytes (89 samples, 0.54%)</title><rect x="87.9233%" y="805" width="0.5363%" height="15" fill="rgb(219,88,35)" fg:x="14590" fg:w="89"/><text x="88.1733%" y="815.50"></text></g><g><title>generate-forecast`&lt;gribberish::templates::data_representation::jpeg_template::JPEGDataRepresentationTemplate as gribberish::templates::data_representation::data_representation_template::DataRepresentationTemplate&lt;f64&gt;&gt;::unpack_range (6,712 samples, 40.45%)</title><rect x="48.0595%" y="821" width="40.4484%" height="15" fill="rgb(220,193,23)" fg:x="7975" fg:w="6712"/><text x="48.3095%" y="831.50">generate-forecast`&lt;gribberish::templates::data_representation::jpe..</text></g><g><title>libsystem_malloc.dylib`free_large (8 samples, 0.05%)</title><rect x="88.4597%" y="805" width="0.0482%" height="15" fill="rgb(230,90,52)" fg:x="14679" fg:w="8"/><text x="88.7097%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.05%)</title><rect x="88.4597%" y="789" width="0.0482%" height="15" fill="rgb(252,106,19)" fg:x="14679" fg:w="8"/><text x="88.7097%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.05%)</title><rect x="88.4597%" y="773" width="0.0482%" height="15" fill="rgb(206,74,20)" fg:x="14679" fg:w="8"/><text x="88.7097%" y="783.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="88.5199%" y="757" width="0.0181%" height="15" fill="rgb(230,138,44)" fg:x="14689" fg:w="3"/><text x="88.7699%" y="767.50"></text></g><g><title>generate-forecast`alloc::fmt::format (3 samples, 0.02%)</title><rect x="88.5441%" y="757" width="0.0181%" height="15" fill="rgb(235,182,43)" fg:x="14693" fg:w="3"/><text x="88.7941%" y="767.50"></text></g><g><title>generate-forecast`core::fmt::write (3 samples, 0.02%)</title><rect x="88.5441%" y="741" width="0.0181%" height="15" fill="rgb(242,16,51)" fg:x="14693" fg:w="3"/><text x="88.7941%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (2 samples, 0.01%)</title><rect x="88.5501%" y="725" width="0.0121%" height="15" fill="rgb(248,9,4)" fg:x="14694" fg:w="2"/><text x="88.8001%" y="735.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.08%)</title><rect x="88.5079%" y="773" width="0.0844%" height="15" fill="rgb(210,31,22)" fg:x="14687" fg:w="14"/><text x="88.7579%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="88.5682%" y="757" width="0.0241%" height="15" fill="rgb(239,54,39)" fg:x="14697" fg:w="4"/><text x="88.8182%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="88.5742%" y="741" width="0.0181%" height="15" fill="rgb(230,99,41)" fg:x="14698" fg:w="3"/><text x="88.8242%" y="751.50"></text></g><g><title>generate-forecast`&lt;gribberish::templates::grid::LatitudeLongitudeGridTemplate as gribberish::templates::grid::GridDefinitionTemplate&gt;::index_for_location (17 samples, 0.10%)</title><rect x="88.5079%" y="821" width="0.1024%" height="15" fill="rgb(253,106,12)" fg:x="14687" fg:w="17"/><text x="88.7579%" y="831.50"></text></g><g><title>generate-forecast`gribberish::utils::utils::read_signed_from_bytes (17 samples, 0.10%)</title><rect x="88.5079%" y="805" width="0.1024%" height="15" fill="rgb(213,46,41)" fg:x="14687" fg:w="17"/><text x="88.7579%" y="815.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (17 samples, 0.10%)</title><rect x="88.5079%" y="789" width="0.1024%" height="15" fill="rgb(215,133,35)" fg:x="14687" fg:w="17"/><text x="88.7579%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.01%)</title><rect x="88.5983%" y="773" width="0.0121%" height="15" fill="rgb(213,28,5)" fg:x="14702" fg:w="2"/><text x="88.8483%" y="783.50"></text></g><g><title>generate-forecast`__rdl_dealloc (4 samples, 0.02%)</title><rect x="88.6344%" y="805" width="0.0241%" height="15" fill="rgb(215,77,49)" fg:x="14708" fg:w="4"/><text x="88.8844%" y="815.50"></text></g><g><title>generate-forecast`__rust_dealloc (2 samples, 0.01%)</title><rect x="88.6586%" y="805" width="0.0121%" height="15" fill="rgb(248,100,22)" fg:x="14712" fg:w="2"/><text x="88.9086%" y="815.50"></text></g><g><title>generate-forecast`alloc::fmt::format (2 samples, 0.01%)</title><rect x="88.6706%" y="805" width="0.0121%" height="15" fill="rgb(208,67,9)" fg:x="14714" fg:w="2"/><text x="88.9206%" y="815.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="89.0442%" y="773" width="0.0181%" height="15" fill="rgb(219,133,21)" fg:x="14776" fg:w="3"/><text x="89.2942%" y="783.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (2 samples, 0.01%)</title><rect x="89.0623%" y="773" width="0.0121%" height="15" fill="rgb(246,46,29)" fg:x="14779" fg:w="2"/><text x="89.3123%" y="783.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (18 samples, 0.11%)</title><rect x="89.1768%" y="757" width="0.1085%" height="15" fill="rgb(246,185,52)" fg:x="14798" fg:w="18"/><text x="89.4268%" y="767.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.04%)</title><rect x="89.2431%" y="741" width="0.0422%" height="15" fill="rgb(252,136,11)" fg:x="14809" fg:w="7"/><text x="89.4931%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (3 samples, 0.02%)</title><rect x="89.2913%" y="757" width="0.0181%" height="15" fill="rgb(219,138,53)" fg:x="14817" fg:w="3"/><text x="89.5413%" y="767.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (9 samples, 0.05%)</title><rect x="89.3335%" y="741" width="0.0542%" height="15" fill="rgb(211,51,23)" fg:x="14824" fg:w="9"/><text x="89.5835%" y="751.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.03%)</title><rect x="89.3877%" y="741" width="0.0301%" height="15" fill="rgb(247,221,28)" fg:x="14833" fg:w="5"/><text x="89.6377%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="89.3998%" y="725" width="0.0181%" height="15" fill="rgb(251,222,45)" fg:x="14835" fg:w="3"/><text x="89.6498%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="89.4058%" y="709" width="0.0121%" height="15" fill="rgb(217,162,53)" fg:x="14836" fg:w="2"/><text x="89.6558%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="89.4058%" y="693" width="0.0121%" height="15" fill="rgb(229,93,14)" fg:x="14836" fg:w="2"/><text x="89.6558%" y="703.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (69 samples, 0.42%)</title><rect x="89.4179%" y="741" width="0.4158%" height="15" fill="rgb(209,67,49)" fg:x="14838" fg:w="69"/><text x="89.6679%" y="751.50"></text></g><g><title>generate-forecast`__rdl_alloc (3 samples, 0.02%)</title><rect x="89.8397%" y="709" width="0.0181%" height="15" fill="rgb(213,87,29)" fg:x="14908" fg:w="3"/><text x="90.0897%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (115 samples, 0.69%)</title><rect x="90.1892%" y="677" width="0.6930%" height="15" fill="rgb(205,151,52)" fg:x="14966" fg:w="115"/><text x="90.4392%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (109 samples, 0.66%)</title><rect x="90.2254%" y="661" width="0.6569%" height="15" fill="rgb(253,215,39)" fg:x="14972" fg:w="109"/><text x="90.4754%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (127 samples, 0.77%)</title><rect x="90.1229%" y="693" width="0.7653%" height="15" fill="rgb(221,220,41)" fg:x="14955" fg:w="127"/><text x="90.3729%" y="703.50"></text></g><g><title>generate-forecast`alloc::string::String::push (174 samples, 1.05%)</title><rect x="89.8578%" y="709" width="1.0486%" height="15" fill="rgb(218,133,21)" fg:x="14911" fg:w="174"/><text x="90.1078%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="90.8883%" y="693" width="0.0181%" height="15" fill="rgb(221,193,43)" fg:x="15082" fg:w="3"/><text x="91.1383%" y="703.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_char (178 samples, 1.07%)</title><rect x="89.8397%" y="725" width="1.0727%" height="15" fill="rgb(240,128,52)" fg:x="14908" fg:w="178"/><text x="90.0897%" y="735.50"></text></g><g><title>generate-forecast`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.07%)</title><rect x="90.9124%" y="725" width="0.0663%" height="15" fill="rgb(253,114,12)" fg:x="15086" fg:w="11"/><text x="91.1624%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="90.9546%" y="709" width="0.0241%" height="15" fill="rgb(215,223,47)" fg:x="15093" fg:w="4"/><text x="91.2046%" y="719.50"></text></g><g><title>generate-forecast`alloc::string::String::push (16 samples, 0.10%)</title><rect x="90.9787%" y="725" width="0.0964%" height="15" fill="rgb(248,225,23)" fg:x="15097" fg:w="16"/><text x="91.2287%" y="735.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (297 samples, 1.79%)</title><rect x="89.3094%" y="757" width="1.7898%" height="15" fill="rgb(250,108,0)" fg:x="14820" fg:w="297"/><text x="89.5594%" y="767.50">g..</text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral (209 samples, 1.26%)</title><rect x="89.8397%" y="741" width="1.2595%" height="15" fill="rgb(228,208,7)" fg:x="14908" fg:w="209"/><text x="90.0897%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::Formatter::pad_integral::write_prefix (4 samples, 0.02%)</title><rect x="91.0751%" y="725" width="0.0241%" height="15" fill="rgb(244,45,10)" fg:x="15113" fg:w="4"/><text x="91.3251%" y="735.50"></text></g><g><title>generate-forecast`alloc::fmt::format (360 samples, 2.17%)</title><rect x="88.9358%" y="789" width="2.1695%" height="15" fill="rgb(207,125,25)" fg:x="14758" fg:w="360"/><text x="89.1858%" y="799.50">g..</text></g><g><title>generate-forecast`core::fmt::write (337 samples, 2.03%)</title><rect x="89.0744%" y="773" width="2.0309%" height="15" fill="rgb(210,195,18)" fg:x="14781" fg:w="337"/><text x="89.3244%" y="783.50">g..</text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.19%)</title><rect x="91.2498%" y="773" width="0.1928%" height="15" fill="rgb(249,80,12)" fg:x="15142" fg:w="32"/><text x="91.4998%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (29 samples, 0.17%)</title><rect x="91.2679%" y="757" width="0.1748%" height="15" fill="rgb(221,65,9)" fg:x="15145" fg:w="29"/><text x="91.5179%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.36%)</title><rect x="91.1052%" y="789" width="0.3556%" height="15" fill="rgb(235,49,36)" fg:x="15118" fg:w="59"/><text x="91.3552%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.02%)</title><rect x="91.4427%" y="773" width="0.0181%" height="15" fill="rgb(225,32,20)" fg:x="15174" fg:w="3"/><text x="91.6927%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (61 samples, 0.37%)</title><rect x="91.4608%" y="789" width="0.3676%" height="15" fill="rgb(215,141,46)" fg:x="15177" fg:w="61"/><text x="91.7108%" y="799.50"></text></g><g><title>generate-forecast`gribberish::utils::utils::byte_to_bits (530 samples, 3.19%)</title><rect x="88.6827%" y="805" width="3.1939%" height="15" fill="rgb(250,160,47)" fg:x="14716" fg:w="530"/><text x="88.9327%" y="815.50">gen..</text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.05%)</title><rect x="91.8284%" y="789" width="0.0482%" height="15" fill="rgb(216,222,40)" fg:x="15238" fg:w="8"/><text x="92.0784%" y="799.50"></text></g><g><title>generate-forecast`gribberish::sections::bitmap::BitmapSection::data_index (546 samples, 3.29%)</title><rect x="88.6103%" y="821" width="3.2903%" height="15" fill="rgb(234,217,39)" fg:x="14704" fg:w="546"/><text x="88.8603%" y="831.50">gen..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.02%)</title><rect x="91.8826%" y="805" width="0.0181%" height="15" fill="rgb(207,178,40)" fg:x="15247" fg:w="3"/><text x="92.1326%" y="815.50"></text></g><g><title>generate-forecast`gribberish::utils::utils::byte_to_bits (2 samples, 0.01%)</title><rect x="91.9007%" y="821" width="0.0121%" height="15" fill="rgb(221,136,13)" fg:x="15250" fg:w="2"/><text x="92.1507%" y="831.50"></text></g><g><title>generate-forecast`gribberish::message::Message::data_at_location (15,223 samples, 91.74%)</title><rect x="0.1868%" y="837" width="91.7380%" height="15" fill="rgb(249,199,10)" fg:x="31" fg:w="15223"/><text x="0.4368%" y="847.50">generate-forecast`gribberish::message::Message::data_at_location</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="91.9127%" y="821" width="0.0121%" height="15" fill="rgb(249,222,13)" fg:x="15252" fg:w="2"/><text x="92.1627%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="91.9127%" y="805" width="0.0121%" height="15" fill="rgb(244,185,38)" fg:x="15252" fg:w="2"/><text x="92.1627%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="91.9127%" y="789" width="0.0121%" height="15" fill="rgb(236,202,9)" fg:x="15252" fg:w="2"/><text x="92.1627%" y="799.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="91.9308%" y="757" width="0.0121%" height="15" fill="rgb(250,229,37)" fg:x="15255" fg:w="2"/><text x="92.1808%" y="767.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="91.9308%" y="773" width="0.0301%" height="15" fill="rgb(206,174,23)" fg:x="15255" fg:w="5"/><text x="92.1808%" y="783.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (8 samples, 0.05%)</title><rect x="91.9248%" y="789" width="0.0482%" height="15" fill="rgb(211,33,43)" fg:x="15254" fg:w="8"/><text x="92.1748%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.01%)</title><rect x="91.9609%" y="773" width="0.0121%" height="15" fill="rgb(245,58,50)" fg:x="15260" fg:w="2"/><text x="92.2109%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.01%)</title><rect x="91.9609%" y="757" width="0.0121%" height="15" fill="rgb(244,68,36)" fg:x="15260" fg:w="2"/><text x="92.2109%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.01%)</title><rect x="91.9609%" y="741" width="0.0121%" height="15" fill="rgb(232,229,15)" fg:x="15260" fg:w="2"/><text x="92.2109%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.01%)</title><rect x="91.9609%" y="725" width="0.0121%" height="15" fill="rgb(254,30,23)" fg:x="15260" fg:w="2"/><text x="92.2109%" y="735.50"></text></g><g><title>generate-forecast`&lt;gribberish::templates::grid::LatitudeLongitudeGridTemplate as gribberish::templates::grid::GridDefinitionTemplate&gt;::end (9 samples, 0.05%)</title><rect x="91.9248%" y="821" width="0.0542%" height="15" fill="rgb(235,160,14)" fg:x="15254" fg:w="9"/><text x="92.1748%" y="831.50"></text></g><g><title>generate-forecast`gribberish::utils::utils::read_signed_from_bytes (9 samples, 0.05%)</title><rect x="91.9248%" y="805" width="0.0542%" height="15" fill="rgb(212,155,44)" fg:x="15254" fg:w="9"/><text x="92.1748%" y="815.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="91.9790%" y="773" width="0.0181%" height="15" fill="rgb(226,2,50)" fg:x="15263" fg:w="3"/><text x="92.2290%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="91.9851%" y="757" width="0.0121%" height="15" fill="rgb(234,177,6)" fg:x="15264" fg:w="2"/><text x="92.2351%" y="767.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (4 samples, 0.02%)</title><rect x="91.9790%" y="789" width="0.0241%" height="15" fill="rgb(217,24,9)" fg:x="15263" fg:w="4"/><text x="92.2290%" y="799.50"></text></g><g><title>generate-forecast`&lt;gribberish::templates::grid::LatitudeLongitudeGridTemplate as gribberish::templates::grid::GridDefinitionTemplate&gt;::longitude_resolution (6 samples, 0.04%)</title><rect x="91.9790%" y="821" width="0.0362%" height="15" fill="rgb(220,13,46)" fg:x="15263" fg:w="6"/><text x="92.2290%" y="831.50"></text></g><g><title>generate-forecast`gribberish::utils::utils::read_signed_from_bytes (6 samples, 0.04%)</title><rect x="91.9790%" y="805" width="0.0362%" height="15" fill="rgb(239,221,27)" fg:x="15263" fg:w="6"/><text x="92.2290%" y="815.50"></text></g><g><title>generate-forecast`&lt;gribberish::templates::grid::LatitudeLongitudeGridTemplate as gribberish::templates::grid::GridDefinitionTemplate&gt;::start (4 samples, 0.02%)</title><rect x="92.0152%" y="821" width="0.0241%" height="15" fill="rgb(222,198,25)" fg:x="15269" fg:w="4"/><text x="92.2652%" y="831.50"></text></g><g><title>generate-forecast`gribberish::utils::utils::read_signed_from_bytes (3 samples, 0.02%)</title><rect x="92.0212%" y="805" width="0.0181%" height="15" fill="rgb(211,99,13)" fg:x="15270" fg:w="3"/><text x="92.2712%" y="815.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="92.0212%" y="789" width="0.0181%" height="15" fill="rgb(232,111,31)" fg:x="15270" fg:w="3"/><text x="92.2712%" y="799.50"></text></g><g><title>generate-forecast`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="92.0212%" y="773" width="0.0181%" height="15" fill="rgb(245,82,37)" fg:x="15270" fg:w="3"/><text x="92.2712%" y="783.50"></text></g><g><title>generate-forecast`alloc::fmt::format (2 samples, 0.01%)</title><rect x="92.0272%" y="757" width="0.0121%" height="15" fill="rgb(227,149,46)" fg:x="15271" fg:w="2"/><text x="92.2772%" y="767.50"></text></g><g><title>generate-forecast`core::fmt::write (2 samples, 0.01%)</title><rect x="92.0272%" y="741" width="0.0121%" height="15" fill="rgb(218,36,50)" fg:x="15271" fg:w="2"/><text x="92.2772%" y="751.50"></text></g><g><title>generate-forecast`core::fmt::num::_&lt;impl core::fmt::Binary for i8&gt;::fmt (2 samples, 0.01%)</title><rect x="92.0272%" y="725" width="0.0121%" height="15" fill="rgb(226,80,48)" fg:x="15271" fg:w="2"/><text x="92.2772%" y="735.50"></text></g><g><title>generate-forecast`gribberish::message::Message::metadata (21 samples, 0.13%)</title><rect x="91.9248%" y="837" width="0.1266%" height="15" fill="rgb(238,224,15)" fg:x="15254" fg:w="21"/><text x="92.1748%" y="847.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (15,245 samples, 91.87%)</title><rect x="0.1868%" y="853" width="91.8706%" height="15" fill="rgb(241,136,10)" fg:x="31" fg:w="15245"/><text x="0.4368%" y="863.50">generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (15,247 samples, 91.88%)</title><rect x="0.1868%" y="885" width="91.8826%" height="15" fill="rgb(208,32,45)" fg:x="31" fg:w="15247"/><text x="0.4368%" y="895.50">generate-forecast`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text></g><g><title>generate-forecast`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (15,247 samples, 91.88%)</title><rect x="0.1868%" y="869" width="91.8826%" height="15" fill="rgb(207,135,9)" fg:x="31" fg:w="15247"/><text x="0.4368%" y="879.50">generate-forecast`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>generate-forecast`bytes::bytes::promotable_even_drop (2 samples, 0.01%)</title><rect x="92.0574%" y="853" width="0.0121%" height="15" fill="rgb(206,86,44)" fg:x="15276" fg:w="2"/><text x="92.3074%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.01%)</title><rect x="92.0574%" y="837" width="0.0121%" height="15" fill="rgb(245,177,15)" fg:x="15276" fg:w="2"/><text x="92.3074%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.01%)</title><rect x="92.0574%" y="821" width="0.0121%" height="15" fill="rgb(206,64,50)" fg:x="15276" fg:w="2"/><text x="92.3074%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.01%)</title><rect x="92.0574%" y="805" width="0.0121%" height="15" fill="rgb(234,36,40)" fg:x="15276" fg:w="2"/><text x="92.3074%" y="815.50"></text></g><g><title>generate-forecast`futures_core::task::__internal::atomic_waker::AtomicWaker::register (2 samples, 0.01%)</title><rect x="92.0815%" y="837" width="0.0121%" height="15" fill="rgb(213,64,8)" fg:x="15280" fg:w="2"/><text x="92.3315%" y="847.50"></text></g><g><title>generate-forecast`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (2 samples, 0.01%)</title><rect x="92.0996%" y="821" width="0.0121%" height="15" fill="rgb(210,75,36)" fg:x="15283" fg:w="2"/><text x="92.3496%" y="831.50"></text></g><g><title>generate-forecast`&lt;alloc::vec::Vec&lt;u8&gt; as bytes::buf::buf_mut::BufMut&gt;::put (54 samples, 0.33%)</title><rect x="92.1237%" y="805" width="0.3254%" height="15" fill="rgb(229,88,21)" fg:x="15287" fg:w="54"/><text x="92.3737%" y="815.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (54 samples, 0.33%)</title><rect x="92.1237%" y="789" width="0.3254%" height="15" fill="rgb(252,204,47)" fg:x="15287" fg:w="54"/><text x="92.3737%" y="799.50"></text></g><g><title>generate-forecast`&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (2 samples, 0.01%)</title><rect x="92.4491%" y="709" width="0.0121%" height="15" fill="rgb(208,77,27)" fg:x="15341" fg:w="2"/><text x="92.6991%" y="719.50"></text></g><g><title>generate-forecast`&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (2 samples, 0.01%)</title><rect x="92.4491%" y="693" width="0.0121%" height="15" fill="rgb(221,76,26)" fg:x="15341" fg:w="2"/><text x="92.6991%" y="703.50"></text></g><g><title>generate-forecast`&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (2 samples, 0.01%)</title><rect x="92.4672%" y="629" width="0.0121%" height="15" fill="rgb(225,139,18)" fg:x="15344" fg:w="2"/><text x="92.7172%" y="639.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as hyper::client::connect::Connection&gt;::connected (2 samples, 0.01%)</title><rect x="92.4672%" y="613" width="0.0121%" height="15" fill="rgb(230,137,11)" fg:x="15344" fg:w="2"/><text x="92.7172%" y="623.50"></text></g><g><title>generate-forecast`hyper::client::connect::http::_&lt;impl hyper::client::connect::Connection for tokio::net::tcp::stream::TcpStream&gt;::connected (2 samples, 0.01%)</title><rect x="92.4672%" y="597" width="0.0121%" height="15" fill="rgb(212,28,1)" fg:x="15344" fg:w="2"/><text x="92.7172%" y="607.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::peer_addr (2 samples, 0.01%)</title><rect x="92.4672%" y="581" width="0.0121%" height="15" fill="rgb(248,164,17)" fg:x="15344" fg:w="2"/><text x="92.7172%" y="591.50"></text></g><g><title>generate-forecast`mio::net::tcp::TcpStream::peer_addr (2 samples, 0.01%)</title><rect x="92.4672%" y="565" width="0.0121%" height="15" fill="rgb(222,171,42)" fg:x="15344" fg:w="2"/><text x="92.7172%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__getpeername (2 samples, 0.01%)</title><rect x="92.4672%" y="549" width="0.0121%" height="15" fill="rgb(243,84,45)" fg:x="15344" fg:w="2"/><text x="92.7172%" y="559.50"></text></g><g><title>generate-forecast`mio::net::tcp::TcpStream::connect_stream (3 samples, 0.02%)</title><rect x="92.4913%" y="501" width="0.0181%" height="15" fill="rgb(252,49,23)" fg:x="15348" fg:w="3"/><text x="92.7413%" y="511.50"></text></g><g><title>generate-forecast`mio::sys::unix::tcp::TcpStream::connect (3 samples, 0.02%)</title><rect x="92.4913%" y="485" width="0.0181%" height="15" fill="rgb(215,19,7)" fg:x="15348" fg:w="3"/><text x="92.7413%" y="495.50"></text></g><g><title>generate-forecast`net2::ext::do_connect (3 samples, 0.02%)</title><rect x="92.4913%" y="469" width="0.0181%" height="15" fill="rgb(238,81,41)" fg:x="15348" fg:w="3"/><text x="92.7413%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__connect (3 samples, 0.02%)</title><rect x="92.4913%" y="453" width="0.0181%" height="15" fill="rgb(210,199,37)" fg:x="15348" fg:w="3"/><text x="92.7413%" y="463.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="92.4913%" y="517" width="0.0301%" height="15" fill="rgb(244,192,49)" fg:x="15348" fg:w="5"/><text x="92.7413%" y="527.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.04%)</title><rect x="92.4913%" y="533" width="0.0362%" height="15" fill="rgb(226,211,11)" fg:x="15348" fg:w="6"/><text x="92.7413%" y="543.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.04%)</title><rect x="92.4913%" y="549" width="0.0422%" height="15" fill="rgb(236,162,54)" fg:x="15348" fg:w="7"/><text x="92.7413%" y="559.50"></text></g><g><title>generate-forecast`security_framework::policy::SecPolicy::create_ssl (2 samples, 0.01%)</title><rect x="92.5334%" y="517" width="0.0121%" height="15" fill="rgb(220,229,9)" fg:x="15355" fg:w="2"/><text x="92.7834%" y="527.50"></text></g><g><title>Security`SecPolicyCreateSSL (2 samples, 0.01%)</title><rect x="92.5334%" y="501" width="0.0121%" height="15" fill="rgb(250,87,22)" fg:x="15355" fg:w="2"/><text x="92.7834%" y="511.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="92.5515%" y="389" width="0.0181%" height="15" fill="rgb(239,43,17)" fg:x="15358" fg:w="3"/><text x="92.8015%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (3 samples, 0.02%)</title><rect x="92.5515%" y="373" width="0.0181%" height="15" fill="rgb(231,177,25)" fg:x="15358" fg:w="3"/><text x="92.8015%" y="383.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::read_func (4 samples, 0.02%)</title><rect x="92.5515%" y="453" width="0.0241%" height="15" fill="rgb(219,179,1)" fg:x="15358" fg:w="4"/><text x="92.8015%" y="463.50"></text></g><g><title>generate-forecast`std::panicking::try (4 samples, 0.02%)</title><rect x="92.5515%" y="437" width="0.0241%" height="15" fill="rgb(238,219,53)" fg:x="15358" fg:w="4"/><text x="92.8015%" y="447.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.02%)</title><rect x="92.5515%" y="421" width="0.0241%" height="15" fill="rgb(232,167,36)" fg:x="15358" fg:w="4"/><text x="92.8015%" y="431.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_read_priv (4 samples, 0.02%)</title><rect x="92.5515%" y="405" width="0.0241%" height="15" fill="rgb(244,19,51)" fg:x="15358" fg:w="4"/><text x="92.8015%" y="415.50"></text></g><g><title>Security`SSLRecordReadInternal (6 samples, 0.04%)</title><rect x="92.5515%" y="469" width="0.0362%" height="15" fill="rgb(224,6,22)" fg:x="15358" fg:w="6"/><text x="92.8015%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="92.5756%" y="453" width="0.0121%" height="15" fill="rgb(224,145,5)" fg:x="15362" fg:w="2"/><text x="92.8256%" y="463.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (2 samples, 0.01%)</title><rect x="92.5877%" y="469" width="0.0121%" height="15" fill="rgb(234,130,49)" fg:x="15364" fg:w="2"/><text x="92.8377%" y="479.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::write_func (2 samples, 0.01%)</title><rect x="92.5877%" y="453" width="0.0121%" height="15" fill="rgb(254,6,2)" fg:x="15364" fg:w="2"/><text x="92.8377%" y="463.50"></text></g><g><title>generate-forecast`std::panicking::try (2 samples, 0.01%)</title><rect x="92.5877%" y="437" width="0.0121%" height="15" fill="rgb(208,96,46)" fg:x="15364" fg:w="2"/><text x="92.8377%" y="447.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.01%)</title><rect x="92.5877%" y="421" width="0.0121%" height="15" fill="rgb(239,3,39)" fg:x="15364" fg:w="2"/><text x="92.8377%" y="431.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_write_priv (2 samples, 0.01%)</title><rect x="92.5877%" y="405" width="0.0121%" height="15" fill="rgb(233,210,1)" fg:x="15364" fg:w="2"/><text x="92.8377%" y="415.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.01%)</title><rect x="92.5877%" y="389" width="0.0121%" height="15" fill="rgb(244,137,37)" fg:x="15364" fg:w="2"/><text x="92.8377%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="92.5877%" y="373" width="0.0121%" height="15" fill="rgb(240,136,2)" fg:x="15364" fg:w="2"/><text x="92.8377%" y="383.50"></text></g><g><title>libcorecrypto.dylib`ccec_affinify_x_only (2 samples, 0.01%)</title><rect x="92.6058%" y="389" width="0.0121%" height="15" fill="rgb(239,18,37)" fg:x="15367" fg:w="2"/><text x="92.8558%" y="399.50"></text></g><g><title>libcorecrypto.dylib`ccn_p256_inv (2 samples, 0.01%)</title><rect x="92.6058%" y="373" width="0.0121%" height="15" fill="rgb(218,185,22)" fg:x="15367" fg:w="2"/><text x="92.8558%" y="383.50"></text></g><g><title>libcorecrypto.dylib`ccn_sqr_256_montgomery (2 samples, 0.01%)</title><rect x="92.6058%" y="357" width="0.0121%" height="15" fill="rgb(225,218,4)" fg:x="15367" fg:w="2"/><text x="92.8558%" y="367.50"></text></g><g><title>libcorecrypto.dylib`ccn_add (2 samples, 0.01%)</title><rect x="92.6299%" y="325" width="0.0121%" height="15" fill="rgb(230,182,32)" fg:x="15371" fg:w="2"/><text x="92.8799%" y="335.50"></text></g><g><title>libcorecrypto.dylib`XYCZaddC_ws (5 samples, 0.03%)</title><rect x="92.6178%" y="357" width="0.0301%" height="15" fill="rgb(242,56,43)" fg:x="15369" fg:w="5"/><text x="92.8678%" y="367.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (3 samples, 0.02%)</title><rect x="92.6299%" y="341" width="0.0181%" height="15" fill="rgb(233,99,24)" fg:x="15371" fg:w="3"/><text x="92.8799%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccecdh_compute_shared_secret (9 samples, 0.05%)</title><rect x="92.6058%" y="405" width="0.0542%" height="15" fill="rgb(234,209,42)" fg:x="15367" fg:w="9"/><text x="92.8558%" y="415.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult (7 samples, 0.04%)</title><rect x="92.6178%" y="389" width="0.0422%" height="15" fill="rgb(227,7,12)" fg:x="15369" fg:w="7"/><text x="92.8678%" y="399.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_ws (7 samples, 0.04%)</title><rect x="92.6178%" y="373" width="0.0422%" height="15" fill="rgb(245,203,43)" fg:x="15369" fg:w="7"/><text x="92.8678%" y="383.50"></text></g><g><title>libcorecrypto.dylib`XYCZadd_ws (2 samples, 0.01%)</title><rect x="92.6479%" y="357" width="0.0121%" height="15" fill="rgb(238,205,33)" fg:x="15374" fg:w="2"/><text x="92.8979%" y="367.50"></text></g><g><title>libcorecrypto.dylib`XYCZaddC_ws (6 samples, 0.04%)</title><rect x="92.6660%" y="309" width="0.0362%" height="15" fill="rgb(231,56,7)" fg:x="15377" fg:w="6"/><text x="92.9160%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (3 samples, 0.02%)</title><rect x="92.6841%" y="293" width="0.0181%" height="15" fill="rgb(244,186,29)" fg:x="15380" fg:w="3"/><text x="92.9341%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccn_mux (2 samples, 0.01%)</title><rect x="92.6901%" y="277" width="0.0121%" height="15" fill="rgb(234,111,31)" fg:x="15381" fg:w="2"/><text x="92.9401%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key_internal_fips (11 samples, 0.07%)</title><rect x="92.6600%" y="373" width="0.0663%" height="15" fill="rgb(241,149,10)" fg:x="15376" fg:w="11"/><text x="92.9100%" y="383.50"></text></g><g><title>libcorecrypto.dylib`ccec_make_pub_from_priv (11 samples, 0.07%)</title><rect x="92.6600%" y="357" width="0.0663%" height="15" fill="rgb(249,206,44)" fg:x="15376" fg:w="11"/><text x="92.9100%" y="367.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult (10 samples, 0.06%)</title><rect x="92.6660%" y="341" width="0.0603%" height="15" fill="rgb(251,153,30)" fg:x="15377" fg:w="10"/><text x="92.9160%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_ws (10 samples, 0.06%)</title><rect x="92.6660%" y="325" width="0.0603%" height="15" fill="rgb(239,152,38)" fg:x="15377" fg:w="10"/><text x="92.9160%" y="335.50"></text></g><g><title>libcorecrypto.dylib`XYCZadd_ws (4 samples, 0.02%)</title><rect x="92.7022%" y="309" width="0.0241%" height="15" fill="rgb(249,139,47)" fg:x="15383" fg:w="4"/><text x="92.9522%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (3 samples, 0.02%)</title><rect x="92.7082%" y="293" width="0.0181%" height="15" fill="rgb(244,64,35)" fg:x="15384" fg:w="3"/><text x="92.9582%" y="303.50"></text></g><g><title>libcorecrypto.dylib`cczp_add_ws (2 samples, 0.01%)</title><rect x="92.7383%" y="245" width="0.0121%" height="15" fill="rgb(216,46,15)" fg:x="15389" fg:w="2"/><text x="92.9883%" y="255.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (2 samples, 0.01%)</title><rect x="92.7504%" y="245" width="0.0121%" height="15" fill="rgb(250,74,19)" fg:x="15391" fg:w="2"/><text x="93.0004%" y="255.50"></text></g><g><title>libcorecrypto.dylib`XYCZaddC_ws (6 samples, 0.04%)</title><rect x="92.7323%" y="261" width="0.0362%" height="15" fill="rgb(249,42,33)" fg:x="15388" fg:w="6"/><text x="92.9823%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul_256_montgomery (2 samples, 0.01%)</title><rect x="92.7685%" y="245" width="0.0121%" height="15" fill="rgb(242,149,17)" fg:x="15394" fg:w="2"/><text x="93.0185%" y="255.50"></text></g><g><title>libcorecrypto.dylib`ccn_sqr_256_montgomery (2 samples, 0.01%)</title><rect x="92.7865%" y="245" width="0.0121%" height="15" fill="rgb(244,29,21)" fg:x="15397" fg:w="2"/><text x="93.0365%" y="255.50"></text></g><g><title>libcorecrypto.dylib`ccec_sign (15 samples, 0.09%)</title><rect x="92.7263%" y="357" width="0.0904%" height="15" fill="rgb(220,130,37)" fg:x="15387" fg:w="15"/><text x="92.9763%" y="367.50"></text></g><g><title>libcorecrypto.dylib`ccec_sign_internal (15 samples, 0.09%)</title><rect x="92.7263%" y="341" width="0.0904%" height="15" fill="rgb(211,67,2)" fg:x="15387" fg:w="15"/><text x="92.9763%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key_internal_fips (15 samples, 0.09%)</title><rect x="92.7263%" y="325" width="0.0904%" height="15" fill="rgb(235,68,52)" fg:x="15387" fg:w="15"/><text x="92.9763%" y="335.50"></text></g><g><title>libcorecrypto.dylib`ccec_make_pub_from_priv (15 samples, 0.09%)</title><rect x="92.7263%" y="309" width="0.0904%" height="15" fill="rgb(246,142,3)" fg:x="15387" fg:w="15"/><text x="92.9763%" y="319.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult (14 samples, 0.08%)</title><rect x="92.7323%" y="293" width="0.0844%" height="15" fill="rgb(241,25,7)" fg:x="15388" fg:w="14"/><text x="92.9823%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_ws (14 samples, 0.08%)</title><rect x="92.7323%" y="277" width="0.0844%" height="15" fill="rgb(242,119,39)" fg:x="15388" fg:w="14"/><text x="92.9823%" y="287.50"></text></g><g><title>libcorecrypto.dylib`XYCZadd_ws (8 samples, 0.05%)</title><rect x="92.7685%" y="261" width="0.0482%" height="15" fill="rgb(241,98,45)" fg:x="15394" fg:w="8"/><text x="93.0185%" y="271.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (2 samples, 0.01%)</title><rect x="92.8046%" y="245" width="0.0121%" height="15" fill="rgb(254,28,30)" fg:x="15400" fg:w="2"/><text x="93.0546%" y="255.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul_256_montgomery (2 samples, 0.01%)</title><rect x="92.8167%" y="277" width="0.0121%" height="15" fill="rgb(241,142,54)" fg:x="15402" fg:w="2"/><text x="93.0667%" y="287.50"></text></g><g><title>libcorecrypto.dylib`cczp_add_ws (2 samples, 0.01%)</title><rect x="92.8348%" y="277" width="0.0121%" height="15" fill="rgb(222,85,15)" fg:x="15405" fg:w="2"/><text x="93.0848%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccec_add_ws (6 samples, 0.04%)</title><rect x="92.8167%" y="293" width="0.0362%" height="15" fill="rgb(210,85,47)" fg:x="15402" fg:w="6"/><text x="93.0667%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul_256_montgomery (2 samples, 0.01%)</title><rect x="92.8528%" y="277" width="0.0121%" height="15" fill="rgb(224,206,25)" fg:x="15408" fg:w="2"/><text x="93.1028%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccn_sqr_256_montgomery (3 samples, 0.02%)</title><rect x="92.8649%" y="277" width="0.0181%" height="15" fill="rgb(243,201,19)" fg:x="15410" fg:w="3"/><text x="93.1149%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccn_mux (2 samples, 0.01%)</title><rect x="92.8890%" y="261" width="0.0121%" height="15" fill="rgb(236,59,4)" fg:x="15414" fg:w="2"/><text x="93.1390%" y="271.50"></text></g><g><title>libcorecrypto.dylib`cczp_add_ws (5 samples, 0.03%)</title><rect x="92.8830%" y="277" width="0.0301%" height="15" fill="rgb(254,179,45)" fg:x="15413" fg:w="5"/><text x="93.1330%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccn_sub (2 samples, 0.01%)</title><rect x="92.9010%" y="261" width="0.0121%" height="15" fill="rgb(226,14,10)" fg:x="15416" fg:w="2"/><text x="93.1510%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccec_twin_mult (18 samples, 0.11%)</title><rect x="92.8167%" y="309" width="0.1085%" height="15" fill="rgb(244,27,41)" fg:x="15402" fg:w="18"/><text x="93.0667%" y="319.50"></text></g><g><title>libcorecrypto.dylib`ccec_double_ws (12 samples, 0.07%)</title><rect x="92.8528%" y="293" width="0.0723%" height="15" fill="rgb(235,35,32)" fg:x="15408" fg:w="12"/><text x="93.1028%" y="303.50"></text></g><g><title>libcorecrypto.dylib`cczp_sub_ws (2 samples, 0.01%)</title><rect x="92.9131%" y="277" width="0.0121%" height="15" fill="rgb(218,68,31)" fg:x="15418" fg:w="2"/><text x="93.1631%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccn_add (2 samples, 0.01%)</title><rect x="92.9252%" y="277" width="0.0121%" height="15" fill="rgb(207,120,37)" fg:x="15420" fg:w="2"/><text x="93.1752%" y="287.50"></text></g><g><title>libcoretls.dylib`SSLPrepareAndQueueMessage (57 samples, 0.34%)</title><rect x="92.5997%" y="437" width="0.3435%" height="15" fill="rgb(227,98,0)" fg:x="15366" fg:w="57"/><text x="92.8497%" y="447.50"></text></g><g><title>libcoretls.dylib`SSLEncodeKeyExchange (57 samples, 0.34%)</title><rect x="92.5997%" y="421" width="0.3435%" height="15" fill="rgb(207,7,3)" fg:x="15366" fg:w="57"/><text x="92.8497%" y="431.50"></text></g><g><title>libcoretls.dylib`sslEcdhCreateKey (47 samples, 0.28%)</title><rect x="92.6600%" y="405" width="0.2832%" height="15" fill="rgb(206,98,19)" fg:x="15376" fg:w="47"/><text x="92.9100%" y="415.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key_fips (47 samples, 0.28%)</title><rect x="92.6600%" y="389" width="0.2832%" height="15" fill="rgb(217,5,26)" fg:x="15376" fg:w="47"/><text x="92.9100%" y="399.50"></text></g><g><title>libcorecrypto.dylib`ccec_pairwise_consistency_check (36 samples, 0.22%)</title><rect x="92.7263%" y="373" width="0.2169%" height="15" fill="rgb(235,190,38)" fg:x="15387" fg:w="36"/><text x="92.9763%" y="383.50"></text></g><g><title>libcorecrypto.dylib`ccec_verify (21 samples, 0.13%)</title><rect x="92.8167%" y="357" width="0.1266%" height="15" fill="rgb(247,86,24)" fg:x="15402" fg:w="21"/><text x="93.0667%" y="367.50"></text></g><g><title>libcorecrypto.dylib`ccec_verify_digest (21 samples, 0.13%)</title><rect x="92.8167%" y="341" width="0.1266%" height="15" fill="rgb(205,101,16)" fg:x="15402" fg:w="21"/><text x="93.0667%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccec_verify_internal (21 samples, 0.13%)</title><rect x="92.8167%" y="325" width="0.1266%" height="15" fill="rgb(246,168,33)" fg:x="15402" fg:w="21"/><text x="93.0667%" y="335.50"></text></g><g><title>libcorecrypto.dylib`cczp_inv_fast (3 samples, 0.02%)</title><rect x="92.9252%" y="309" width="0.0181%" height="15" fill="rgb(231,114,1)" fg:x="15420" fg:w="3"/><text x="93.1752%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cczp_inv_fast_ws (3 samples, 0.02%)</title><rect x="92.9252%" y="293" width="0.0181%" height="15" fill="rgb(207,184,53)" fg:x="15420" fg:w="3"/><text x="93.1752%" y="303.50"></text></g><g><title>libcoretls.dylib`tls_handshake_continue (58 samples, 0.35%)</title><rect x="92.5997%" y="469" width="0.3495%" height="15" fill="rgb(224,95,51)" fg:x="15366" fg:w="58"/><text x="92.8497%" y="479.50"></text></g><g><title>libcoretls.dylib`SSLAdvanceHandshake (58 samples, 0.35%)</title><rect x="92.5997%" y="453" width="0.3495%" height="15" fill="rgb(212,188,45)" fg:x="15366" fg:w="58"/><text x="92.8497%" y="463.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.01%)</title><rect x="92.9493%" y="405" width="0.0121%" height="15" fill="rgb(223,154,38)" fg:x="15424" fg:w="2"/><text x="93.1993%" y="415.50"></text></g><g><title>Security`SecKeyCopyExponent (4 samples, 0.02%)</title><rect x="92.9613%" y="405" width="0.0241%" height="15" fill="rgb(251,22,52)" fg:x="15426" fg:w="4"/><text x="93.2113%" y="415.50"></text></g><g><title>Security`SecCDSAKeyCopyAttributeDictionary(__SecKey*) (4 samples, 0.02%)</title><rect x="92.9613%" y="389" width="0.0241%" height="15" fill="rgb(229,209,22)" fg:x="15426" fg:w="4"/><text x="93.2113%" y="399.50"></text></g><g><title>Security`SecKeyCopyModulus (3 samples, 0.02%)</title><rect x="92.9854%" y="405" width="0.0181%" height="15" fill="rgb(234,138,34)" fg:x="15430" fg:w="3"/><text x="93.2354%" y="415.50"></text></g><g><title>Security`SecCDSAKeyCopyAttributeDictionary(__SecKey*) (3 samples, 0.02%)</title><rect x="92.9854%" y="389" width="0.0181%" height="15" fill="rgb(212,95,11)" fg:x="15430" fg:w="3"/><text x="93.2354%" y="399.50"></text></g><g><title>Security`SecKeychainItemExport (2 samples, 0.01%)</title><rect x="92.9914%" y="373" width="0.0121%" height="15" fill="rgb(240,179,47)" fg:x="15431" fg:w="2"/><text x="93.2414%" y="383.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::certHandle (5 samples, 0.03%)</title><rect x="93.0216%" y="341" width="0.0301%" height="15" fill="rgb(240,163,11)" fg:x="15436" fg:w="5"/><text x="93.2716%" y="351.50"></text></g><g><title>Security`CSSM_CL_CertCache (5 samples, 0.03%)</title><rect x="93.0216%" y="325" width="0.0301%" height="15" fill="rgb(236,37,12)" fg:x="15436" fg:w="5"/><text x="93.2716%" y="335.50"></text></g><g><title>Security`cssm_CertCache(long, cssm_data const*, long*) (5 samples, 0.03%)</title><rect x="93.0216%" y="309" width="0.0301%" height="15" fill="rgb(232,164,16)" fg:x="15436" fg:w="5"/><text x="93.2716%" y="319.50"></text></g><g><title>Security`AppleX509CLSession::CertCache (5 samples, 0.03%)</title><rect x="93.0216%" y="293" width="0.0301%" height="15" fill="rgb(244,205,15)" fg:x="15436" fg:w="5"/><text x="93.2716%" y="303.50"></text></g><g><title>Security`DecodedCert::DecodedCert (5 samples, 0.03%)</title><rect x="93.0216%" y="277" width="0.0301%" height="15" fill="rgb(223,117,47)" fg:x="15436" fg:w="5"/><text x="93.2716%" y="287.50"></text></g><g><title>Security`SEC_ASN1Decode (4 samples, 0.02%)</title><rect x="93.0276%" y="261" width="0.0241%" height="15" fill="rgb(244,107,35)" fg:x="15437" fg:w="4"/><text x="93.2776%" y="271.50"></text></g><g><title>Security`SEC_ASN1DecoderUpdate (4 samples, 0.02%)</title><rect x="93.0276%" y="245" width="0.0241%" height="15" fill="rgb(205,140,8)" fg:x="15437" fg:w="4"/><text x="93.2776%" y="255.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (2 samples, 0.01%)</title><rect x="93.0517%" y="181" width="0.0121%" height="15" fill="rgb(228,84,46)" fg:x="15441" fg:w="2"/><text x="93.3017%" y="191.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (2 samples, 0.01%)</title><rect x="93.0517%" y="165" width="0.0121%" height="15" fill="rgb(254,188,9)" fg:x="15441" fg:w="2"/><text x="93.3017%" y="175.50"></text></g><g><title>Security`Security::Database::_dbOpen (2 samples, 0.01%)</title><rect x="93.0517%" y="149" width="0.0121%" height="15" fill="rgb(206,112,54)" fg:x="15441" fg:w="2"/><text x="93.3017%" y="159.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (2 samples, 0.01%)</title><rect x="93.0517%" y="133" width="0.0121%" height="15" fill="rgb(216,84,49)" fg:x="15441" fg:w="2"/><text x="93.3017%" y="143.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (2 samples, 0.01%)</title><rect x="93.0517%" y="117" width="0.0121%" height="15" fill="rgb(214,194,35)" fg:x="15441" fg:w="2"/><text x="93.3017%" y="127.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundleDir (4 samples, 0.02%)</title><rect x="93.0698%" y="165" width="0.0241%" height="15" fill="rgb(249,28,3)" fg:x="15444" fg:w="4"/><text x="93.3198%" y="175.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundle (4 samples, 0.02%)</title><rect x="93.0698%" y="149" width="0.0241%" height="15" fill="rgb(222,56,52)" fg:x="15444" fg:w="4"/><text x="93.3198%" y="159.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::directDbHand (3 samples, 0.02%)</title><rect x="93.0758%" y="133" width="0.0181%" height="15" fill="rgb(245,217,50)" fg:x="15445" fg:w="3"/><text x="93.3258%" y="143.50"></text></g><g><title>Security`Security::MDSSession::dbOpen (3 samples, 0.02%)</title><rect x="93.0758%" y="117" width="0.0181%" height="15" fill="rgb(213,201,24)" fg:x="15445" fg:w="3"/><text x="93.3258%" y="127.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (3 samples, 0.02%)</title><rect x="93.0758%" y="101" width="0.0181%" height="15" fill="rgb(248,116,28)" fg:x="15445" fg:w="3"/><text x="93.3258%" y="111.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (3 samples, 0.02%)</title><rect x="93.0758%" y="85" width="0.0181%" height="15" fill="rgb(219,72,43)" fg:x="15445" fg:w="3"/><text x="93.3258%" y="95.50"></text></g><g><title>Security`Security::Database::_dbOpen (3 samples, 0.02%)</title><rect x="93.0758%" y="69" width="0.0181%" height="15" fill="rgb(209,138,14)" fg:x="15445" fg:w="3"/><text x="93.3258%" y="79.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (3 samples, 0.02%)</title><rect x="93.0758%" y="53" width="0.0181%" height="15" fill="rgb(222,18,33)" fg:x="15445" fg:w="3"/><text x="93.3258%" y="63.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (3 samples, 0.02%)</title><rect x="93.0758%" y="37" width="0.0181%" height="15" fill="rgb(213,199,7)" fg:x="15445" fg:w="3"/><text x="93.3258%" y="47.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::publicKey (15 samples, 0.09%)</title><rect x="93.0095%" y="373" width="0.0904%" height="15" fill="rgb(250,110,10)" fg:x="15434" fg:w="15"/><text x="93.2595%" y="383.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::copyFirstFieldValue (15 samples, 0.09%)</title><rect x="93.0095%" y="357" width="0.0904%" height="15" fill="rgb(248,123,6)" fg:x="15434" fg:w="15"/><text x="93.2595%" y="367.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::clHandle (8 samples, 0.05%)</title><rect x="93.0517%" y="341" width="0.0482%" height="15" fill="rgb(206,91,31)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="351.50"></text></g><g><title>Security`Security::CssmClient::AttachmentImpl::activate (8 samples, 0.05%)</title><rect x="93.0517%" y="325" width="0.0482%" height="15" fill="rgb(211,154,13)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="335.50"></text></g><g><title>Security`Security::CssmClient::ModuleImpl::activate (8 samples, 0.05%)</title><rect x="93.0517%" y="309" width="0.0482%" height="15" fill="rgb(225,148,7)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="319.50"></text></g><g><title>Security`CSSM_ModuleLoad (8 samples, 0.05%)</title><rect x="93.0517%" y="293" width="0.0482%" height="15" fill="rgb(220,160,43)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="303.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::fetch (8 samples, 0.05%)</title><rect x="93.0517%" y="277" width="0.0482%" height="15" fill="rgb(213,52,39)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="287.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery (8 samples, 0.05%)</title><rect x="93.0517%" y="261" width="0.0482%" height="15" fill="rgb(243,137,7)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="271.50"></text></g><g><title>Security`Security::MDSClient::Directory::dlGetFirst (8 samples, 0.05%)</title><rect x="93.0517%" y="245" width="0.0482%" height="15" fill="rgb(230,79,13)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="255.50"></text></g><g><title>Security`Security::MDSClient::Directory::cdsa (8 samples, 0.05%)</title><rect x="93.0517%" y="229" width="0.0482%" height="15" fill="rgb(247,105,23)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="239.50"></text></g><g><title>Security`mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (8 samples, 0.05%)</title><rect x="93.0517%" y="213" width="0.0482%" height="15" fill="rgb(223,179,41)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="223.50"></text></g><g><title>Security`Security::MDSSession::DbOpen (8 samples, 0.05%)</title><rect x="93.0517%" y="197" width="0.0482%" height="15" fill="rgb(218,9,34)" fg:x="15441" fg:w="8"/><text x="93.3017%" y="207.50"></text></g><g><title>Security`Security::MDSSession::updateDataBases (6 samples, 0.04%)</title><rect x="93.0638%" y="181" width="0.0362%" height="15" fill="rgb(222,106,8)" fg:x="15443" fg:w="6"/><text x="93.3138%" y="191.50"></text></g><g><title>Security`SecTrustCopyPublicKey (19 samples, 0.11%)</title><rect x="93.0035%" y="405" width="0.1145%" height="15" fill="rgb(211,220,0)" fg:x="15433" fg:w="19"/><text x="93.2535%" y="415.50"></text></g><g><title>Security`SecCertificateCopyPublicKey (19 samples, 0.11%)</title><rect x="93.0035%" y="389" width="0.1145%" height="15" fill="rgb(229,52,16)" fg:x="15433" fg:w="19"/><text x="93.2535%" y="399.50"></text></g><g><title>Security`countLegacyAPI (2 samples, 0.01%)</title><rect x="93.1059%" y="373" width="0.0121%" height="15" fill="rgb(212,155,18)" fg:x="15450" fg:w="2"/><text x="93.3559%" y="383.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (2 samples, 0.01%)</title><rect x="93.1059%" y="357" width="0.0121%" height="15" fill="rgb(242,21,14)" fg:x="15450" fg:w="2"/><text x="93.3559%" y="367.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.01%)</title><rect x="93.1059%" y="341" width="0.0121%" height="15" fill="rgb(222,19,48)" fg:x="15450" fg:w="2"/><text x="93.3559%" y="351.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul (3 samples, 0.02%)</title><rect x="93.1240%" y="341" width="0.0181%" height="15" fill="rgb(232,45,27)" fg:x="15453" fg:w="3"/><text x="93.3740%" y="351.50"></text></g><g><title>libcoretls.dylib`sslGetPubKeyFromBits (5 samples, 0.03%)</title><rect x="93.1240%" y="405" width="0.0301%" height="15" fill="rgb(249,103,42)" fg:x="15453" fg:w="5"/><text x="93.3740%" y="415.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_init_pub (5 samples, 0.03%)</title><rect x="93.1240%" y="389" width="0.0301%" height="15" fill="rgb(246,81,33)" fg:x="15453" fg:w="5"/><text x="93.3740%" y="399.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_init_pub_ws (5 samples, 0.03%)</title><rect x="93.1240%" y="373" width="0.0301%" height="15" fill="rgb(252,33,42)" fg:x="15453" fg:w="5"/><text x="93.3740%" y="383.50"></text></g><g><title>libcorecrypto.dylib`ccn_make_recip_ws (5 samples, 0.03%)</title><rect x="93.1240%" y="357" width="0.0301%" height="15" fill="rgb(209,212,41)" fg:x="15453" fg:w="5"/><text x="93.3740%" y="367.50"></text></g><g><title>Security`tls_handshake_message_callback (37 samples, 0.22%)</title><rect x="92.9493%" y="437" width="0.2230%" height="15" fill="rgb(207,154,6)" fg:x="15424" fg:w="37"/><text x="93.1993%" y="447.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_set_peer_pubkey (37 samples, 0.22%)</title><rect x="92.9493%" y="421" width="0.2230%" height="15" fill="rgb(223,64,47)" fg:x="15424" fg:w="37"/><text x="93.1993%" y="431.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_create_cfarray_from_certificates (3 samples, 0.02%)</title><rect x="93.1542%" y="405" width="0.0181%" height="15" fill="rgb(211,161,38)" fg:x="15458" fg:w="3"/><text x="93.4042%" y="415.50"></text></g><g><title>Security`SecCertificateCreateWithData (3 samples, 0.02%)</title><rect x="93.1542%" y="389" width="0.0181%" height="15" fill="rgb(219,138,40)" fg:x="15458" fg:w="3"/><text x="93.4042%" y="399.50"></text></g><g><title>Security`SecCertificateParse (3 samples, 0.02%)</title><rect x="93.1542%" y="373" width="0.0181%" height="15" fill="rgb(241,228,46)" fg:x="15458" fg:w="3"/><text x="93.4042%" y="383.50"></text></g><g><title>Security`createNormalizedX501Name (2 samples, 0.01%)</title><rect x="93.1602%" y="357" width="0.0121%" height="15" fill="rgb(223,209,38)" fg:x="15459" fg:w="2"/><text x="93.4102%" y="367.50"></text></g><g><title>Security`tls_verify_peer_cert (2 samples, 0.01%)</title><rect x="93.1722%" y="437" width="0.0121%" height="15" fill="rgb(236,164,45)" fg:x="15461" fg:w="2"/><text x="93.4222%" y="447.50"></text></g><g><title>Security`sslCreateSecTrust (2 samples, 0.01%)</title><rect x="93.1722%" y="421" width="0.0121%" height="15" fill="rgb(231,15,5)" fg:x="15461" fg:w="2"/><text x="93.4222%" y="431.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_create_peer_trust (2 samples, 0.01%)</title><rect x="93.1722%" y="405" width="0.0121%" height="15" fill="rgb(252,35,15)" fg:x="15461" fg:w="2"/><text x="93.4222%" y="415.50"></text></g><g><title>libsystem_asl.dylib`_asl_msg_to_xpc (2 samples, 0.01%)</title><rect x="93.1963%" y="325" width="0.0121%" height="15" fill="rgb(248,181,18)" fg:x="15465" fg:w="2"/><text x="93.4463%" y="335.50"></text></g><g><title>libsystem_asl.dylib`_asl_mt_shim_send_message (4 samples, 0.02%)</title><rect x="93.1963%" y="341" width="0.0241%" height="15" fill="rgb(233,39,42)" fg:x="15465" fg:w="4"/><text x="93.4463%" y="351.50"></text></g><g><title>libcoretls.dylib`tls_metric_client_finished (6 samples, 0.04%)</title><rect x="93.1903%" y="421" width="0.0362%" height="15" fill="rgb(238,110,33)" fg:x="15464" fg:w="6"/><text x="93.4403%" y="431.50"></text></g><g><title>libcoretls.dylib`tls_metric_event_add_string (6 samples, 0.04%)</title><rect x="93.1903%" y="405" width="0.0362%" height="15" fill="rgb(233,195,10)" fg:x="15464" fg:w="6"/><text x="93.4403%" y="415.50"></text></g><g><title>libsystem_asl.dylib`asl_log (5 samples, 0.03%)</title><rect x="93.1963%" y="389" width="0.0301%" height="15" fill="rgb(254,105,3)" fg:x="15465" fg:w="5"/><text x="93.4463%" y="399.50"></text></g><g><title>libsystem_asl.dylib`_asl_lib_vlog (5 samples, 0.03%)</title><rect x="93.1963%" y="373" width="0.0301%" height="15" fill="rgb(221,225,9)" fg:x="15465" fg:w="5"/><text x="93.4463%" y="383.50"></text></g><g><title>libsystem_asl.dylib`_asl_send_message (5 samples, 0.03%)</title><rect x="93.1963%" y="357" width="0.0301%" height="15" fill="rgb(224,227,45)" fg:x="15465" fg:w="5"/><text x="93.4463%" y="367.50"></text></g><g><title>libcoretls.dylib`SSLAdvanceHandshake (7 samples, 0.04%)</title><rect x="93.1903%" y="437" width="0.0422%" height="15" fill="rgb(229,198,43)" fg:x="15464" fg:w="7"/><text x="93.4403%" y="447.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_init_ws (4 samples, 0.02%)</title><rect x="93.2506%" y="325" width="0.0241%" height="15" fill="rgb(206,209,35)" fg:x="15474" fg:w="4"/><text x="93.5006%" y="335.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_sqr_ws (4 samples, 0.02%)</title><rect x="93.2506%" y="309" width="0.0241%" height="15" fill="rgb(245,195,53)" fg:x="15474" fg:w="4"/><text x="93.5006%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_redc (3 samples, 0.02%)</title><rect x="93.2566%" y="293" width="0.0181%" height="15" fill="rgb(240,92,26)" fg:x="15475" fg:w="3"/><text x="93.5066%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccn_addmul1_asm (3 samples, 0.02%)</title><rect x="93.2566%" y="277" width="0.0181%" height="15" fill="rgb(207,40,23)" fg:x="15475" fg:w="3"/><text x="93.5066%" y="287.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_power_func_ws (6 samples, 0.04%)</title><rect x="93.2506%" y="341" width="0.0362%" height="15" fill="rgb(223,111,35)" fg:x="15474" fg:w="6"/><text x="93.5006%" y="351.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_to_ws (2 samples, 0.01%)</title><rect x="93.2747%" y="325" width="0.0121%" height="15" fill="rgb(229,147,28)" fg:x="15478" fg:w="2"/><text x="93.5247%" y="335.50"></text></g><g><title>libcoretls.dylib`SSLProcessHandshakeMessage (10 samples, 0.06%)</title><rect x="93.2325%" y="437" width="0.0603%" height="15" fill="rgb(211,29,28)" fg:x="15471" fg:w="10"/><text x="93.4825%" y="447.50"></text></g><g><title>libcoretls.dylib`SSLProcessServerKeyExchange (9 samples, 0.05%)</title><rect x="93.2385%" y="421" width="0.0542%" height="15" fill="rgb(228,72,33)" fg:x="15472" fg:w="9"/><text x="93.4885%" y="431.50"></text></g><g><title>libcoretls.dylib`sslRsaVerify (8 samples, 0.05%)</title><rect x="93.2445%" y="405" width="0.0482%" height="15" fill="rgb(205,214,31)" fg:x="15473" fg:w="8"/><text x="93.4945%" y="415.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_verify_pkcs1v15 (8 samples, 0.05%)</title><rect x="93.2445%" y="389" width="0.0482%" height="15" fill="rgb(224,111,15)" fg:x="15473" fg:w="8"/><text x="93.4945%" y="399.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_verify_pkcs1v15_internal (8 samples, 0.05%)</title><rect x="93.2445%" y="373" width="0.0482%" height="15" fill="rgb(253,21,26)" fg:x="15473" fg:w="8"/><text x="93.4945%" y="383.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_power_fast (7 samples, 0.04%)</title><rect x="93.2506%" y="357" width="0.0422%" height="15" fill="rgb(245,139,43)" fg:x="15474" fg:w="7"/><text x="93.5006%" y="367.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::MidHandshakeSslStream&lt;S&gt;::handshake (125 samples, 0.75%)</title><rect x="92.5455%" y="517" width="0.7533%" height="15" fill="rgb(252,170,7)" fg:x="15357" fg:w="125"/><text x="92.7955%" y="527.50"></text></g><g><title>Security`SSLHandshake (125 samples, 0.75%)</title><rect x="92.5455%" y="501" width="0.7533%" height="15" fill="rgb(231,118,14)" fg:x="15357" fg:w="125"/><text x="92.7955%" y="511.50"></text></g><g><title>Security`SSLHandshakeProceed (125 samples, 0.75%)</title><rect x="92.5455%" y="485" width="0.7533%" height="15" fill="rgb(238,83,0)" fg:x="15357" fg:w="125"/><text x="92.7955%" y="495.50"></text></g><g><title>libcoretls.dylib`tls_handshake_process (58 samples, 0.35%)</title><rect x="92.9493%" y="469" width="0.3495%" height="15" fill="rgb(221,39,39)" fg:x="15424" fg:w="58"/><text x="93.1993%" y="479.50"></text></g><g><title>libcoretls.dylib`SSLProcessHandshakeRecordInner (58 samples, 0.35%)</title><rect x="92.9493%" y="453" width="0.3495%" height="15" fill="rgb(222,119,46)" fg:x="15424" fg:w="58"/><text x="93.1993%" y="463.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke_2 (4 samples, 0.02%)</title><rect x="93.3048%" y="341" width="0.0241%" height="15" fill="rgb(222,165,49)" fg:x="15483" fg:w="4"/><text x="93.5548%" y="351.50"></text></g><g><title>Security`SecXPCDictionaryCopyChainOptional (4 samples, 0.02%)</title><rect x="93.3048%" y="325" width="0.0241%" height="15" fill="rgb(219,113,52)" fg:x="15483" fg:w="4"/><text x="93.5548%" y="335.50"></text></g><g><title>Security`SecCertificateCreateWithXPCArrayAtIndex (4 samples, 0.02%)</title><rect x="93.3048%" y="309" width="0.0241%" height="15" fill="rgb(214,7,15)" fg:x="15483" fg:w="4"/><text x="93.5548%" y="319.50"></text></g><g><title>Security`SecCertificateCreateWithBytes (4 samples, 0.02%)</title><rect x="93.3048%" y="293" width="0.0241%" height="15" fill="rgb(235,32,4)" fg:x="15483" fg:w="4"/><text x="93.5548%" y="303.50"></text></g><g><title>Security`SecCertificateParse (4 samples, 0.02%)</title><rect x="93.3048%" y="277" width="0.0241%" height="15" fill="rgb(238,90,54)" fg:x="15483" fg:w="4"/><text x="93.5548%" y="287.50"></text></g><g><title>Security`createNormalizedX501Name (2 samples, 0.01%)</title><rect x="93.3169%" y="261" width="0.0121%" height="15" fill="rgb(213,208,19)" fg:x="15485" fg:w="2"/><text x="93.5669%" y="271.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_send_with_result_and_wait_for_reply (3 samples, 0.02%)</title><rect x="93.3289%" y="309" width="0.0181%" height="15" fill="rgb(233,156,4)" fg:x="15487" fg:w="3"/><text x="93.5789%" y="319.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_and_wait_for_reply (3 samples, 0.02%)</title><rect x="93.3289%" y="293" width="0.0181%" height="15" fill="rgb(207,194,5)" fg:x="15487" fg:w="3"/><text x="93.5789%" y="303.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_msg (3 samples, 0.02%)</title><rect x="93.3289%" y="277" width="0.0181%" height="15" fill="rgb(206,111,30)" fg:x="15487" fg:w="3"/><text x="93.5789%" y="287.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_drain (3 samples, 0.02%)</title><rect x="93.3289%" y="261" width="0.0181%" height="15" fill="rgb(243,70,54)" fg:x="15487" fg:w="3"/><text x="93.5789%" y="271.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_send (3 samples, 0.02%)</title><rect x="93.3289%" y="245" width="0.0181%" height="15" fill="rgb(242,28,8)" fg:x="15487" fg:w="3"/><text x="93.5789%" y="255.50"></text></g><g><title>libdispatch.dylib`_voucher_create_mach_voucher_with_priority (3 samples, 0.02%)</title><rect x="93.3289%" y="229" width="0.0181%" height="15" fill="rgb(219,106,18)" fg:x="15487" fg:w="3"/><text x="93.5789%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`host_create_mach_voucher_trap (3 samples, 0.02%)</title><rect x="93.3289%" y="213" width="0.0181%" height="15" fill="rgb(244,222,10)" fg:x="15487" fg:w="3"/><text x="93.5789%" y="223.50"></text></g><g><title>Security`securityd_message_with_reply_sync (5 samples, 0.03%)</title><rect x="93.3289%" y="341" width="0.0301%" height="15" fill="rgb(236,179,52)" fg:x="15487" fg:w="5"/><text x="93.5789%" y="351.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (5 samples, 0.03%)</title><rect x="93.3289%" y="325" width="0.0301%" height="15" fill="rgb(213,23,39)" fg:x="15487" fg:w="5"/><text x="93.5789%" y="335.50"></text></g><g><title>libxpc.dylib`_xpc_connection_pack_message (2 samples, 0.01%)</title><rect x="93.3470%" y="309" width="0.0121%" height="15" fill="rgb(238,48,10)" fg:x="15490" fg:w="2"/><text x="93.5970%" y="319.50"></text></g><g><title>libxpc.dylib`_xpc_serializer_pack (2 samples, 0.01%)</title><rect x="93.3470%" y="293" width="0.0121%" height="15" fill="rgb(251,196,23)" fg:x="15490" fg:w="2"/><text x="93.5970%" y="303.50"></text></g><g><title>generate-forecast`native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (138 samples, 0.83%)</title><rect x="92.5334%" y="549" width="0.8316%" height="15" fill="rgb(250,152,24)" fg:x="15355" fg:w="138"/><text x="92.7834%" y="559.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (138 samples, 0.83%)</title><rect x="92.5334%" y="533" width="0.8316%" height="15" fill="rgb(209,150,17)" fg:x="15355" fg:w="138"/><text x="92.7834%" y="543.50"></text></g><g><title>generate-forecast`security_framework::trust::SecTrust::evaluate (11 samples, 0.07%)</title><rect x="93.2988%" y="517" width="0.0663%" height="15" fill="rgb(234,202,34)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="527.50"></text></g><g><title>Security`SecTrustEvaluateInternal (11 samples, 0.07%)</title><rect x="93.2988%" y="501" width="0.0663%" height="15" fill="rgb(253,148,53)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="511.50"></text></g><g><title>Security`SecTrustEvaluateIfNecessary (11 samples, 0.07%)</title><rect x="93.2988%" y="485" width="0.0663%" height="15" fill="rgb(218,129,16)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="495.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (11 samples, 0.07%)</title><rect x="93.2988%" y="469" width="0.0663%" height="15" fill="rgb(216,85,19)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="479.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (11 samples, 0.07%)</title><rect x="93.2988%" y="453" width="0.0663%" height="15" fill="rgb(235,228,7)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="463.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke (11 samples, 0.07%)</title><rect x="93.2988%" y="437" width="0.0663%" height="15" fill="rgb(245,175,0)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="447.50"></text></g><g><title>libsystem_trace.dylib`_os_activity_initiate_impl (11 samples, 0.07%)</title><rect x="93.2988%" y="421" width="0.0663%" height="15" fill="rgb(208,168,36)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="431.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_2 (11 samples, 0.07%)</title><rect x="93.2988%" y="405" width="0.0663%" height="15" fill="rgb(246,171,24)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="415.50"></text></g><g><title>Security`SecOSStatusWith (11 samples, 0.07%)</title><rect x="93.2988%" y="389" width="0.0663%" height="15" fill="rgb(215,142,24)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="399.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_3 (11 samples, 0.07%)</title><rect x="93.2988%" y="373" width="0.0663%" height="15" fill="rgb(250,187,7)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="383.50"></text></g><g><title>Security`securityd_send_sync_and_do (11 samples, 0.07%)</title><rect x="93.2988%" y="357" width="0.0663%" height="15" fill="rgb(228,66,33)" fg:x="15482" fg:w="11"/><text x="93.5488%" y="367.50"></text></g><g><title>Security`SSLHandshakeProceed (2 samples, 0.01%)</title><rect x="93.3651%" y="469" width="0.0121%" height="15" fill="rgb(234,215,21)" fg:x="15493" fg:w="2"/><text x="93.6151%" y="479.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (2 samples, 0.01%)</title><rect x="93.3651%" y="453" width="0.0121%" height="15" fill="rgb(222,191,20)" fg:x="15493" fg:w="2"/><text x="93.6151%" y="463.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::write_func (2 samples, 0.01%)</title><rect x="93.3651%" y="437" width="0.0121%" height="15" fill="rgb(245,79,54)" fg:x="15493" fg:w="2"/><text x="93.6151%" y="447.50"></text></g><g><title>generate-forecast`std::panicking::try (2 samples, 0.01%)</title><rect x="93.3651%" y="421" width="0.0121%" height="15" fill="rgb(240,10,37)" fg:x="15493" fg:w="2"/><text x="93.6151%" y="431.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.01%)</title><rect x="93.3651%" y="405" width="0.0121%" height="15" fill="rgb(214,192,32)" fg:x="15493" fg:w="2"/><text x="93.6151%" y="415.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_write_priv (2 samples, 0.01%)</title><rect x="93.3651%" y="389" width="0.0121%" height="15" fill="rgb(209,36,54)" fg:x="15493" fg:w="2"/><text x="93.6151%" y="399.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.01%)</title><rect x="93.3651%" y="373" width="0.0121%" height="15" fill="rgb(220,10,11)" fg:x="15493" fg:w="2"/><text x="93.6151%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="93.3651%" y="357" width="0.0121%" height="15" fill="rgb(221,106,17)" fg:x="15493" fg:w="2"/><text x="93.6151%" y="367.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (4 samples, 0.02%)</title><rect x="93.3651%" y="517" width="0.0241%" height="15" fill="rgb(251,142,44)" fg:x="15493" fg:w="4"/><text x="93.6151%" y="527.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::MidHandshakeSslStream&lt;S&gt;::handshake (4 samples, 0.02%)</title><rect x="93.3651%" y="501" width="0.0241%" height="15" fill="rgb(238,13,15)" fg:x="15493" fg:w="4"/><text x="93.6151%" y="511.50"></text></g><g><title>Security`SSLHandshake (4 samples, 0.02%)</title><rect x="93.3651%" y="485" width="0.0241%" height="15" fill="rgb(208,107,27)" fg:x="15493" fg:w="4"/><text x="93.6151%" y="495.50"></text></g><g><title>Security`SSLHandshakeStart (2 samples, 0.01%)</title><rect x="93.3771%" y="469" width="0.0121%" height="15" fill="rgb(205,136,37)" fg:x="15495" fg:w="2"/><text x="93.6271%" y="479.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (2 samples, 0.01%)</title><rect x="93.3892%" y="389" width="0.0121%" height="15" fill="rgb(250,205,27)" fg:x="15497" fg:w="2"/><text x="93.6392%" y="399.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (2 samples, 0.01%)</title><rect x="93.3892%" y="373" width="0.0121%" height="15" fill="rgb(210,80,43)" fg:x="15497" fg:w="2"/><text x="93.6392%" y="383.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::SslContext::new (3 samples, 0.02%)</title><rect x="93.3892%" y="517" width="0.0181%" height="15" fill="rgb(247,160,36)" fg:x="15497" fg:w="3"/><text x="93.6392%" y="527.50"></text></g><g><title>Security`SSLCreateContext (3 samples, 0.02%)</title><rect x="93.3892%" y="501" width="0.0181%" height="15" fill="rgb(234,13,49)" fg:x="15497" fg:w="3"/><text x="93.6392%" y="511.50"></text></g><g><title>Security`SSLCreateContextWithRecordFuncs (3 samples, 0.02%)</title><rect x="93.3892%" y="485" width="0.0181%" height="15" fill="rgb(234,122,0)" fg:x="15497" fg:w="3"/><text x="93.6392%" y="495.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (3 samples, 0.02%)</title><rect x="93.3892%" y="469" width="0.0181%" height="15" fill="rgb(207,146,38)" fg:x="15497" fg:w="3"/><text x="93.6392%" y="479.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (3 samples, 0.02%)</title><rect x="93.3892%" y="453" width="0.0181%" height="15" fill="rgb(207,177,25)" fg:x="15497" fg:w="3"/><text x="93.6392%" y="463.50"></text></g><g><title>Security`__SSLCreateContextWithRecordFuncs_block_invoke (3 samples, 0.02%)</title><rect x="93.3892%" y="437" width="0.0181%" height="15" fill="rgb(211,178,42)" fg:x="15497" fg:w="3"/><text x="93.6392%" y="447.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (3 samples, 0.02%)</title><rect x="93.3892%" y="421" width="0.0181%" height="15" fill="rgb(230,69,54)" fg:x="15497" fg:w="3"/><text x="93.6392%" y="431.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (3 samples, 0.02%)</title><rect x="93.3892%" y="405" width="0.0181%" height="15" fill="rgb(214,135,41)" fg:x="15497" fg:w="3"/><text x="93.6392%" y="415.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (154 samples, 0.93%)</title><rect x="92.4852%" y="565" width="0.9280%" height="15" fill="rgb(237,67,25)" fg:x="15347" fg:w="154"/><text x="92.7352%" y="575.50"></text></g><g><title>generate-forecast`native_tls::imp::TlsConnector::connect (8 samples, 0.05%)</title><rect x="93.3651%" y="549" width="0.0482%" height="15" fill="rgb(222,189,50)" fg:x="15493" fg:w="8"/><text x="93.6151%" y="559.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::ClientBuilder::handshake (8 samples, 0.05%)</title><rect x="93.3651%" y="533" width="0.0482%" height="15" fill="rgb(245,148,34)" fg:x="15493" fg:w="8"/><text x="93.6151%" y="543.50"></text></g><g><title>generate-forecast`&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (159 samples, 0.96%)</title><rect x="92.4672%" y="677" width="0.9582%" height="15" fill="rgb(222,29,6)" fg:x="15344" fg:w="159"/><text x="92.7172%" y="687.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (159 samples, 0.96%)</title><rect x="92.4672%" y="661" width="0.9582%" height="15" fill="rgb(221,189,43)" fg:x="15344" fg:w="159"/><text x="92.7172%" y="671.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (159 samples, 0.96%)</title><rect x="92.4672%" y="645" width="0.9582%" height="15" fill="rgb(207,36,27)" fg:x="15344" fg:w="159"/><text x="92.7172%" y="655.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (157 samples, 0.95%)</title><rect x="92.4792%" y="629" width="0.9461%" height="15" fill="rgb(217,90,24)" fg:x="15346" fg:w="157"/><text x="92.7292%" y="639.50"></text></g><g><title>generate-forecast`&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (157 samples, 0.95%)</title><rect x="92.4792%" y="613" width="0.9461%" height="15" fill="rgb(224,66,35)" fg:x="15346" fg:w="157"/><text x="92.7292%" y="623.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.94%)</title><rect x="92.4852%" y="597" width="0.9401%" height="15" fill="rgb(221,13,50)" fg:x="15347" fg:w="156"/><text x="92.7352%" y="607.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.94%)</title><rect x="92.4852%" y="581" width="0.9401%" height="15" fill="rgb(236,68,49)" fg:x="15347" fg:w="156"/><text x="92.7352%" y="591.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (161 samples, 0.97%)</title><rect x="92.4611%" y="709" width="0.9702%" height="15" fill="rgb(229,146,28)" fg:x="15343" fg:w="161"/><text x="92.7111%" y="719.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (161 samples, 0.97%)</title><rect x="92.4611%" y="693" width="0.9702%" height="15" fill="rgb(225,31,38)" fg:x="15343" fg:w="161"/><text x="92.7111%" y="703.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (164 samples, 0.99%)</title><rect x="92.4491%" y="805" width="0.9883%" height="15" fill="rgb(250,208,3)" fg:x="15341" fg:w="164"/><text x="92.6991%" y="815.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (164 samples, 0.99%)</title><rect x="92.4491%" y="789" width="0.9883%" height="15" fill="rgb(246,54,23)" fg:x="15341" fg:w="164"/><text x="92.6991%" y="799.50"></text></g><g><title>generate-forecast`&lt;hyper::client::ResponseFuture as core::future::future::Future&gt;::poll (164 samples, 0.99%)</title><rect x="92.4491%" y="773" width="0.9883%" height="15" fill="rgb(243,76,11)" fg:x="15341" fg:w="164"/><text x="92.6991%" y="783.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (164 samples, 0.99%)</title><rect x="92.4491%" y="757" width="0.9883%" height="15" fill="rgb(245,21,50)" fg:x="15341" fg:w="164"/><text x="92.6991%" y="767.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (164 samples, 0.99%)</title><rect x="92.4491%" y="741" width="0.9883%" height="15" fill="rgb(228,9,43)" fg:x="15341" fg:w="164"/><text x="92.6991%" y="751.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (164 samples, 0.99%)</title><rect x="92.4491%" y="725" width="0.9883%" height="15" fill="rgb(208,100,47)" fg:x="15341" fg:w="164"/><text x="92.6991%" y="735.50"></text></g><g><title>generate-forecast`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (7 samples, 0.04%)</title><rect x="93.4494%" y="693" width="0.0422%" height="15" fill="rgb(232,26,8)" fg:x="15507" fg:w="7"/><text x="93.6994%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.02%)</title><rect x="93.4735%" y="677" width="0.0181%" height="15" fill="rgb(216,166,38)" fg:x="15511" fg:w="3"/><text x="93.7235%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="93.4796%" y="661" width="0.0121%" height="15" fill="rgb(251,202,51)" fg:x="15512" fg:w="2"/><text x="93.7296%" y="671.50"></text></g><g><title>generate-forecast`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (2 samples, 0.01%)</title><rect x="93.5037%" y="661" width="0.0121%" height="15" fill="rgb(254,216,34)" fg:x="15516" fg:w="2"/><text x="93.7537%" y="671.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::idle::Idle::worker_to_notify (2 samples, 0.01%)</title><rect x="93.5037%" y="645" width="0.0121%" height="15" fill="rgb(251,32,27)" fg:x="15516" fg:w="2"/><text x="93.7537%" y="655.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (19 samples, 0.11%)</title><rect x="93.4374%" y="789" width="0.1145%" height="15" fill="rgb(208,127,28)" fg:x="15505" fg:w="19"/><text x="93.6874%" y="799.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (19 samples, 0.11%)</title><rect x="93.4374%" y="773" width="0.1145%" height="15" fill="rgb(224,137,22)" fg:x="15505" fg:w="19"/><text x="93.6874%" y="783.50"></text></g><g><title>generate-forecast`&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (19 samples, 0.11%)</title><rect x="93.4374%" y="757" width="0.1145%" height="15" fill="rgb(254,70,32)" fg:x="15505" fg:w="19"/><text x="93.6874%" y="767.50"></text></g><g><title>generate-forecast`hyper::body::body::Body::poll_inner (19 samples, 0.11%)</title><rect x="93.4374%" y="741" width="0.1145%" height="15" fill="rgb(229,75,37)" fg:x="15505" fg:w="19"/><text x="93.6874%" y="751.50"></text></g><g><title>generate-forecast`&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (17 samples, 0.10%)</title><rect x="93.4494%" y="725" width="0.1024%" height="15" fill="rgb(252,64,23)" fg:x="15507" fg:w="17"/><text x="93.6994%" y="735.50"></text></g><g><title>generate-forecast`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (17 samples, 0.10%)</title><rect x="93.4494%" y="709" width="0.1024%" height="15" fill="rgb(232,162,48)" fg:x="15507" fg:w="17"/><text x="93.6994%" y="719.50"></text></g><g><title>generate-forecast`tokio::runtime::task::waker::wake_by_val (10 samples, 0.06%)</title><rect x="93.4916%" y="693" width="0.0603%" height="15" fill="rgb(246,160,12)" fg:x="15514" fg:w="10"/><text x="93.7416%" y="703.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (9 samples, 0.05%)</title><rect x="93.4976%" y="677" width="0.0542%" height="15" fill="rgb(247,166,0)" fg:x="15515" fg:w="9"/><text x="93.7476%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (6 samples, 0.04%)</title><rect x="93.5157%" y="661" width="0.0362%" height="15" fill="rgb(249,219,21)" fg:x="15518" fg:w="6"/><text x="93.7657%" y="671.50"></text></g><g><title>generate-forecast`&lt;reqwest::async_impl::decoder::Decoder as http_body::Body&gt;::poll_data (20 samples, 0.12%)</title><rect x="93.4374%" y="805" width="0.1205%" height="15" fill="rgb(205,209,3)" fg:x="15505" fg:w="20"/><text x="93.6874%" y="815.50"></text></g><g><title>generate-forecast`url::parser::Parser::parse_host (2 samples, 0.01%)</title><rect x="93.5579%" y="757" width="0.0121%" height="15" fill="rgb(243,44,1)" fg:x="15525" fg:w="2"/><text x="93.8079%" y="767.50"></text></g><g><title>generate-forecast`url::host::Host::parse (2 samples, 0.01%)</title><rect x="93.5579%" y="741" width="0.0121%" height="15" fill="rgb(206,159,16)" fg:x="15525" fg:w="2"/><text x="93.8079%" y="751.50"></text></g><g><title>generate-forecast`idna::domain_to_ascii (2 samples, 0.01%)</title><rect x="93.5579%" y="725" width="0.0121%" height="15" fill="rgb(244,77,30)" fg:x="15525" fg:w="2"/><text x="93.8079%" y="735.50"></text></g><g><title>generate-forecast`idna::uts46::Config::to_ascii (2 samples, 0.01%)</title><rect x="93.5579%" y="709" width="0.0121%" height="15" fill="rgb(218,69,12)" fg:x="15525" fg:w="2"/><text x="93.8079%" y="719.50"></text></g><g><title>generate-forecast`idna::uts46::processing (2 samples, 0.01%)</title><rect x="93.5579%" y="693" width="0.0121%" height="15" fill="rgb(212,87,7)" fg:x="15525" fg:w="2"/><text x="93.8079%" y="703.50"></text></g><g><title>generate-forecast`url::ParseOptions::parse (3 samples, 0.02%)</title><rect x="93.5579%" y="805" width="0.0181%" height="15" fill="rgb(245,114,25)" fg:x="15525" fg:w="3"/><text x="93.8079%" y="815.50"></text></g><g><title>generate-forecast`url::parser::Parser::parse_url (3 samples, 0.02%)</title><rect x="93.5579%" y="789" width="0.0181%" height="15" fill="rgb(210,61,42)" fg:x="15525" fg:w="3"/><text x="93.8079%" y="799.50"></text></g><g><title>generate-forecast`url::parser::Parser::after_double_slash (3 samples, 0.02%)</title><rect x="93.5579%" y="773" width="0.0181%" height="15" fill="rgb(211,52,33)" fg:x="15525" fg:w="3"/><text x="93.8079%" y="783.50"></text></g><g><title>generate-forecast`&lt;futures_util::stream::stream::buffered::Buffered&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (251 samples, 1.51%)</title><rect x="92.0694%" y="869" width="1.5126%" height="15" fill="rgb(234,58,33)" fg:x="15278" fg:w="251"/><text x="92.3194%" y="879.50"></text></g><g><title>generate-forecast`futures_util::stream::stream::StreamExt::poll_next_unpin (249 samples, 1.50%)</title><rect x="92.0815%" y="853" width="1.5005%" height="15" fill="rgb(220,115,36)" fg:x="15280" fg:w="249"/><text x="92.3315%" y="863.50"></text></g><g><title>generate-forecast`futures_util::stream::stream::StreamExt::poll_next_unpin (247 samples, 1.49%)</title><rect x="92.0935%" y="837" width="1.4885%" height="15" fill="rgb(243,153,54)" fg:x="15282" fg:w="247"/><text x="92.3435%" y="847.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (244 samples, 1.47%)</title><rect x="92.1116%" y="821" width="1.4704%" height="15" fill="rgb(251,47,18)" fg:x="15285" fg:w="244"/><text x="92.3616%" y="831.50"></text></g><g><title>generate-forecast`&lt;futures_util::stream::stream::collect::Collect&lt;St,C&gt; as core::future::future::Future&gt;::poll (252 samples, 1.52%)</title><rect x="92.0694%" y="885" width="1.5186%" height="15" fill="rgb(242,102,42)" fg:x="15278" fg:w="252"/><text x="92.3194%" y="895.50"></text></g><g><title>generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,502 samples, 93.42%)</title><rect x="0.1808%" y="901" width="93.4193%" height="15" fill="rgb(234,31,38)" fg:x="30" fg:w="15502"/><text x="0.4308%" y="911.50">generate-forecast`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>generate-forecast`std::thread::local::LocalKey&lt;T&gt;::with (15,504 samples, 93.43%)</title><rect x="0.1808%" y="917" width="93.4314%" height="15" fill="rgb(221,117,51)" fg:x="30" fg:w="15504"/><text x="0.4308%" y="927.50">generate-forecast`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>generate-forecast`tokio::runtime::Runtime::block_on (15,535 samples, 93.62%)</title><rect x="0.0000%" y="981" width="93.6182%" height="15" fill="rgb(212,20,18)" fg:x="0" fg:w="15535"/><text x="0.2500%" y="991.50">generate-forecast`tokio::runtime::Runtime::block_on</text></g><g><title>generate-forecast`tokio::runtime::context::enter (15,535 samples, 93.62%)</title><rect x="0.0000%" y="965" width="93.6182%" height="15" fill="rgb(245,133,36)" fg:x="0" fg:w="15535"/><text x="0.2500%" y="975.50">generate-forecast`tokio::runtime::context::enter</text></g><g><title>generate-forecast`tokio::runtime::thread_pool::ThreadPool::block_on (15,535 samples, 93.62%)</title><rect x="0.0000%" y="949" width="93.6182%" height="15" fill="rgb(212,6,19)" fg:x="0" fg:w="15535"/><text x="0.2500%" y="959.50">generate-forecast`tokio::runtime::thread_pool::ThreadPool::block_on</text></g><g><title>generate-forecast`tokio::runtime::enter::Enter::block_on (15,535 samples, 93.62%)</title><rect x="0.0000%" y="933" width="93.6182%" height="15" fill="rgb(218,1,36)" fg:x="0" fg:w="15535"/><text x="0.2500%" y="943.50">generate-forecast`tokio::runtime::enter::Enter::block_on</text></g><g><title>generate-forecast`main (15,536 samples, 93.62%)</title><rect x="0.0000%" y="1061" width="93.6242%" height="15" fill="rgb(246,84,54)" fg:x="0" fg:w="15536"/><text x="0.2500%" y="1071.50">generate-forecast`main</text></g><g><title>generate-forecast`std::rt::lang_start_internal (15,536 samples, 93.62%)</title><rect x="0.0000%" y="1045" width="93.6242%" height="15" fill="rgb(242,110,6)" fg:x="0" fg:w="15536"/><text x="0.2500%" y="1055.50">generate-forecast`std::rt::lang_start_internal</text></g><g><title>generate-forecast`std::rt::lang_start::_{{closure}} (15,536 samples, 93.62%)</title><rect x="0.0000%" y="1029" width="93.6242%" height="15" fill="rgb(214,47,5)" fg:x="0" fg:w="15536"/><text x="0.2500%" y="1039.50">generate-forecast`std::rt::lang_start::_{{closure}}</text></g><g><title>generate-forecast`std::sys_common::backtrace::__rust_begin_short_backtrace (15,536 samples, 93.62%)</title><rect x="0.0000%" y="1013" width="93.6242%" height="15" fill="rgb(218,159,25)" fg:x="0" fg:w="15536"/><text x="0.2500%" y="1023.50">generate-forecast`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>generate-forecast`generate_forecast::main (15,536 samples, 93.62%)</title><rect x="0.0000%" y="997" width="93.6242%" height="15" fill="rgb(215,211,28)" fg:x="0" fg:w="15536"/><text x="0.2500%" y="1007.50">generate-forecast`generate_forecast::main</text></g><g><title>generate-forecast`0x1 (15,542 samples, 93.66%)</title><rect x="0.0000%" y="1093" width="93.6604%" height="15" fill="rgb(238,59,32)" fg:x="0" fg:w="15542"/><text x="0.2500%" y="1103.50">generate-forecast`0x1</text></g><g><title>libdyld.dylib`start (15,542 samples, 93.66%)</title><rect x="0.0000%" y="1077" width="93.6604%" height="15" fill="rgb(226,82,3)" fg:x="0" fg:w="15542"/><text x="0.2500%" y="1087.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (6 samples, 0.04%)</title><rect x="93.6242%" y="1061" width="0.0362%" height="15" fill="rgb(240,164,32)" fg:x="15536" fg:w="6"/><text x="93.8742%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`__workq_kernreturn (2 samples, 0.01%)</title><rect x="93.6724%" y="1077" width="0.0121%" height="15" fill="rgb(232,46,7)" fg:x="15544" fg:w="2"/><text x="93.9224%" y="1087.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (5 samples, 0.03%)</title><rect x="93.6664%" y="1093" width="0.0301%" height="15" fill="rgb(229,129,53)" fg:x="15543" fg:w="5"/><text x="93.9164%" y="1103.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (2 samples, 0.01%)</title><rect x="93.6845%" y="1077" width="0.0121%" height="15" fill="rgb(234,188,29)" fg:x="15546" fg:w="2"/><text x="93.9345%" y="1087.50"></text></g><g><title>generate-forecast`std::sys::unix::condvar::Condvar::wait_timeout (3 samples, 0.02%)</title><rect x="93.6965%" y="981" width="0.0181%" height="15" fill="rgb(246,141,4)" fg:x="15548" fg:w="3"/><text x="93.9465%" y="991.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.02%)</title><rect x="93.6965%" y="965" width="0.0181%" height="15" fill="rgb(229,23,39)" fg:x="15548" fg:w="3"/><text x="93.9465%" y="975.50"></text></g><g><title>libnetwork.dylib`nw_path_copy_dictionary_for_agent_with_generation (2 samples, 0.01%)</title><rect x="93.7206%" y="789" width="0.0121%" height="15" fill="rgb(206,12,3)" fg:x="15552" fg:w="2"/><text x="93.9706%" y="799.50"></text></g><g><title>libnetwork.dylib`nw_path_evaluator_evaluate (3 samples, 0.02%)</title><rect x="93.7206%" y="821" width="0.0181%" height="15" fill="rgb(252,226,20)" fg:x="15552" fg:w="3"/><text x="93.9706%" y="831.50"></text></g><g><title>libnetwork.dylib`nw_path_snapshot_path (3 samples, 0.02%)</title><rect x="93.7206%" y="805" width="0.0181%" height="15" fill="rgb(216,123,35)" fg:x="15552" fg:w="3"/><text x="93.9706%" y="815.50"></text></g><g><title>libnetwork.dylib`nw_path_create_evaluator_for_endpoint (8 samples, 0.05%)</title><rect x="93.7146%" y="837" width="0.0482%" height="15" fill="rgb(212,68,40)" fg:x="15551" fg:w="8"/><text x="93.9646%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`necp_client_action (4 samples, 0.02%)</title><rect x="93.7387%" y="821" width="0.0241%" height="15" fill="rgb(254,125,32)" fg:x="15555" fg:w="4"/><text x="93.9887%" y="831.50"></text></g><g><title>libnetwork.dylib`nw_nat64_v4_address_requires_synthesis (9 samples, 0.05%)</title><rect x="93.7146%" y="853" width="0.0542%" height="15" fill="rgb(253,97,22)" fg:x="15551" fg:w="9"/><text x="93.9646%" y="863.50"></text></g><g><title>libsystem_dnssd.dylib`handle_query_response (2 samples, 0.01%)</title><rect x="93.7688%" y="789" width="0.0121%" height="15" fill="rgb(241,101,14)" fg:x="15560" fg:w="2"/><text x="94.0188%" y="799.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceProcessResult (3 samples, 0.02%)</title><rect x="93.7688%" y="805" width="0.0181%" height="15" fill="rgb(238,103,29)" fg:x="15560" fg:w="3"/><text x="94.0188%" y="815.50"></text></g><g><title>libsystem_info.dylib`_mdns_query_clear (2 samples, 0.01%)</title><rect x="93.7869%" y="805" width="0.0121%" height="15" fill="rgb(233,195,47)" fg:x="15563" fg:w="2"/><text x="94.0369%" y="815.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceRefDeallocate (2 samples, 0.01%)</title><rect x="93.7869%" y="789" width="0.0121%" height="15" fill="rgb(246,218,30)" fg:x="15563" fg:w="2"/><text x="94.0369%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`__sendto_nocancel (2 samples, 0.01%)</title><rect x="93.7869%" y="773" width="0.0121%" height="15" fill="rgb(219,145,47)" fg:x="15563" fg:w="2"/><text x="94.0369%" y="783.50"></text></g><g><title>libsystem_dnssd.dylib`deliver_request (2 samples, 0.01%)</title><rect x="93.7990%" y="773" width="0.0121%" height="15" fill="rgb(243,12,26)" fg:x="15565" fg:w="2"/><text x="94.0490%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom_nocancel (2 samples, 0.01%)</title><rect x="93.7990%" y="757" width="0.0121%" height="15" fill="rgb(214,87,16)" fg:x="15565" fg:w="2"/><text x="94.0490%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (2 samples, 0.01%)</title><rect x="93.8110%" y="773" width="0.0121%" height="15" fill="rgb(208,99,42)" fg:x="15567" fg:w="2"/><text x="94.0610%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`__select_nocancel (2 samples, 0.01%)</title><rect x="93.8231%" y="773" width="0.0121%" height="15" fill="rgb(253,99,2)" fg:x="15569" fg:w="2"/><text x="94.0731%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`__sendmsg_nocancel (2 samples, 0.01%)</title><rect x="93.8351%" y="773" width="0.0121%" height="15" fill="rgb(220,168,23)" fg:x="15571" fg:w="2"/><text x="94.0851%" y="783.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceQueryRecord (11 samples, 0.07%)</title><rect x="93.7990%" y="789" width="0.0663%" height="15" fill="rgb(242,38,24)" fg:x="15565" fg:w="11"/><text x="94.0490%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`__socketpair (3 samples, 0.02%)</title><rect x="93.8472%" y="773" width="0.0181%" height="15" fill="rgb(225,182,9)" fg:x="15573" fg:w="3"/><text x="94.0972%" y="783.50"></text></g><g><title>libsystem_info.dylib`_mdns_query_start (12 samples, 0.07%)</title><rect x="93.7990%" y="805" width="0.0723%" height="15" fill="rgb(243,178,37)" fg:x="15565" fg:w="12"/><text x="94.0490%" y="815.50"></text></g><g><title>libsystem_info.dylib`_mdns_search_ex (20 samples, 0.12%)</title><rect x="93.7688%" y="821" width="0.1205%" height="15" fill="rgb(232,139,19)" fg:x="15560" fg:w="20"/><text x="94.0188%" y="831.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.01%)</title><rect x="93.8773%" y="805" width="0.0121%" height="15" fill="rgb(225,201,24)" fg:x="15578" fg:w="2"/><text x="94.1273%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (2 samples, 0.01%)</title><rect x="93.8773%" y="789" width="0.0121%" height="15" fill="rgb(221,47,46)" fg:x="15578" fg:w="2"/><text x="94.1273%" y="799.50"></text></g><g><title>libsystem_info.dylib`si_addrinfo (33 samples, 0.20%)</title><rect x="93.7146%" y="869" width="0.1989%" height="15" fill="rgb(249,23,13)" fg:x="15551" fg:w="33"/><text x="93.9646%" y="879.50"></text></g><g><title>libsystem_info.dylib`search_addrinfo (24 samples, 0.14%)</title><rect x="93.7688%" y="853" width="0.1446%" height="15" fill="rgb(219,9,5)" fg:x="15560" fg:w="24"/><text x="94.0188%" y="863.50"></text></g><g><title>libsystem_info.dylib`mdns_addrinfo (24 samples, 0.14%)</title><rect x="93.7688%" y="837" width="0.1446%" height="15" fill="rgb(254,171,16)" fg:x="15560" fg:w="24"/><text x="94.0188%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`kevent (3 samples, 0.02%)</title><rect x="93.8954%" y="821" width="0.0181%" height="15" fill="rgb(230,171,20)" fg:x="15581" fg:w="3"/><text x="94.1454%" y="831.50"></text></g><g><title>generate-forecast`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.20%)</title><rect x="93.7146%" y="933" width="0.2049%" height="15" fill="rgb(210,71,41)" fg:x="15551" fg:w="34"/><text x="93.9646%" y="943.50"></text></g><g><title>generate-forecast`&lt;(&amp;str,u16) as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (34 samples, 0.20%)</title><rect x="93.7146%" y="917" width="0.2049%" height="15" fill="rgb(206,173,20)" fg:x="15551" fg:w="34"/><text x="93.9646%" y="927.50"></text></g><g><title>generate-forecast`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (34 samples, 0.20%)</title><rect x="93.7146%" y="901" width="0.2049%" height="15" fill="rgb(233,88,34)" fg:x="15551" fg:w="34"/><text x="93.9646%" y="911.50"></text></g><g><title>libsystem_info.dylib`getaddrinfo (34 samples, 0.20%)</title><rect x="93.7146%" y="885" width="0.2049%" height="15" fill="rgb(223,209,46)" fg:x="15551" fg:w="34"/><text x="93.9646%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="93.9798%" y="869" width="0.0121%" height="15" fill="rgb(250,43,18)" fg:x="15595" fg:w="2"/><text x="94.2298%" y="879.50"></text></g><g><title>generate-forecast`tokio::runtime::queue::Inject&lt;T&gt;::is_closed (5 samples, 0.03%)</title><rect x="93.9737%" y="885" width="0.0301%" height="15" fill="rgb(208,13,10)" fg:x="15594" fg:w="5"/><text x="94.2237%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="93.9918%" y="869" width="0.0121%" height="15" fill="rgb(212,200,36)" fg:x="15597" fg:w="2"/><text x="94.2418%" y="879.50"></text></g><g><title>generate-forecast`tokio::runtime::queue::Inject&lt;T&gt;::pop (3 samples, 0.02%)</title><rect x="94.0039%" y="885" width="0.0181%" height="15" fill="rgb(225,90,30)" fg:x="15599" fg:w="3"/><text x="94.2539%" y="895.50"></text></g><g><title>generate-forecast`tokio::runtime::queue::Steal&lt;T&gt;::steal_into (5 samples, 0.03%)</title><rect x="94.0219%" y="885" width="0.0301%" height="15" fill="rgb(236,182,39)" fg:x="15602" fg:w="5"/><text x="94.2719%" y="895.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::idle::Idle::is_parked (2 samples, 0.01%)</title><rect x="94.0521%" y="885" width="0.0121%" height="15" fill="rgb(212,144,35)" fg:x="15607" fg:w="2"/><text x="94.3021%" y="895.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (4 samples, 0.02%)</title><rect x="94.0641%" y="885" width="0.0241%" height="15" fill="rgb(228,63,44)" fg:x="15609" fg:w="4"/><text x="94.3141%" y="895.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="94.0762%" y="869" width="0.0121%" height="15" fill="rgb(228,109,6)" fg:x="15611" fg:w="2"/><text x="94.3262%" y="879.50"></text></g><g><title>generate-forecast`futures_task::arc_wake::ArcWake::wake (3 samples, 0.02%)</title><rect x="94.3413%" y="821" width="0.0181%" height="15" fill="rgb(238,117,24)" fg:x="15655" fg:w="3"/><text x="94.5913%" y="831.50"></text></g><g><title>generate-forecast`tokio::park::thread::wake (2 samples, 0.01%)</title><rect x="94.3474%" y="805" width="0.0121%" height="15" fill="rgb(242,26,26)" fg:x="15656" fg:w="2"/><text x="94.5974%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.01%)</title><rect x="94.3474%" y="789" width="0.0121%" height="15" fill="rgb(221,92,48)" fg:x="15656" fg:w="2"/><text x="94.5974%" y="799.50"></text></g><g><title>generate-forecast`mio::poll::ReadinessQueueInner::dequeue_node (2 samples, 0.01%)</title><rect x="94.4377%" y="789" width="0.0121%" height="15" fill="rgb(209,209,32)" fg:x="15671" fg:w="2"/><text x="94.6877%" y="799.50"></text></g><g><title>generate-forecast`mio::sys::unix::awakener::pipe::Awakener::cleanup (10 samples, 0.06%)</title><rect x="94.4498%" y="789" width="0.0603%" height="15" fill="rgb(221,70,22)" fg:x="15673" fg:w="10"/><text x="94.6998%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`read (9 samples, 0.05%)</title><rect x="94.4558%" y="773" width="0.0542%" height="15" fill="rgb(248,145,5)" fg:x="15674" fg:w="9"/><text x="94.7058%" y="783.50"></text></g><g><title>generate-forecast`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (2 samples, 0.01%)</title><rect x="94.5703%" y="773" width="0.0121%" height="15" fill="rgb(226,116,26)" fg:x="15693" fg:w="2"/><text x="94.8203%" y="783.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="94.5824%" y="773" width="0.0301%" height="15" fill="rgb(244,5,17)" fg:x="15695" fg:w="5"/><text x="94.8324%" y="783.50"></text></g><g><title>generate-forecast`mio::sys::unix::kqueue::Selector::select (49 samples, 0.30%)</title><rect x="94.5101%" y="789" width="0.2953%" height="15" fill="rgb(252,159,33)" fg:x="15683" fg:w="49"/><text x="94.7601%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (32 samples, 0.19%)</title><rect x="94.6125%" y="773" width="0.1928%" height="15" fill="rgb(206,71,0)" fg:x="15700" fg:w="32"/><text x="94.8625%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`kevent (121 samples, 0.73%)</title><rect x="94.8054%" y="789" width="0.7292%" height="15" fill="rgb(233,118,54)" fg:x="15732" fg:w="121"/><text x="95.0554%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="95.5406%" y="789" width="0.0121%" height="15" fill="rgb(234,83,48)" fg:x="15854" fg:w="2"/><text x="95.7906%" y="799.50"></text></g><g><title>generate-forecast`mio::poll::Poll::poll1 (200 samples, 1.21%)</title><rect x="94.3594%" y="805" width="1.2053%" height="15" fill="rgb(228,3,54)" fg:x="15658" fg:w="200"/><text x="94.6094%" y="815.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="95.5526%" y="789" width="0.0121%" height="15" fill="rgb(226,155,13)" fg:x="15856" fg:w="2"/><text x="95.8026%" y="799.50"></text></g><g><title>generate-forecast`mio::poll::Poll::poll (201 samples, 1.21%)</title><rect x="94.3594%" y="821" width="1.2113%" height="15" fill="rgb(241,28,37)" fg:x="15658" fg:w="201"/><text x="94.6094%" y="831.50"></text></g><g><title>generate-forecast`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (2 samples, 0.01%)</title><rect x="95.5827%" y="789" width="0.0121%" height="15" fill="rgb(233,93,10)" fg:x="15861" fg:w="2"/><text x="95.8327%" y="799.50"></text></g><g><title>generate-forecast`tokio::io::driver::Driver::turn (214 samples, 1.29%)</title><rect x="94.3112%" y="837" width="1.2896%" height="15" fill="rgb(225,113,19)" fg:x="15650" fg:w="214"/><text x="94.5612%" y="847.50"></text></g><g><title>generate-forecast`tokio::runtime::task::waker::wake_by_val (5 samples, 0.03%)</title><rect x="95.5707%" y="821" width="0.0301%" height="15" fill="rgb(241,2,18)" fg:x="15859" fg:w="5"/><text x="95.8207%" y="831.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::schedule (4 samples, 0.02%)</title><rect x="95.5767%" y="805" width="0.0241%" height="15" fill="rgb(228,207,21)" fg:x="15860" fg:w="4"/><text x="95.8267%" y="815.50"></text></g><g><title>generate-forecast`&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (2 samples, 0.01%)</title><rect x="95.6249%" y="821" width="0.0121%" height="15" fill="rgb(213,211,35)" fg:x="15868" fg:w="2"/><text x="95.8749%" y="831.50"></text></g><g><title>generate-forecast`tokio::time::wheel::Wheel&lt;T&gt;::poll (4 samples, 0.02%)</title><rect x="95.6370%" y="821" width="0.0241%" height="15" fill="rgb(209,83,10)" fg:x="15870" fg:w="4"/><text x="95.8870%" y="831.50"></text></g><g><title>generate-forecast`tokio::time::wheel::level::Level&lt;T&gt;::next_expiration (3 samples, 0.02%)</title><rect x="95.6430%" y="805" width="0.0181%" height="15" fill="rgb(209,164,1)" fg:x="15871" fg:w="3"/><text x="95.8930%" y="815.50"></text></g><g><title>generate-forecast`tokio::time::driver::Driver&lt;T&gt;::process (13 samples, 0.08%)</title><rect x="95.6008%" y="837" width="0.0783%" height="15" fill="rgb(213,184,43)" fg:x="15864" fg:w="13"/><text x="95.8508%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.02%)</title><rect x="95.6611%" y="821" width="0.0181%" height="15" fill="rgb(231,61,34)" fg:x="15874" fg:w="3"/><text x="95.9111%" y="831.50"></text></g><g><title>generate-forecast`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (233 samples, 1.40%)</title><rect x="94.2931%" y="853" width="1.4041%" height="15" fill="rgb(235,75,3)" fg:x="15647" fg:w="233"/><text x="94.5431%" y="863.50"></text></g><g><title>generate-forecast`tokio::io::driver::Driver::turn (2 samples, 0.01%)</title><rect x="95.6972%" y="853" width="0.0121%" height="15" fill="rgb(220,106,47)" fg:x="15880" fg:w="2"/><text x="95.9472%" y="863.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (130 samples, 0.78%)</title><rect x="95.7153%" y="853" width="0.7834%" height="15" fill="rgb(210,196,33)" fg:x="15883" fg:w="130"/><text x="95.9653%" y="863.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (109 samples, 0.66%)</title><rect x="96.4987%" y="853" width="0.6569%" height="15" fill="rgb(229,154,42)" fg:x="16013" fg:w="109"/><text x="96.7487%" y="863.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.02%)</title><rect x="97.1797%" y="837" width="0.0241%" height="15" fill="rgb(228,114,26)" fg:x="16126" fg:w="4"/><text x="97.4297%" y="847.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (9 samples, 0.05%)</title><rect x="97.1556%" y="853" width="0.0542%" height="15" fill="rgb(208,144,1)" fg:x="16122" fg:w="9"/><text x="97.4056%" y="863.50"></text></g><g><title>generate-forecast`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (497 samples, 3.00%)</title><rect x="94.2329%" y="869" width="2.9951%" height="15" fill="rgb(239,112,37)" fg:x="15637" fg:w="497"/><text x="94.4829%" y="879.50">gen..</text></g><g><title>libsystem_pthread.dylib`cthread_yield (3 samples, 0.02%)</title><rect x="97.2098%" y="853" width="0.0181%" height="15" fill="rgb(210,96,50)" fg:x="16131" fg:w="3"/><text x="97.4598%" y="863.50"></text></g><g><title>libsystem_kernel.dylib`kevent (3 samples, 0.02%)</title><rect x="97.2339%" y="789" width="0.0181%" height="15" fill="rgb(222,178,2)" fg:x="16135" fg:w="3"/><text x="97.4839%" y="799.50"></text></g><g><title>generate-forecast`&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park_timeout (5 samples, 0.03%)</title><rect x="97.2279%" y="869" width="0.0301%" height="15" fill="rgb(226,74,18)" fg:x="16134" fg:w="5"/><text x="97.4779%" y="879.50"></text></g><g><title>generate-forecast`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (5 samples, 0.03%)</title><rect x="97.2279%" y="853" width="0.0301%" height="15" fill="rgb(225,67,54)" fg:x="16134" fg:w="5"/><text x="97.4779%" y="863.50"></text></g><g><title>generate-forecast`tokio::io::driver::Driver::turn (5 samples, 0.03%)</title><rect x="97.2279%" y="837" width="0.0301%" height="15" fill="rgb(251,92,32)" fg:x="16134" fg:w="5"/><text x="97.4779%" y="847.50"></text></g><g><title>generate-forecast`mio::poll::Poll::poll (5 samples, 0.03%)</title><rect x="97.2279%" y="821" width="0.0301%" height="15" fill="rgb(228,149,22)" fg:x="16134" fg:w="5"/><text x="97.4779%" y="831.50"></text></g><g><title>generate-forecast`mio::poll::Poll::poll1 (5 samples, 0.03%)</title><rect x="97.2279%" y="805" width="0.0301%" height="15" fill="rgb(243,54,13)" fg:x="16134" fg:w="5"/><text x="97.4779%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (3 samples, 0.02%)</title><rect x="97.2641%" y="869" width="0.0181%" height="15" fill="rgb(243,180,28)" fg:x="16140" fg:w="3"/><text x="97.5141%" y="879.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Context::park_timeout (531 samples, 3.20%)</title><rect x="94.0943%" y="885" width="3.2000%" height="15" fill="rgb(208,167,24)" fg:x="15614" fg:w="531"/><text x="94.3443%" y="895.50">gen..</text></g><g><title>generate-forecast`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (8 samples, 0.05%)</title><rect x="97.3063%" y="869" width="0.0482%" height="15" fill="rgb(245,73,45)" fg:x="16147" fg:w="8"/><text x="97.5563%" y="879.50"></text></g><g><title>generate-forecast`mio::poll::SetReadiness::set_readiness (8 samples, 0.05%)</title><rect x="97.3063%" y="853" width="0.0482%" height="15" fill="rgb(237,203,48)" fg:x="16147" fg:w="8"/><text x="97.5563%" y="863.50"></text></g><g><title>generate-forecast`mio::poll::enqueue_with_wakeup (8 samples, 0.05%)</title><rect x="97.3063%" y="837" width="0.0482%" height="15" fill="rgb(211,197,16)" fg:x="16147" fg:w="8"/><text x="97.5563%" y="847.50"></text></g><g><title>generate-forecast`mio::sys::unix::awakener::pipe::Awakener::wakeup (7 samples, 0.04%)</title><rect x="97.3123%" y="821" width="0.0422%" height="15" fill="rgb(243,99,51)" fg:x="16148" fg:w="7"/><text x="97.5623%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`write (7 samples, 0.04%)</title><rect x="97.3123%" y="805" width="0.0422%" height="15" fill="rgb(215,123,29)" fg:x="16148" fg:w="7"/><text x="97.5623%" y="815.50"></text></g><g><title>generate-forecast`&lt;tokio::runtime::park::Unparker as tokio::park::Unpark&gt;::unpark (3 samples, 0.02%)</title><rect x="97.3545%" y="869" width="0.0181%" height="15" fill="rgb(239,186,37)" fg:x="16155" fg:w="3"/><text x="97.6045%" y="879.50"></text></g><g><title>generate-forecast`tokio::coop::CURRENT::__getit (2 samples, 0.01%)</title><rect x="97.3786%" y="853" width="0.0121%" height="15" fill="rgb(252,136,39)" fg:x="16159" fg:w="2"/><text x="97.6286%" y="863.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (2 samples, 0.01%)</title><rect x="97.4208%" y="757" width="0.0121%" height="15" fill="rgb(223,213,32)" fg:x="16166" fg:w="2"/><text x="97.6708%" y="767.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_shutdown (2 samples, 0.01%)</title><rect x="97.4328%" y="757" width="0.0121%" height="15" fill="rgb(233,115,5)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="767.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_shutdown (2 samples, 0.01%)</title><rect x="97.4328%" y="741" width="0.0121%" height="15" fill="rgb(207,226,44)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="751.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_shutdown (2 samples, 0.01%)</title><rect x="97.4328%" y="725" width="0.0121%" height="15" fill="rgb(208,126,0)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="735.50"></text></g><g><title>Security`SSLClose (2 samples, 0.01%)</title><rect x="97.4328%" y="709" width="0.0121%" height="15" fill="rgb(244,66,21)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="719.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (2 samples, 0.01%)</title><rect x="97.4328%" y="693" width="0.0121%" height="15" fill="rgb(222,97,12)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="703.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::write_func (2 samples, 0.01%)</title><rect x="97.4328%" y="677" width="0.0121%" height="15" fill="rgb(219,213,19)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="687.50"></text></g><g><title>generate-forecast`std::panicking::try (2 samples, 0.01%)</title><rect x="97.4328%" y="661" width="0.0121%" height="15" fill="rgb(252,169,30)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="671.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.01%)</title><rect x="97.4328%" y="645" width="0.0121%" height="15" fill="rgb(206,32,51)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="655.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_write_priv (2 samples, 0.01%)</title><rect x="97.4328%" y="629" width="0.0121%" height="15" fill="rgb(250,172,42)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="639.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.01%)</title><rect x="97.4328%" y="613" width="0.0121%" height="15" fill="rgb(209,34,43)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="97.4328%" y="597" width="0.0121%" height="15" fill="rgb(223,11,35)" fg:x="16168" fg:w="2"/><text x="97.6828%" y="607.50"></text></g><g><title>generate-forecast`futures_task::arc_wake::ArcWake::wake (12 samples, 0.07%)</title><rect x="97.4991%" y="709" width="0.0723%" height="15" fill="rgb(251,219,26)" fg:x="16179" fg:w="12"/><text x="97.7491%" y="719.50"></text></g><g><title>generate-forecast`tokio::park::thread::wake (10 samples, 0.06%)</title><rect x="97.5111%" y="693" width="0.0603%" height="15" fill="rgb(231,119,3)" fg:x="16181" fg:w="10"/><text x="97.7611%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (10 samples, 0.06%)</title><rect x="97.5111%" y="677" width="0.0603%" height="15" fill="rgb(216,97,11)" fg:x="16181" fg:w="10"/><text x="97.7611%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="97.5714%" y="709" width="0.0181%" height="15" fill="rgb(223,59,9)" fg:x="16191" fg:w="3"/><text x="97.8214%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="97.5714%" y="693" width="0.0181%" height="15" fill="rgb(233,93,31)" fg:x="16191" fg:w="3"/><text x="97.8214%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.02%)</title><rect x="97.5714%" y="677" width="0.0181%" height="15" fill="rgb(239,81,33)" fg:x="16191" fg:w="3"/><text x="97.8214%" y="687.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="97.5895%" y="709" width="0.0121%" height="15" fill="rgb(213,120,34)" fg:x="16194" fg:w="2"/><text x="97.8395%" y="719.50"></text></g><g><title>generate-forecast`hyper::body::body::Sender::try_send_data (18 samples, 0.11%)</title><rect x="97.4991%" y="741" width="0.1085%" height="15" fill="rgb(243,49,53)" fg:x="16179" fg:w="18"/><text x="97.7491%" y="751.50"></text></g><g><title>generate-forecast`futures_channel::mpsc::Sender&lt;T&gt;::try_send (18 samples, 0.11%)</title><rect x="97.4991%" y="725" width="0.1085%" height="15" fill="rgb(247,216,33)" fg:x="16179" fg:w="18"/><text x="97.7491%" y="735.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (2 samples, 0.01%)</title><rect x="97.6076%" y="709" width="0.0121%" height="15" fill="rgb(226,26,14)" fg:x="16197" fg:w="2"/><text x="97.8576%" y="719.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (2 samples, 0.01%)</title><rect x="97.6196%" y="645" width="0.0121%" height="15" fill="rgb(215,49,53)" fg:x="16199" fg:w="2"/><text x="97.8696%" y="655.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::write_func (2 samples, 0.01%)</title><rect x="97.6196%" y="629" width="0.0121%" height="15" fill="rgb(245,162,40)" fg:x="16199" fg:w="2"/><text x="97.8696%" y="639.50"></text></g><g><title>generate-forecast`std::panicking::try (2 samples, 0.01%)</title><rect x="97.6196%" y="613" width="0.0121%" height="15" fill="rgb(229,68,17)" fg:x="16199" fg:w="2"/><text x="97.8696%" y="623.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (2 samples, 0.01%)</title><rect x="97.6196%" y="597" width="0.0121%" height="15" fill="rgb(213,182,10)" fg:x="16199" fg:w="2"/><text x="97.8696%" y="607.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_write_priv (2 samples, 0.01%)</title><rect x="97.6196%" y="581" width="0.0121%" height="15" fill="rgb(245,125,30)" fg:x="16199" fg:w="2"/><text x="97.8696%" y="591.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.01%)</title><rect x="97.6196%" y="565" width="0.0121%" height="15" fill="rgb(232,202,2)" fg:x="16199" fg:w="2"/><text x="97.8696%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.01%)</title><rect x="97.6196%" y="549" width="0.0121%" height="15" fill="rgb(237,140,51)" fg:x="16199" fg:w="2"/><text x="97.8696%" y="559.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (5 samples, 0.03%)</title><rect x="97.6076%" y="741" width="0.0301%" height="15" fill="rgb(236,157,25)" fg:x="16197" fg:w="5"/><text x="97.8576%" y="751.50"></text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (5 samples, 0.03%)</title><rect x="97.6076%" y="725" width="0.0301%" height="15" fill="rgb(219,209,0)" fg:x="16197" fg:w="5"/><text x="97.8576%" y="735.50"></text></g><g><title>generate-forecast`tokio::io::async_write::AsyncWrite::poll_write_buf (3 samples, 0.02%)</title><rect x="97.6196%" y="709" width="0.0181%" height="15" fill="rgb(240,116,54)" fg:x="16199" fg:w="3"/><text x="97.8696%" y="719.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 0.02%)</title><rect x="97.6196%" y="693" width="0.0181%" height="15" fill="rgb(216,10,36)" fg:x="16199" fg:w="3"/><text x="97.8696%" y="703.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (3 samples, 0.02%)</title><rect x="97.6196%" y="677" width="0.0181%" height="15" fill="rgb(222,72,44)" fg:x="16199" fg:w="3"/><text x="97.8696%" y="687.50"></text></g><g><title>Security`SSLWrite (3 samples, 0.02%)</title><rect x="97.6196%" y="661" width="0.0181%" height="15" fill="rgb(232,159,9)" fg:x="16199" fg:w="3"/><text x="97.8696%" y="671.50"></text></g><g><title>generate-forecast`bytes::bytes_mut::BytesMut::split_to (2 samples, 0.01%)</title><rect x="97.6859%" y="709" width="0.0121%" height="15" fill="rgb(210,39,32)" fg:x="16210" fg:w="2"/><text x="97.9359%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="97.6859%" y="693" width="0.0121%" height="15" fill="rgb(216,194,45)" fg:x="16210" fg:w="2"/><text x="97.9359%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="97.6859%" y="677" width="0.0121%" height="15" fill="rgb(218,18,35)" fg:x="16210" fg:w="2"/><text x="97.9359%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="97.6859%" y="661" width="0.0121%" height="15" fill="rgb(207,83,51)" fg:x="16210" fg:w="2"/><text x="97.9359%" y="671.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::prepare_uninitialized_buffer (2 samples, 0.01%)</title><rect x="97.7040%" y="693" width="0.0121%" height="15" fill="rgb(225,63,43)" fg:x="16213" fg:w="2"/><text x="97.9540%" y="703.50"></text></g><g><title>Security`SSLGetConnection (2 samples, 0.01%)</title><rect x="97.7341%" y="661" width="0.0121%" height="15" fill="rgb(207,57,36)" fg:x="16218" fg:w="2"/><text x="97.9841%" y="671.50"></text></g><g><title>Security`SSLRead (2 samples, 0.01%)</title><rect x="97.7462%" y="661" width="0.0121%" height="15" fill="rgb(216,99,33)" fg:x="16220" fg:w="2"/><text x="97.9962%" y="671.50"></text></g><g><title>Security`SSLGetConnection (2 samples, 0.01%)</title><rect x="97.7703%" y="645" width="0.0121%" height="15" fill="rgb(225,42,16)" fg:x="16224" fg:w="2"/><text x="98.0203%" y="655.50"></text></g><g><title>generate-forecast`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (4 samples, 0.02%)</title><rect x="97.8848%" y="533" width="0.0241%" height="15" fill="rgb(220,201,45)" fg:x="16243" fg:w="4"/><text x="98.1348%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (2 samples, 0.01%)</title><rect x="97.8968%" y="517" width="0.0121%" height="15" fill="rgb(225,33,4)" fg:x="16245" fg:w="2"/><text x="98.1468%" y="527.50"></text></g><g><title>libsystem_c.dylib`recv (2 samples, 0.01%)</title><rect x="97.9089%" y="533" width="0.0121%" height="15" fill="rgb(224,33,50)" fg:x="16247" fg:w="2"/><text x="98.1589%" y="543.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (196 samples, 1.18%)</title><rect x="97.8727%" y="549" width="1.1811%" height="15" fill="rgb(246,198,51)" fg:x="16241" fg:w="196"/><text x="98.1227%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (188 samples, 1.13%)</title><rect x="97.9209%" y="533" width="1.1329%" height="15" fill="rgb(205,22,4)" fg:x="16249" fg:w="188"/><text x="98.1709%" y="543.50"></text></g><g><title>generate-forecast`tokio::io::poll_evented::PollEvented&lt;E&gt;::clear_read_ready (4 samples, 0.02%)</title><rect x="99.0599%" y="549" width="0.0241%" height="15" fill="rgb(206,3,8)" fg:x="16438" fg:w="4"/><text x="99.3099%" y="559.50"></text></g><g><title>generate-forecast`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (4 samples, 0.02%)</title><rect x="99.0599%" y="533" width="0.0241%" height="15" fill="rgb(251,23,15)" fg:x="16438" fg:w="4"/><text x="99.3099%" y="543.50"></text></g><g><title>generate-forecast`tokio::io::registration::Registration::poll_read_ready (4 samples, 0.02%)</title><rect x="99.0599%" y="517" width="0.0241%" height="15" fill="rgb(252,88,28)" fg:x="16438" fg:w="4"/><text x="99.3099%" y="527.50"></text></g><g><title>generate-forecast`tokio::io::registration::Registration::poll_ready (3 samples, 0.02%)</title><rect x="99.0659%" y="501" width="0.0181%" height="15" fill="rgb(212,127,14)" fg:x="16439" fg:w="3"/><text x="99.3159%" y="511.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::read_func (216 samples, 1.30%)</title><rect x="97.8125%" y="613" width="1.3017%" height="15" fill="rgb(247,145,37)" fg:x="16231" fg:w="216"/><text x="98.0625%" y="623.50"></text></g><g><title>generate-forecast`std::panicking::try (211 samples, 1.27%)</title><rect x="97.8426%" y="597" width="1.2715%" height="15" fill="rgb(209,117,53)" fg:x="16236" fg:w="211"/><text x="98.0926%" y="607.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (210 samples, 1.27%)</title><rect x="97.8486%" y="581" width="1.2655%" height="15" fill="rgb(212,90,42)" fg:x="16237" fg:w="210"/><text x="98.0986%" y="591.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_read_priv (209 samples, 1.26%)</title><rect x="97.8546%" y="565" width="1.2595%" height="15" fill="rgb(218,164,37)" fg:x="16238" fg:w="209"/><text x="98.1046%" y="575.50"></text></g><g><title>generate-forecast`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (5 samples, 0.03%)</title><rect x="99.0840%" y="549" width="0.0301%" height="15" fill="rgb(246,65,34)" fg:x="16442" fg:w="5"/><text x="99.3340%" y="559.50"></text></g><g><title>generate-forecast`tokio::io::registration::Registration::poll_ready (4 samples, 0.02%)</title><rect x="99.0900%" y="533" width="0.0241%" height="15" fill="rgb(231,100,33)" fg:x="16443" fg:w="4"/><text x="99.3400%" y="543.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_init (4 samples, 0.02%)</title><rect x="99.1262%" y="581" width="0.0241%" height="15" fill="rgb(228,126,14)" fg:x="16449" fg:w="4"/><text x="99.3762%" y="591.50"></text></g><g><title>libcorecrypto.dylib`vng_aes_encrypt_aesni_key (3 samples, 0.02%)</title><rect x="99.1322%" y="565" width="0.0181%" height="15" fill="rgb(215,173,21)" fg:x="16450" fg:w="3"/><text x="99.3822%" y="575.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_init_with_iv (7 samples, 0.04%)</title><rect x="99.1262%" y="597" width="0.0422%" height="15" fill="rgb(210,6,40)" fg:x="16449" fg:w="7"/><text x="99.3762%" y="607.50"></text></g><g><title>libcoretls.dylib`CCSymmAEADSetIV (2 samples, 0.01%)</title><rect x="99.1684%" y="597" width="0.0121%" height="15" fill="rgb(212,48,18)" fg:x="16456" fg:w="2"/><text x="99.4184%" y="607.50"></text></g><g><title>libcorecrypto.dylib`ccaes_vng_gcm_decrypt (27 samples, 0.16%)</title><rect x="99.1804%" y="565" width="0.1627%" height="15" fill="rgb(230,214,11)" fg:x="16458" fg:w="27"/><text x="99.4304%" y="575.50"></text></g><g><title>libcorecrypto.dylib`Main_Decrypt_Loop (27 samples, 0.16%)</title><rect x="99.1804%" y="549" width="0.1627%" height="15" fill="rgb(254,105,39)" fg:x="16458" fg:w="27"/><text x="99.4304%" y="559.50"></text></g><g><title>libcoretls.dylib`SSLDecryptRecord (28 samples, 0.17%)</title><rect x="99.1804%" y="597" width="0.1687%" height="15" fill="rgb(245,158,5)" fg:x="16458" fg:w="28"/><text x="99.4304%" y="607.50"></text></g><g><title>libcoretls.dylib`CCSymmAEADDecrypt (28 samples, 0.17%)</title><rect x="99.1804%" y="581" width="0.1687%" height="15" fill="rgb(249,208,11)" fg:x="16458" fg:w="28"/><text x="99.4304%" y="591.50"></text></g><g><title>libcoretls.dylib`tls_record_decrypt (42 samples, 0.25%)</title><rect x="99.1262%" y="613" width="0.2531%" height="15" fill="rgb(210,39,28)" fg:x="16449" fg:w="42"/><text x="99.3762%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="99.3552%" y="597" width="0.0241%" height="15" fill="rgb(211,56,53)" fg:x="16487" fg:w="4"/><text x="99.6052%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="99.3913%" y="613" width="0.0181%" height="15" fill="rgb(226,201,30)" fg:x="16493" fg:w="3"/><text x="99.6413%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="99.3913%" y="597" width="0.0181%" height="15" fill="rgb(239,101,34)" fg:x="16493" fg:w="3"/><text x="99.6413%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.02%)</title><rect x="99.3913%" y="581" width="0.0181%" height="15" fill="rgb(226,209,5)" fg:x="16493" fg:w="3"/><text x="99.6413%" y="591.50"></text></g><g><title>Security`SSLRecordReadInternal (268 samples, 1.62%)</title><rect x="97.8004%" y="629" width="1.6150%" height="15" fill="rgb(250,105,47)" fg:x="16229" fg:w="268"/><text x="98.0504%" y="639.50"></text></g><g><title>Security`SSLRead (278 samples, 1.68%)</title><rect x="97.7823%" y="645" width="1.6753%" height="15" fill="rgb(230,72,3)" fg:x="16226" fg:w="278"/><text x="98.0323%" y="655.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="99.4335%" y="629" width="0.0241%" height="15" fill="rgb(232,218,39)" fg:x="16500" fg:w="4"/><text x="99.6835%" y="639.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (2 samples, 0.01%)</title><rect x="99.4576%" y="645" width="0.0121%" height="15" fill="rgb(248,166,6)" fg:x="16504" fg:w="2"/><text x="99.7076%" y="655.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (290 samples, 1.75%)</title><rect x="97.7341%" y="677" width="1.7476%" height="15" fill="rgb(247,89,20)" fg:x="16218" fg:w="290"/><text x="97.9841%" y="687.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (286 samples, 1.72%)</title><rect x="97.7582%" y="661" width="1.7235%" height="15" fill="rgb(248,130,54)" fg:x="16222" fg:w="286"/><text x="98.0082%" y="671.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::prepare_uninitialized_buffer (2 samples, 0.01%)</title><rect x="99.4817%" y="677" width="0.0121%" height="15" fill="rgb(234,196,4)" fg:x="16508" fg:w="2"/><text x="99.7317%" y="687.50"></text></g><g><title>generate-forecast`hyper::proto::h1::decode::Decoder::decode (305 samples, 1.84%)</title><rect x="97.6618%" y="725" width="1.8380%" height="15" fill="rgb(250,143,31)" fg:x="16206" fg:w="305"/><text x="97.9118%" y="735.50">g..</text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (299 samples, 1.80%)</title><rect x="97.6980%" y="709" width="1.8019%" height="15" fill="rgb(211,110,34)" fg:x="16212" fg:w="299"/><text x="97.9480%" y="719.50">g..</text></g><g><title>generate-forecast`tokio::io::async_read::AsyncRead::poll_read_buf (294 samples, 1.77%)</title><rect x="97.7281%" y="693" width="1.7717%" height="15" fill="rgb(215,124,48)" fg:x="16217" fg:w="294"/><text x="97.9781%" y="703.50">g..</text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (310 samples, 1.87%)</title><rect x="97.6377%" y="741" width="1.8681%" height="15" fill="rgb(216,46,13)" fg:x="16202" fg:w="310"/><text x="97.8877%" y="751.50">g..</text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (7 samples, 0.04%)</title><rect x="99.5058%" y="709" width="0.0422%" height="15" fill="rgb(205,184,25)" fg:x="16512" fg:w="7"/><text x="99.7558%" y="719.50"></text></g><g><title>generate-forecast`tokio::io::async_read::AsyncRead::poll_read_buf (7 samples, 0.04%)</title><rect x="99.5058%" y="693" width="0.0422%" height="15" fill="rgb(228,1,10)" fg:x="16512" fg:w="7"/><text x="99.7558%" y="703.50"></text></g><g><title>generate-forecast`&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.04%)</title><rect x="99.5119%" y="677" width="0.0362%" height="15" fill="rgb(213,116,27)" fg:x="16513" fg:w="6"/><text x="99.7619%" y="687.50"></text></g><g><title>generate-forecast`&lt;tokio_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.04%)</title><rect x="99.5119%" y="661" width="0.0362%" height="15" fill="rgb(241,95,50)" fg:x="16513" fg:w="6"/><text x="99.7619%" y="671.50"></text></g><g><title>Security`SSLRead (6 samples, 0.04%)</title><rect x="99.5119%" y="645" width="0.0362%" height="15" fill="rgb(238,48,32)" fg:x="16513" fg:w="6"/><text x="99.7619%" y="655.50"></text></g><g><title>Security`SSLRecordReadInternal (6 samples, 0.04%)</title><rect x="99.5119%" y="629" width="0.0362%" height="15" fill="rgb(235,113,49)" fg:x="16513" fg:w="6"/><text x="99.7619%" y="639.50"></text></g><g><title>generate-forecast`security_framework::secure_transport::read_func (6 samples, 0.04%)</title><rect x="99.5119%" y="613" width="0.0362%" height="15" fill="rgb(205,127,43)" fg:x="16513" fg:w="6"/><text x="99.7619%" y="623.50"></text></g><g><title>generate-forecast`std::panicking::try (6 samples, 0.04%)</title><rect x="99.5119%" y="597" width="0.0362%" height="15" fill="rgb(250,162,2)" fg:x="16513" fg:w="6"/><text x="99.7619%" y="607.50"></text></g><g><title>generate-forecast`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.04%)</title><rect x="99.5119%" y="581" width="0.0362%" height="15" fill="rgb(220,13,41)" fg:x="16513" fg:w="6"/><text x="99.7619%" y="591.50"></text></g><g><title>generate-forecast`tokio::net::tcp::stream::TcpStream::poll_read_priv (6 samples, 0.04%)</title><rect x="99.5119%" y="565" width="0.0362%" height="15" fill="rgb(249,221,25)" fg:x="16513" fg:w="6"/><text x="99.7619%" y="575.50"></text></g><g><title>generate-forecast`&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (6 samples, 0.04%)</title><rect x="99.5119%" y="549" width="0.0362%" height="15" fill="rgb(215,208,19)" fg:x="16513" fg:w="6"/><text x="99.7619%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (5 samples, 0.03%)</title><rect x="99.5179%" y="533" width="0.0301%" height="15" fill="rgb(236,175,2)" fg:x="16514" fg:w="5"/><text x="99.7679%" y="543.50"></text></g><g><title>generate-forecast`hyper::proto::h1::role::parse_headers (2 samples, 0.01%)</title><rect x="99.5480%" y="709" width="0.0121%" height="15" fill="rgb(241,52,2)" fg:x="16519" fg:w="2"/><text x="99.7980%" y="719.50"></text></g><g><title>generate-forecast`&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (2 samples, 0.01%)</title><rect x="99.5480%" y="693" width="0.0121%" height="15" fill="rgb(248,140,14)" fg:x="16519" fg:w="2"/><text x="99.7980%" y="703.50"></text></g><g><title>generate-forecast`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (11 samples, 0.07%)</title><rect x="99.5058%" y="741" width="0.0663%" height="15" fill="rgb(253,22,42)" fg:x="16512" fg:w="11"/><text x="99.7558%" y="751.50"></text></g><g><title>generate-forecast`hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (11 samples, 0.07%)</title><rect x="99.5058%" y="725" width="0.0663%" height="15" fill="rgb(234,61,47)" fg:x="16512" fg:w="11"/><text x="99.7558%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="99.5601%" y="709" width="0.0121%" height="15" fill="rgb(208,226,15)" fg:x="16521" fg:w="2"/><text x="99.8101%" y="719.50"></text></g><g><title>generate-forecast`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (356 samples, 2.15%)</title><rect x="97.4449%" y="757" width="2.1454%" height="15" fill="rgb(217,221,4)" fg:x="16170" fg:w="356"/><text x="97.6949%" y="767.50">g..</text></g><g><title>generate-forecast`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (363 samples, 2.19%)</title><rect x="97.4087%" y="789" width="2.1875%" height="15" fill="rgb(212,174,34)" fg:x="16164" fg:w="363"/><text x="97.6587%" y="799.50">g..</text></g><g><title>generate-forecast`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (363 samples, 2.19%)</title><rect x="97.4087%" y="773" width="2.1875%" height="15" fill="rgb(253,83,4)" fg:x="16164" fg:w="363"/><text x="97.6587%" y="783.50">g..</text></g><g><title>CoreFoundation`-[__NSArrayM dealloc] (3 samples, 0.02%)</title><rect x="99.5962%" y="693" width="0.0181%" height="15" fill="rgb(250,195,49)" fg:x="16527" fg:w="3"/><text x="99.8462%" y="703.50"></text></g><g><title>CoreFoundation`__RELEASE_OBJECTS_IN_THE_ARRAY__ (3 samples, 0.02%)</title><rect x="99.5962%" y="677" width="0.0181%" height="15" fill="rgb(241,192,25)" fg:x="16527" fg:w="3"/><text x="99.8462%" y="687.50"></text></g><g><title>CoreFoundation`_CFRelease (3 samples, 0.02%)</title><rect x="99.5962%" y="661" width="0.0181%" height="15" fill="rgb(208,124,10)" fg:x="16527" fg:w="3"/><text x="99.8462%" y="671.50"></text></g><g><title>Security`SecCertificateDestroy (3 samples, 0.02%)</title><rect x="99.5962%" y="645" width="0.0181%" height="15" fill="rgb(222,33,0)" fg:x="16527" fg:w="3"/><text x="99.8462%" y="655.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.01%)</title><rect x="99.6023%" y="629" width="0.0121%" height="15" fill="rgb(234,209,28)" fg:x="16528" fg:w="2"/><text x="99.8523%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="99.6023%" y="613" width="0.0121%" height="15" fill="rgb(224,11,23)" fg:x="16528" fg:w="2"/><text x="99.8523%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="99.6023%" y="597" width="0.0121%" height="15" fill="rgb(232,99,1)" fg:x="16528" fg:w="2"/><text x="99.8523%" y="607.50"></text></g><g><title>CoreFoundation`_CFRelease (5 samples, 0.03%)</title><rect x="99.5962%" y="725" width="0.0301%" height="15" fill="rgb(237,95,45)" fg:x="16527" fg:w="5"/><text x="99.8462%" y="735.50"></text></g><g><title>Security`SecTrustDestroy (5 samples, 0.03%)</title><rect x="99.5962%" y="709" width="0.0301%" height="15" fill="rgb(208,109,11)" fg:x="16527" fg:w="5"/><text x="99.8462%" y="719.50"></text></g><g><title>Security`SSLContextDestroy (7 samples, 0.04%)</title><rect x="99.5962%" y="741" width="0.0422%" height="15" fill="rgb(216,190,48)" fg:x="16527" fg:w="7"/><text x="99.8462%" y="751.50"></text></g><g><title>CoreFoundation`_CFRelease (8 samples, 0.05%)</title><rect x="99.5962%" y="757" width="0.0482%" height="15" fill="rgb(251,171,36)" fg:x="16527" fg:w="8"/><text x="99.8462%" y="767.50"></text></g><g><title>generate-forecast`&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.6444%" y="725" width="0.0121%" height="15" fill="rgb(230,62,22)" fg:x="16535" fg:w="2"/><text x="99.8944%" y="735.50"></text></g><g><title>generate-forecast`tokio::io::driver::Inner::deregister_source (2 samples, 0.01%)</title><rect x="99.6444%" y="709" width="0.0121%" height="15" fill="rgb(225,114,35)" fg:x="16535" fg:w="2"/><text x="99.8944%" y="719.50"></text></g><g><title>generate-forecast`&lt;mio::net::tcp::TcpStream as mio::event_imp::Evented&gt;::deregister (2 samples, 0.01%)</title><rect x="99.6444%" y="693" width="0.0121%" height="15" fill="rgb(215,118,42)" fg:x="16535" fg:w="2"/><text x="99.8944%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`kevent (2 samples, 0.01%)</title><rect x="99.6444%" y="677" width="0.0121%" height="15" fill="rgb(243,119,21)" fg:x="16535" fg:w="2"/><text x="99.8944%" y="687.50"></text></g><g><title>generate-forecast`core::ptr::drop_in_place (12 samples, 0.07%)</title><rect x="99.5962%" y="789" width="0.0723%" height="15" fill="rgb(252,177,53)" fg:x="16527" fg:w="12"/><text x="99.8462%" y="799.50"></text></g><g><title>generate-forecast`core::ptr::drop_in_place (12 samples, 0.07%)</title><rect x="99.5962%" y="773" width="0.0723%" height="15" fill="rgb(237,209,29)" fg:x="16527" fg:w="12"/><text x="99.8462%" y="783.50"></text></g><g><title>generate-forecast`core::ptr::drop_in_place (4 samples, 0.02%)</title><rect x="99.6444%" y="757" width="0.0241%" height="15" fill="rgb(212,65,23)" fg:x="16535" fg:w="4"/><text x="99.8944%" y="767.50"></text></g><g><title>generate-forecast`core::ptr::drop_in_place (4 samples, 0.02%)</title><rect x="99.6444%" y="741" width="0.0241%" height="15" fill="rgb(230,222,46)" fg:x="16535" fg:w="4"/><text x="99.8944%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (2 samples, 0.01%)</title><rect x="99.6565%" y="725" width="0.0121%" height="15" fill="rgb(215,135,32)" fg:x="16537" fg:w="2"/><text x="99.9065%" y="735.50"></text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (377 samples, 2.27%)</title><rect x="97.4027%" y="805" width="2.2719%" height="15" fill="rgb(246,101,22)" fg:x="16163" fg:w="377"/><text x="97.6527%" y="815.50">g..</text></g><g><title>generate-forecast`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (380 samples, 2.29%)</title><rect x="97.3906%" y="853" width="2.2900%" height="15" fill="rgb(206,107,13)" fg:x="16161" fg:w="380"/><text x="97.6406%" y="863.50">g..</text></g><g><title>generate-forecast`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (380 samples, 2.29%)</title><rect x="97.3906%" y="837" width="2.2900%" height="15" fill="rgb(250,100,44)" fg:x="16161" fg:w="380"/><text x="97.6406%" y="847.50">g..</text></g><g><title>generate-forecast`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (379 samples, 2.28%)</title><rect x="97.3966%" y="821" width="2.2840%" height="15" fill="rgb(231,147,38)" fg:x="16162" fg:w="379"/><text x="97.6466%" y="831.50">g..</text></g><g><title>generate-forecast`std::thread::local::LocalKey&lt;T&gt;::with (383 samples, 2.31%)</title><rect x="97.3786%" y="869" width="2.3081%" height="15" fill="rgb(229,8,40)" fg:x="16159" fg:w="383"/><text x="97.6286%" y="879.50">g..</text></g><g><title>generate-forecast`tokio::runtime::thread_pool::idle::Idle::worker_to_notify (4 samples, 0.02%)</title><rect x="99.6927%" y="869" width="0.0241%" height="15" fill="rgb(221,135,30)" fg:x="16543" fg:w="4"/><text x="99.9427%" y="879.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (38 samples, 0.23%)</title><rect x="99.7168%" y="869" width="0.2290%" height="15" fill="rgb(249,193,18)" fg:x="16547" fg:w="38"/><text x="99.9668%" y="879.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Context::run_task (443 samples, 2.67%)</title><rect x="97.2942%" y="885" width="2.6696%" height="15" fill="rgb(209,133,39)" fg:x="16145" fg:w="443"/><text x="97.5442%" y="895.50">ge..</text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (3 samples, 0.02%)</title><rect x="99.9458%" y="869" width="0.0181%" height="15" fill="rgb(232,100,14)" fg:x="16585" fg:w="3"/><text x="100.1958%" y="879.50"></text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Core::drain_pending_drop (5 samples, 0.03%)</title><rect x="99.9638%" y="885" width="0.0301%" height="15" fill="rgb(224,185,1)" fg:x="16588" fg:w="5"/><text x="100.2138%" y="895.50"></text></g><g><title>all (16,594 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(223,139,8)" fg:x="0" fg:w="16594"/><text x="0.2500%" y="1119.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,046 samples, 6.30%)</title><rect x="93.6965%" y="1093" width="6.3035%" height="15" fill="rgb(232,213,38)" fg:x="15548" fg:w="1046"/><text x="93.9465%" y="1103.50">libsyste..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,046 samples, 6.30%)</title><rect x="93.6965%" y="1077" width="6.3035%" height="15" fill="rgb(207,94,22)" fg:x="15548" fg:w="1046"/><text x="93.9465%" y="1087.50">libsyste..</text></g><g><title>generate-forecast`std::sys::unix::thread::Thread::new::thread_start (1,046 samples, 6.30%)</title><rect x="93.6965%" y="1061" width="6.3035%" height="15" fill="rgb(219,183,54)" fg:x="15548" fg:w="1046"/><text x="93.9465%" y="1071.50">generate..</text></g><g><title>generate-forecast`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,046 samples, 6.30%)</title><rect x="93.6965%" y="1045" width="6.3035%" height="15" fill="rgb(216,185,54)" fg:x="15548" fg:w="1046"/><text x="93.9465%" y="1055.50">generate..</text></g><g><title>generate-forecast`std::sys_common::backtrace::__rust_begin_short_backtrace (1,046 samples, 6.30%)</title><rect x="93.6965%" y="1029" width="6.3035%" height="15" fill="rgb(254,217,39)" fg:x="15548" fg:w="1046"/><text x="93.9465%" y="1039.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::context::enter (1,046 samples, 6.30%)</title><rect x="93.6965%" y="1013" width="6.3035%" height="15" fill="rgb(240,178,23)" fg:x="15548" fg:w="1046"/><text x="93.9465%" y="1023.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::blocking::pool::Inner::run (1,046 samples, 6.30%)</title><rect x="93.6965%" y="997" width="6.3035%" height="15" fill="rgb(218,11,47)" fg:x="15548" fg:w="1046"/><text x="93.9465%" y="1007.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,043 samples, 6.29%)</title><rect x="93.7146%" y="981" width="6.2854%" height="15" fill="rgb(218,51,51)" fg:x="15551" fg:w="1043"/><text x="93.9646%" y="991.50">generate..</text></g><g><title>generate-forecast`&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,043 samples, 6.29%)</title><rect x="93.7146%" y="965" width="6.2854%" height="15" fill="rgb(238,126,27)" fg:x="15551" fg:w="1043"/><text x="93.9646%" y="975.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,043 samples, 6.29%)</title><rect x="93.7146%" y="949" width="6.2854%" height="15" fill="rgb(249,202,22)" fg:x="15551" fg:w="1043"/><text x="93.9646%" y="959.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::run (1,009 samples, 6.08%)</title><rect x="93.9195%" y="933" width="6.0805%" height="15" fill="rgb(254,195,49)" fg:x="15585" fg:w="1009"/><text x="94.1695%" y="943.50">generate..</text></g><g><title>generate-forecast`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,009 samples, 6.08%)</title><rect x="93.9195%" y="917" width="6.0805%" height="15" fill="rgb(208,123,14)" fg:x="15585" fg:w="1009"/><text x="94.1695%" y="927.50">generate..</text></g><g><title>generate-forecast`tokio::runtime::thread_pool::worker::Context::run (1,007 samples, 6.07%)</title><rect x="93.9315%" y="901" width="6.0685%" height="15" fill="rgb(224,200,8)" fg:x="15587" fg:w="1007"/><text x="94.1815%" y="911.50">generate..</text></g></svg></svg>